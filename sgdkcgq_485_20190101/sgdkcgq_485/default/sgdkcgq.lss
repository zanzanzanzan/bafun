
sgdkcgq.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a60  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000a60  00000b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  00800060  00800060  00000b14  2**0
                  ALLOC
  3 .eeprom       000000d0  00810000  00810000  00000b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cb7  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002fb  00000000  00000000  0000195b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043c  00000000  00000000  00001c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000433  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f6  00000000  00000000  000026bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002fb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	0b c3       	rjmp	.+1558   	; 0x61c <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	ac c2       	rjmp	.+1368   	; 0x56c <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	24 c4       	rjmp	.+2120   	; 0x860 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	f9 c3       	rjmp	.+2034   	; 0x80e <__vector_13>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a9 39       	cpi	r26, 0x99	; 153
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	26 d2       	rcall	.+1100   	; 0x490 <main>
  44:	0b c5       	rjmp	.+2582   	; 0xa5c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <uart_tx_zan>:
    //
    #if USART_TEST == FALSE
	{
		unsigned char i;
		//
		uart_tx_buf[7] = 0;
  48:	8a ea       	ldi	r24, 0xAA	; 170
  4a:	80 93 6e 00 	sts	0x006E, r24
		for(i=0; i<7; i++)
		{
			uart_tx_buf[7] += uart_tx_buf[i];//sum    
  4e:	83 e0       	ldi	r24, 0x03	; 3
  50:	80 93 6f 00 	sts	0x006F, r24
  54:	84 e3       	ldi	r24, 0x34	; 52
  56:	80 93 70 00 	sts	0x0070, r24
    #if USART_TEST == FALSE
	{
		unsigned char i;
		//
		uart_tx_buf[7] = 0;
		for(i=0; i<7; i++)
  5a:	10 92 71 00 	sts	0x0071, r1
  5e:	10 92 72 00 	sts	0x0072, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  62:	10 92 73 00 	sts	0x0073, r1
  66:	10 92 74 00 	sts	0x0074, r1
  6a:	10 92 75 00 	sts	0x0075, r1
  6e:	10 92 76 00 	sts	0x0076, r1
  72:	10 92 77 00 	sts	0x0077, r1
  76:	ee e6       	ldi	r30, 0x6E	; 110
  78:	f0 e0       	ldi	r31, 0x00	; 0
    //
    //开始发送数据
    _delay_us(400);
    b485en = 1;//发送使能
    _delay_us(100);
    UDR = uart_tx_buf[0];
  7a:	81 91       	ld	r24, Z+
  7c:	90 91 77 00 	lds	r25, 0x0077
    uart_tx_addr = 1;
  80:	89 0f       	add	r24, r25
  82:	80 93 77 00 	sts	0x0077, r24
  86:	80 e0       	ldi	r24, 0x00	; 0

	{
		unsigned char i;
		//
		uart_tx_buf[9] = 0;
		for(i=0; i<9; i++)
  88:	e7 37       	cpi	r30, 0x77	; 119
  8a:	f8 07       	cpc	r31, r24
  8c:	b1 f7       	brne	.-20     	; 0x7a <uart_tx_zan+0x32>
  8e:	8f e1       	ldi	r24, 0x1F	; 31
  90:	93 e0       	ldi	r25, 0x03	; 3
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <uart_tx_zan+0x4a>
  96:	00 c0       	rjmp	.+0      	; 0x98 <uart_tx_zan+0x50>
  98:	00 00       	nop

    //
    //开始发送数据
    //_delay_us(400);
	_delay_us(200);
    b485en = 1;//发送使能
  9a:	97 9a       	sbi	0x12, 7	; 18
  9c:	8f e8       	ldi	r24, 0x8F	; 143
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <uart_tx_zan+0x58>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <uart_tx_zan+0x5e>
  a6:	00 00       	nop
    _delay_us(100);
    UDR = uart_tx_buf[0];
  a8:	80 91 6e 00 	lds	r24, 0x006E
  ac:	8c b9       	out	0x0c, r24	; 12
    uart_tx_addr = 1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 79 00 	sts	0x0079, r24
  b4:	08 95       	ret

000000b6 <hardward_init>:
}
/////////////////////////////////////////////////////////////
void hardward_init(void)
{
	//硬件初始化程序,设置固定的端口方向,串口属性,AD属性等
	wdt_disable();
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	81 bd       	out	0x21, r24	; 33
  be:	11 bc       	out	0x21, r1	; 33
  c0:	0f be       	out	0x3f, r0	; 63
	//I/O设置
	PORTB=0;//先设置所有的口为高阻
  c2:	18 ba       	out	0x18, r1	; 24
	//
    DDRB = _BV(PB1)|_BV(PB2);
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	87 bb       	out	0x17, r24	; 23
    PORTD = _BV(PD2)|_BV(PD3);
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	82 bb       	out	0x12, r24	; 18
	DDRD = _BV(PD7);//根据需要设置输出口
  cc:	90 e8       	ldi	r25, 0x80	; 128
  ce:	91 bb       	out	0x11, r25	; 17
    PORTC = _BV(PC2)|_BV(PC3);
  d0:	85 bb       	out	0x15, r24	; 21
    DDRC = _BV(PC4);
  d2:	80 e1       	ldi	r24, 0x10	; 16
  d4:	84 bb       	out	0x14, r24	; 20
	//定时器0
	TCCR0 = 0x03;//,64分频
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	83 bf       	out	0x33, r24	; 51

		TCNT0 = 255-62;//4MHz时钟,计数62次,约1毫秒
	}
	#elif F_CPU == F_16M
	{
		TCNT0 = 255-250;//16MHz时钟,计数250次,约1毫秒
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	82 bf       	out	0x32, r24	; 50
	#else
	{
		#error "F_CPU error"
	}
	#endif
	TIMSK |=_BV(TOIE0);//定时器0溢出中断使能
  de:	89 b7       	in	r24, 0x39	; 57
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	89 bf       	out	0x39, r24	; 57
	//定时器1
	TCCR1A = 0xf2;//oc1a,oc1b匹配时置1,达到TOP时清零
  e4:	82 ef       	ldi	r24, 0xF2	; 242
  e6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x19;//时钟不分频
  e8:	89 e1       	ldi	r24, 0x19	; 25
  ea:	8e bd       	out	0x2e, r24	; 46
	ICR1 = PWM_TOP;//TOP//4kHz
  ec:	80 e9       	ldi	r24, 0x90	; 144
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	97 bd       	out	0x27, r25	; 39
  f2:	86 bd       	out	0x26, r24	; 38
    OCR1A = PWM_TOP/2;//电压输出初始占空比50%,2.5v
  f4:	88 ec       	ldi	r24, 0xC8	; 200
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	9b bd       	out	0x2b, r25	; 43
  fa:	8a bd       	out	0x2a, r24	; 42
    OCR1B = PWM_LOW;//触发脉冲,占空比LOW_PULSE/PWM_TOP(低电平时间)
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	99 bd       	out	0x29, r25	; 41
 102:	88 bd       	out	0x28, r24	; 40
    //外中断
    MCUCR &= 0xf0;
 104:	85 b7       	in	r24, 0x35	; 53
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	85 bf       	out	0x35, r24	; 53
    MCUCR |= 0x08;//外中断1下降沿触发
 10a:	85 b7       	in	r24, 0x35	; 53
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	85 bf       	out	0x35, r24	; 53
    GICR &= 0x3f;
 110:	8b b7       	in	r24, 0x3b	; 59
 112:	8f 73       	andi	r24, 0x3F	; 63
 114:	8b bf       	out	0x3b, r24	; 59
    GICR |= _BV(INT1);//外中断1使能
 116:	8b b7       	in	r24, 0x3b	; 59
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8b bf       	out	0x3b, r24	; 59
	//
	#if USART_TEST == FALSE
	{
		//38461.5 Bd //0.2%
		UBRRH = 0;
 11c:	10 bc       	out	0x20, r1	; 32
		{
			UBRRL = 12;
		}
		#elif F_CPU == F_16M
		{
			UBRRL = 51;
 11e:	83 e3       	ldi	r24, 0x33	; 51
 120:	89 b9       	out	0x09, r24	; 9
		#else
		{
			#error "F_CPU error"
		}
		#endif
		UCSRA = (1<<U2X);//波特率分频因子从16降到8
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	8b b9       	out	0x0b, r24	; 11
		UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);//接收和发送中断使能
 126:	88 ed       	ldi	r24, 0xD8	; 216
 128:	8a b9       	out	0x0a, r24	; 10
		UCSRC = (1<<URSEL)|(3<<UCSZ0);//8N1
 12a:	86 e8       	ldi	r24, 0x86	; 134
 12c:	80 bd       	out	0x20, r24	; 32
		b485en = 0;//接收使能,发送禁止
 12e:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	8f e1       	ldi	r24, 0x1F	; 31
 132:	9e e4       	ldi	r25, 0x4E	; 78
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <hardward_init+0x7e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <hardward_init+0x84>
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <softward_init>:
    _delay_ms(5);
}
////////////////////////////////////////////////////////////////
void softward_init(void)
{	
    MCUCR &= 0x0f;//休眠禁止,空闲模式
 13e:	85 b7       	in	r24, 0x35	; 53
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	85 bf       	out	0x35, r24	; 53
    //
    m_pulse_counter = 0;//检测脉冲个数
 144:	10 92 98 00 	sts	0x0098, r1
 148:	10 92 97 00 	sts	0x0097, r1
    m_pulse_value.ml = 0;//检测脉冲宽度值
 14c:	10 92 6a 00 	sts	0x006A, r1
 150:	10 92 6b 00 	sts	0x006B, r1
 154:	10 92 6c 00 	sts	0x006C, r1
 158:	10 92 6d 00 	sts	0x006D, r1
    //
	m_cgq_ack=0;
 15c:	10 92 7f 00 	sts	0x007F, r1
	m_cgq_ack_delay=0;
 160:	10 92 96 00 	sts	0x0096, r1
    //
    m_pulse_value_bak.ms[0] = PULSE_TOP/2;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	92 e6       	ldi	r25, 0x62	; 98
 168:	90 93 63 00 	sts	0x0063, r25
 16c:	80 93 62 00 	sts	0x0062, r24
    m_pulse_value_bak.ms[1] = PULSE_TOP/2;
 170:	90 93 65 00 	sts	0x0065, r25
 174:	80 93 64 00 	sts	0x0064, r24
    m_pulse_value_bak.ms[2] = PULSE_TOP/2;
 178:	90 93 67 00 	sts	0x0067, r25
 17c:	80 93 66 00 	sts	0x0066, r24
    m_pulse_value_bak.ms[3] = PULSE_TOP/2;
 180:	90 93 69 00 	sts	0x0069, r25
 184:	80 93 68 00 	sts	0x0068, r24
	//
	wdt_enable(WDTO_2S);//启动看门狗定时器
 188:	2f e0       	ldi	r18, 0x0F	; 15
 18a:	88 e1       	ldi	r24, 0x18	; 24
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	a8 95       	wdr
 194:	81 bd       	out	0x21, r24	; 33
 196:	0f be       	out	0x3f, r0	; 63
 198:	21 bd       	out	0x21, r18	; 33
 19a:	08 95       	ret

0000019c <eeprom_read_word_user>:
        m_ml_set = PULSE_BOTTOM;
	}
}
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_user(const uint16_t *p)
{
 19c:	af 92       	push	r10
 19e:	bf 92       	push	r11
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	8c 01       	movw	r16, r24
	unsigned short tmp,tmp1,tmp2;
	//
	tmp = eeprom_read_word(p);
 1b2:	2f d4       	rcall	.+2142   	; 0xa12 <__eerd_word_m8>
 1b4:	ec 01       	movw	r28, r24
	tmp1 = eeprom_read_word((const uint16_t *)(p+sizeof(EEPROM_DATA)));
 1b6:	68 01       	movw	r12, r16
 1b8:	80 e6       	ldi	r24, 0x60	; 96
 1ba:	c8 0e       	add	r12, r24
 1bc:	d1 1c       	adc	r13, r1
 1be:	c6 01       	movw	r24, r12
 1c0:	28 d4       	rcall	.+2128   	; 0xa12 <__eerd_word_m8>
 1c2:	7c 01       	movw	r14, r24
	tmp2 = eeprom_read_word((const uint16_t *)(p+2*sizeof(EEPROM_DATA)));
 1c4:	58 01       	movw	r10, r16
 1c6:	80 ec       	ldi	r24, 0xC0	; 192
 1c8:	a8 0e       	add	r10, r24
 1ca:	b1 1c       	adc	r11, r1
 1cc:	c5 01       	movw	r24, r10
 1ce:	21 d4       	rcall	.+2114   	; 0xa12 <__eerd_word_m8>
	//
	if(tmp == tmp1)
 1d0:	ce 15       	cp	r28, r14
 1d2:	df 05       	cpc	r29, r15
 1d4:	31 f4       	brne	.+12     	; 0x1e2 <eeprom_read_word_user+0x46>
	{
		if(tmp != tmp2)
 1d6:	c8 17       	cp	r28, r24
 1d8:	d9 07       	cpc	r29, r25
 1da:	89 f0       	breq	.+34     	; 0x1fe <eeprom_read_word_user+0x62>
		{
			tmp2 = tmp;
			eeprom_write_word((uint16_t *)(p+2*sizeof(EEPROM_DATA)),tmp2);
 1dc:	be 01       	movw	r22, r28
 1de:	c5 01       	movw	r24, r10
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <eeprom_read_word_user+0x50>
		}
	}
	else if(tmp == tmp2)
 1e2:	c8 17       	cp	r28, r24
 1e4:	d9 07       	cpc	r29, r25
 1e6:	21 f4       	brne	.+8      	; 0x1f0 <eeprom_read_word_user+0x54>
	{
		tmp1 = tmp;
		eeprom_write_word((uint16_t *)(p+sizeof(EEPROM_DATA)),tmp1);
 1e8:	be 01       	movw	r22, r28
 1ea:	c6 01       	movw	r24, r12
 1ec:	17 d4       	rcall	.+2094   	; 0xa1c <__eewr_word_m8>
 1ee:	07 c0       	rjmp	.+14     	; 0x1fe <eeprom_read_word_user+0x62>
	}
	else if(tmp1 == tmp2)
 1f0:	e8 16       	cp	r14, r24
 1f2:	f9 06       	cpc	r15, r25
 1f4:	21 f4       	brne	.+8      	; 0x1fe <eeprom_read_word_user+0x62>
	{
		tmp = tmp1;
		eeprom_write_word((uint16_t *)p,tmp);
 1f6:	b7 01       	movw	r22, r14
 1f8:	c8 01       	movw	r24, r16
 1fa:	10 d4       	rcall	.+2080   	; 0xa1c <__eewr_word_m8>
 1fc:	e7 01       	movw	r28, r14
	}
	//
	return tmp;
}
 1fe:	ce 01       	movw	r24, r28
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	ff 90       	pop	r15
 20a:	ef 90       	pop	r14
 20c:	df 90       	pop	r13
 20e:	cf 90       	pop	r12
 210:	bf 90       	pop	r11
 212:	af 90       	pop	r10
 214:	08 95       	ret

00000216 <eeprom_write_word_user>:
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ec 01       	movw	r28, r24
 220:	8b 01       	movw	r16, r22
	eeprom_write_word((uint16_t *)p,val);
 222:	fc d3       	rcall	.+2040   	; 0xa1c <__eewr_word_m8>
	eeprom_write_word((uint16_t *)(p+sizeof(EEPROM_DATA)),val);
 224:	b8 01       	movw	r22, r16
 226:	ce 01       	movw	r24, r28
 228:	80 5a       	subi	r24, 0xA0	; 160
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	f7 d3       	rcall	.+2030   	; 0xa1c <__eewr_word_m8>
	eeprom_write_word((uint16_t *)(p+2*sizeof(EEPROM_DATA)),val);
 22e:	b8 01       	movw	r22, r16
 230:	ce 01       	movw	r24, r28
 232:	80 54       	subi	r24, 0x40	; 64
 234:	9f 4f       	sbci	r25, 0xFF	; 255
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
	eeprom_write_word((uint16_t *)p,val);
	eeprom_write_word((uint16_t *)(p+sizeof(EEPROM_DATA)),val);
	eeprom_write_word((uint16_t *)(p+2*sizeof(EEPROM_DATA)),val);
 23e:	ee c3       	rjmp	.+2012   	; 0xa1c <__eewr_word_m8>

00000240 <set_default_para>:
////////////////////////////////////////////////////////////////
void set_default_para(void)
{
	//????????????
	//
	cli();
 240:	f8 94       	cli
	//
	//??
	eeprom_write_word_user((uint16_t *)&m_para[0].e_mh,PULSE_TOP);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	74 ec       	ldi	r23, 0xC4	; 196
 246:	80 e1       	ldi	r24, 0x10	; 16
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	e5 df       	rcall	.-54     	; 0x216 <eeprom_write_word_user>
	eeprom_write_word_user((uint16_t *)&m_para[0].e_ml,PULSE_BOTTOM);
 24c:	69 e9       	ldi	r22, 0x99	; 153
 24e:	73 e1       	ldi	r23, 0x13	; 19
 250:	82 e1       	ldi	r24, 0x12	; 18
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	e0 df       	rcall	.-64     	; 0x216 <eeprom_write_word_user>
	//
	//??????
	eeprom_write_word_user((uint16_t *)&m_para[0].e_para_seted_flag,PARA_SETED_FLAG);
 256:	69 e1       	ldi	r22, 0x19	; 25
 258:	71 e0       	ldi	r23, 0x01	; 1
 25a:	84 e1       	ldi	r24, 0x14	; 20
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	db df       	rcall	.-74     	; 0x216 <eeprom_write_word_user>
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	81 ee       	ldi	r24, 0xE1	; 225
 264:	94 e0       	ldi	r25, 0x04	; 4
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <set_default_para+0x26>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <set_default_para+0x30>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <read_para>:
	wdt_enable(WDTO_2S);//启动看门狗定时器
}
////////////////////////////////////////////////////////////////
void read_para()
{
	if(PARA_SETED_FLAG != eeprom_read_word_user((const uint16_t *)&m_para[0].e_para_seted_flag))
 274:	84 e1       	ldi	r24, 0x14	; 20
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	91 df       	rcall	.-222    	; 0x19c <eeprom_read_word_user>
 27a:	89 31       	cpi	r24, 0x19	; 25
 27c:	91 40       	sbci	r25, 0x01	; 1
 27e:	09 f0       	breq	.+2      	; 0x282 <read_para+0xe>
	{
		//如果标志不正常，设置默认参数
		set_default_para();
 280:	df cf       	rjmp	.-66     	; 0x240 <set_default_para>
		return;//正常情况下代码执行不到这里，显性的表示执行过程
	}
	//读非易失参数,高低料位设置值
    m_mh_set = eeprom_read_word_user((const uint16_t *)&m_para[0].e_mh);
 282:	80 e1       	ldi	r24, 0x10	; 16
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	8a df       	rcall	.-236    	; 0x19c <eeprom_read_word_user>
 288:	90 93 86 00 	sts	0x0086, r25
 28c:	80 93 85 00 	sts	0x0085, r24
    if(m_mh_set > PULSE_TOP)//输出5v
 290:	80 91 85 00 	lds	r24, 0x0085
 294:	90 91 86 00 	lds	r25, 0x0086
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	94 4c       	sbci	r25, 0xC4	; 196
 29c:	18 f0       	brcs	.+6      	; 0x2a4 <read_para+0x30>
	{
        m_mh_set = PULSE_TOP;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	94 ec       	ldi	r25, 0xC4	; 196
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <read_para+0x42>
	}
    else if(m_mh_set < PULSE_BOTTOM)
 2a4:	80 91 85 00 	lds	r24, 0x0085
 2a8:	90 91 86 00 	lds	r25, 0x0086
 2ac:	89 39       	cpi	r24, 0x99	; 153
 2ae:	93 41       	sbci	r25, 0x13	; 19
 2b0:	30 f4       	brcc	.+12     	; 0x2be <read_para+0x4a>
	{
        m_mh_set = PULSE_BOTTOM+10;
 2b2:	83 ea       	ldi	r24, 0xA3	; 163
 2b4:	93 e1       	ldi	r25, 0x13	; 19
 2b6:	90 93 86 00 	sts	0x0086, r25
 2ba:	80 93 85 00 	sts	0x0085, r24
	}
  	//
    m_ml_set = eeprom_read_word_user((const uint16_t *)&m_para[0].e_ml);
 2be:	82 e1       	ldi	r24, 0x12	; 18
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	6c df       	rcall	.-296    	; 0x19c <eeprom_read_word_user>
 2c4:	90 93 88 00 	sts	0x0088, r25
 2c8:	80 93 87 00 	sts	0x0087, r24
    if(m_ml_set > m_mh_set)
 2cc:	20 91 87 00 	lds	r18, 0x0087
 2d0:	30 91 88 00 	lds	r19, 0x0088
 2d4:	80 91 85 00 	lds	r24, 0x0085
 2d8:	90 91 86 00 	lds	r25, 0x0086
 2dc:	82 17       	cp	r24, r18
 2de:	93 07       	cpc	r25, r19
 2e0:	30 f4       	brcc	.+12     	; 0x2ee <read_para+0x7a>
	{
        m_ml_set = m_mh_set-10;
 2e2:	80 91 85 00 	lds	r24, 0x0085
 2e6:	90 91 86 00 	lds	r25, 0x0086
 2ea:	0a 97       	sbiw	r24, 0x0a	; 10
 2ec:	09 c0       	rjmp	.+18     	; 0x300 <read_para+0x8c>
	}
    else if(m_ml_set < PULSE_BOTTOM)
 2ee:	80 91 87 00 	lds	r24, 0x0087
 2f2:	90 91 88 00 	lds	r25, 0x0088
 2f6:	89 39       	cpi	r24, 0x99	; 153
 2f8:	93 41       	sbci	r25, 0x13	; 19
 2fa:	30 f4       	brcc	.+12     	; 0x308 <read_para+0x94>
	{
        m_ml_set = PULSE_BOTTOM;
 2fc:	89 e9       	ldi	r24, 0x99	; 153
 2fe:	93 e1       	ldi	r25, 0x13	; 19
 300:	90 93 88 00 	sts	0x0088, r25
 304:	80 93 87 00 	sts	0x0087, r24
 308:	08 95       	ret

0000030a <scan_key>:
////////////////////////////////////////////////////////////////
void scan_key(void)
{
#ifndef __TEST__
	int i;
    if(0 == bkmh)
 30a:	9a 99       	sbic	0x13, 2	; 19
 30c:	0e c0       	rjmp	.+28     	; 0x32a <scan_key+0x20>
 30e:	82 e3       	ldi	r24, 0x32	; 50
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	ef e9       	ldi	r30, 0x9F	; 159
 314:	ff e0       	ldi	r31, 0x0F	; 15
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <scan_key+0xc>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <scan_key+0x12>
 31c:	00 00       	nop
    {
        //检测到高料位按键操作
		for(i=50; i>0; i--)
		{
        	_delay_ms(1);
			if(0 != bkmh)
 31e:	9a 99       	sbic	0x13, 2	; 19
 320:	53 c0       	rjmp	.+166    	; 0x3c8 <scan_key+0xbe>
 322:	01 97       	sbiw	r24, 0x01	; 1
#ifndef __TEST__
	int i;
    if(0 == bkmh)
    {
        //检测到高料位按键操作
		for(i=50; i>0; i--)
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	a9 f7       	brne	.-22     	; 0x312 <scan_key+0x8>
 328:	67 c0       	rjmp	.+206    	; 0x3f8 <scan_key+0xee>
	        m_pulse_counter = 0;
	        m_pulse_value.ml = 0;
	        sei();
		}
    }
    else if(0 == bkml)
 32a:	9b 99       	sbic	0x13, 3	; 19
 32c:	0e c0       	rjmp	.+28     	; 0x34a <scan_key+0x40>
 32e:	82 e3       	ldi	r24, 0x32	; 50
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ef e9       	ldi	r30, 0x9F	; 159
 334:	ff e0       	ldi	r31, 0x0F	; 15
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <scan_key+0x2c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <scan_key+0x32>
 33c:	00 00       	nop
    {
        //检测到低料位按键操作
		for(i=50; i>0; i--)
		{
        	_delay_ms(1);
			if(0 != bkml)
 33e:	9b 99       	sbic	0x13, 3	; 19
 340:	43 c0       	rjmp	.+134    	; 0x3c8 <scan_key+0xbe>
 342:	01 97       	sbiw	r24, 0x01	; 1
		}
    }
    else if(0 == bkml)
    {
        //检测到低料位按键操作
		for(i=50; i>0; i--)
 344:	00 97       	sbiw	r24, 0x00	; 0
 346:	a9 f7       	brne	.-22     	; 0x332 <scan_key+0x28>
 348:	94 c0       	rjmp	.+296    	; 0x472 <__stack+0x13>
	        m_pulse_counter = 0;
	        m_pulse_value.ml = 0;
	        sei();
		}
    }
    else if(1 == command_gaoliaowei)
 34a:	80 91 82 00 	lds	r24, 0x0082
 34e:	83 ff       	sbrs	r24, 3
 350:	1a c0       	rjmp	.+52     	; 0x386 <scan_key+0x7c>
    {
        command_gaoliaowei = 0;
 352:	80 91 82 00 	lds	r24, 0x0082
 356:	87 7f       	andi	r24, 0xF7	; 247
 358:	80 93 82 00 	sts	0x0082, r24
        m_mh_set = m_mcur.ms;
 35c:	80 91 93 00 	lds	r24, 0x0093
 360:	90 91 94 00 	lds	r25, 0x0094
 364:	90 93 86 00 	sts	0x0086, r25
 368:	80 93 85 00 	sts	0x0085, r24
        eeprom_write_word_user((uint16_t *)&m_para[0].e_mh,m_mh_set);
 36c:	60 91 85 00 	lds	r22, 0x0085
 370:	70 91 86 00 	lds	r23, 0x0086
 374:	80 e1       	ldi	r24, 0x10	; 16
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	4e df       	rcall	.-356    	; 0x216 <eeprom_write_word_user>
        bled=1;
 37a:	ac 9a       	sbi	0x15, 4	; 21
        m_led_delay = 150;
 37c:	86 e9       	ldi	r24, 0x96	; 150
 37e:	80 93 7c 00 	sts	0x007C, r24
        m_cgq_ack=GAOLIAOWEI;
 382:	84 e3       	ldi	r24, 0x34	; 52
 384:	1d c0       	rjmp	.+58     	; 0x3c0 <scan_key+0xb6>
		m_cgq_ack_delay=0;

		//将对噶两位机型反馈
		
    }
    else if(1 == command_diliaowei)
 386:	80 91 82 00 	lds	r24, 0x0082
 38a:	84 ff       	sbrs	r24, 4
 38c:	1d c0       	rjmp	.+58     	; 0x3c8 <scan_key+0xbe>
    {
        command_diliaowei = 0;
 38e:	80 91 82 00 	lds	r24, 0x0082
 392:	8f 7e       	andi	r24, 0xEF	; 239
 394:	80 93 82 00 	sts	0x0082, r24
        m_ml_set = m_mcur.ms;
 398:	80 91 93 00 	lds	r24, 0x0093
 39c:	90 91 94 00 	lds	r25, 0x0094
 3a0:	90 93 88 00 	sts	0x0088, r25
 3a4:	80 93 87 00 	sts	0x0087, r24
        eeprom_write_word_user((uint16_t *)&m_para[0].e_ml,m_ml_set);
 3a8:	60 91 87 00 	lds	r22, 0x0087
 3ac:	70 91 88 00 	lds	r23, 0x0088
 3b0:	82 e1       	ldi	r24, 0x12	; 18
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	30 df       	rcall	.-416    	; 0x216 <eeprom_write_word_user>
        bled = 1;
 3b6:	ac 9a       	sbi	0x15, 4	; 21
        m_led_delay = 150;
 3b8:	86 e9       	ldi	r24, 0x96	; 150
 3ba:	80 93 7c 00 	sts	0x007C, r24
		//
        m_cgq_ack=DILIAOWEI;
 3be:	85 e3       	ldi	r24, 0x35	; 53
 3c0:	80 93 7f 00 	sts	0x007F, r24
		m_cgq_ack_delay=0;
 3c4:	10 92 96 00 	sts	0x0096, r1
    }
	//uart_tx_zan();


	if (send_time_count < 20)
 3c8:	80 91 60 00 	lds	r24, 0x0060
 3cc:	90 91 61 00 	lds	r25, 0x0061
 3d0:	84 31       	cpi	r24, 0x14	; 20
 3d2:	91 05       	cpc	r25, r1
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <scan_key+0xce>
 3d6:	5b c0       	rjmp	.+182    	; 0x48e <__stack+0x2f>
	{ 
	    
		send_time_count ++;
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	90 93 61 00 	sts	0x0061, r25
 3de:	80 93 60 00 	sts	0x0060, r24
		if (send_time_count >3 && send_time_count%3 ==0)
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	91 05       	cpc	r25, r1
 3e6:	08 f4       	brcc	.+2      	; 0x3ea <scan_key+0xe0>
 3e8:	52 c0       	rjmp	.+164    	; 0x48e <__stack+0x2f>
 3ea:	63 e0       	ldi	r22, 0x03	; 3
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	b6 d2       	rcall	.+1388   	; 0x95c <__udivmodhi4>
 3f0:	89 2b       	or	r24, r25
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <scan_key+0xec>
 3f4:	4c c0       	rjmp	.+152    	; 0x48e <__stack+0x2f>
		{
			uart_tx_zan();
 3f6:	28 ce       	rjmp	.-944    	; 0x48 <uart_tx_zan>
				break;
			}
		}
		if(0 == i)
		{
	        cli();
 3f8:	f8 94       	cli
	        if(0 == bkmh)
 3fa:	9a 99       	sbic	0x13, 2	; 19
 3fc:	2c c0       	rjmp	.+88     	; 0x456 <scan_key+0x14c>
	        {
	            bled = 1;
 3fe:	ac 9a       	sbi	0x15, 4	; 21
	            for(;0 == bkmh;)
 400:	9a 99       	sbic	0x13, 2	; 19
 402:	08 c0       	rjmp	.+16     	; 0x414 <scan_key+0x10a>
 404:	8f e9       	ldi	r24, 0x9F	; 159
 406:	9f e0       	ldi	r25, 0x0F	; 15
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <scan_key+0xfe>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <scan_key+0x104>
 40e:	00 00       	nop
	            {
	                _delay_ms(1);
	                wdt_reset();
 410:	a8 95       	wdr
 412:	f6 cf       	rjmp	.-20     	; 0x400 <scan_key+0xf6>
	            }
	            m_mh_set = m_mcur.ms;
 414:	80 91 93 00 	lds	r24, 0x0093
 418:	90 91 94 00 	lds	r25, 0x0094
 41c:	90 93 86 00 	sts	0x0086, r25
 420:	80 93 85 00 	sts	0x0085, r24
	            eeprom_write_word_user((uint16_t *)&m_para[0].e_mh,m_mh_set);
 424:	60 91 85 00 	lds	r22, 0x0085
 428:	70 91 86 00 	lds	r23, 0x0086
 42c:	80 e1       	ldi	r24, 0x10	; 16
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e c0       	rjmp	.+28     	; 0x44e <scan_key+0x144>
	            for(;0 == bkml;)
	            {
	                _delay_ms(1);
	                wdt_reset();
	            }
	            m_ml_set = m_mcur.ms;
 432:	80 91 93 00 	lds	r24, 0x0093
 436:	90 91 94 00 	lds	r25, 0x0094
 43a:	90 93 88 00 	sts	0x0088, r25
 43e:	80 93 87 00 	sts	0x0087, r24
	            eeprom_write_word_user((uint16_t *)&m_para[0].e_ml,m_ml_set);
 442:	60 91 87 00 	lds	r22, 0x0087
 446:	70 91 88 00 	lds	r23, 0x0088
 44a:	82 e1       	ldi	r24, 0x12	; 18
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	e3 de       	rcall	.-570    	; 0x216 <eeprom_write_word_user>
	            m_led_delay = 150;//灯延时
 450:	86 e9       	ldi	r24, 0x96	; 150
 452:	80 93 7c 00 	sts	0x007C, r24
	        }
	        m_pulse_counter = 0;
 456:	10 92 98 00 	sts	0x0098, r1
 45a:	10 92 97 00 	sts	0x0097, r1
	        m_pulse_value.ml = 0;
 45e:	10 92 6a 00 	sts	0x006A, r1
 462:	10 92 6b 00 	sts	0x006B, r1
 466:	10 92 6c 00 	sts	0x006C, r1
 46a:	10 92 6d 00 	sts	0x006D, r1
	        sei();
 46e:	78 94       	sei
 470:	ab cf       	rjmp	.-170    	; 0x3c8 <scan_key+0xbe>
				break;
			}
		}
		if(0 == i)
		{
	        cli();
 472:	f8 94       	cli
	        if(0 == bkml)
 474:	9b 99       	sbic	0x13, 3	; 19
 476:	ef cf       	rjmp	.-34     	; 0x456 <scan_key+0x14c>
	        {
	            bled=1;
 478:	ac 9a       	sbi	0x15, 4	; 21
	            for(;0 == bkml;)
 47a:	9b 99       	sbic	0x13, 3	; 19
 47c:	da cf       	rjmp	.-76     	; 0x432 <scan_key+0x128>
 47e:	8f e9       	ldi	r24, 0x9F	; 159
 480:	9f e0       	ldi	r25, 0x0F	; 15
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__stack+0x23>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__stack+0x29>
 488:	00 00       	nop
	            {
	                _delay_ms(1);
	                wdt_reset();
 48a:	a8 95       	wdr
 48c:	f6 cf       	rjmp	.-20     	; 0x47a <__stack+0x1b>
 48e:	08 95       	ret

00000490 <main>:
    UDR = uart_tx_buf[0];
    uart_tx_addr = 1;
}
int main()
{    
    cli();
 490:	f8 94       	cli
    hardward_init();
 492:	11 de       	rcall	.-990    	; 0xb6 <hardward_init>
    softward_init();
 494:	54 de       	rcall	.-856    	; 0x13e <softward_init>
    read_para();
 496:	ee de       	rcall	.-548    	; 0x274 <read_para>
    sei();//启动全局中断
 498:	78 94       	sei
    //
    bled = 1;
 49a:	ac 9a       	sbi	0x15, 4	; 21
    m_led_delay = 100;
 49c:	84 e6       	ldi	r24, 0x64	; 100
 49e:	80 93 7c 00 	sts	0x007C, r24
	#if USART_TEST == TRUE
	{
		DEBUG_STRING("USART TEST\r\n\0");
	}
	#endif
	uart_tx_zan();
 4a2:	d2 dd       	rcall	.-1116   	; 0x48 <uart_tx_zan>
	//
    for(;;)
    {
        wdt_reset();//喂狗
 4a4:	a8 95       	wdr
        //
        //扫描键盘
        if(1 == scan_key_enable)
 4a6:	80 91 82 00 	lds	r24, 0x0082
 4aa:	81 ff       	sbrs	r24, 1
 4ac:	06 c0       	rjmp	.+12     	; 0x4ba <main+0x2a>
        {
            scan_key_enable = 0;
 4ae:	80 91 82 00 	lds	r24, 0x0082
 4b2:	8d 7f       	andi	r24, 0xFD	; 253
 4b4:	80 93 82 00 	sts	0x0082, r24
            scan_key();
 4b8:	28 df       	rcall	.-432    	; 0x30a <scan_key>
        }
        //接收到了正确的数据后,发送应答帧
        if(1 == uart_send_enable)
 4ba:	80 91 82 00 	lds	r24, 0x0082
 4be:	85 ff       	sbrs	r24, 5
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <main+0x3c>
        {
            uart_send_enable = 0;
 4c2:	80 91 82 00 	lds	r24, 0x0082
 4c6:	8f 7d       	andi	r24, 0xDF	; 223
 4c8:	80 93 82 00 	sts	0x0082, r24
            //uart_tx();
        }
        //485通信中断的时候红灯常亮
        if(comm_error_delay > 200)//2秒
 4cc:	80 91 81 00 	lds	r24, 0x0081
 4d0:	89 3c       	cpi	r24, 0xC9	; 201
 4d2:	48 f0       	brcs	.+18     	; 0x4e6 <main+0x56>
        {
            #if USART_TEST == FALSE
			{
				if(1 == bled)
 4d4:	ac 9b       	sbis	0x15, 4	; 21
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <main+0x4c>
				{
					bled = 0;
 4d8:	ac 98       	cbi	0x15, 4	; 21
 4da:	01 c0       	rjmp	.+2      	; 0x4de <main+0x4e>
				}
				else
				{
					bled = 1;
 4dc:	ac 9a       	sbi	0x15, 4	; 21
				}
				m_led_delay = 0;
 4de:	10 92 7c 00 	sts	0x007C, r1
				comm_error_delay = 0;
 4e2:	10 92 81 00 	sts	0x0081, r1
			}
            #endif
        }
        /////////////////////////////////////////
        MCUCR |= 0x80;//休眠使能
 4e6:	85 b7       	in	r24, 0x35	; 53
 4e8:	80 68       	ori	r24, 0x80	; 128
 4ea:	85 bf       	out	0x35, r24	; 53
        asm volatile("sleep");
 4ec:	88 95       	sleep
        MCUCR &= 0x7f;//休眠禁止
 4ee:	85 b7       	in	r24, 0x35	; 53
 4f0:	8f 77       	andi	r24, 0x7F	; 127
 4f2:	85 bf       	out	0x35, r24	; 53
        /////////////////////////////////////////
    }
 4f4:	d7 cf       	rjmp	.-82     	; 0x4a4 <main+0x14>

000004f6 <pulse_value_handling>:
    UDR = uart_tx_buf[0];
    uart_tx_addr = 1;
}
/////////////////////////////////////////////////////////////////
unsigned short pulse_value_handling(unsigned short val)
{
 4f6:	0f 93       	push	r16
 4f8:	dc 01       	movw	r26, r24
	//对输入的波形做平滑处理，消除短时间的波动，可能反应稍微迟钝
	//
	unsigned short tmp;
	//
	m_pulse_value_bak.mll <<= 16;
 4fa:	e2 e6       	ldi	r30, 0x62	; 98
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	20 81       	ld	r18, Z
 500:	31 81       	ldd	r19, Z+1	; 0x01
 502:	42 81       	ldd	r20, Z+2	; 0x02
 504:	53 81       	ldd	r21, Z+3	; 0x03
 506:	64 81       	ldd	r22, Z+4	; 0x04
 508:	75 81       	ldd	r23, Z+5	; 0x05
 50a:	86 81       	ldd	r24, Z+6	; 0x06
 50c:	97 81       	ldd	r25, Z+7	; 0x07
 50e:	00 e1       	ldi	r16, 0x10	; 16
 510:	67 d2       	rcall	.+1230   	; 0x9e0 <__ashldi3>
 512:	42 83       	std	Z+2, r20	; 0x02
 514:	53 83       	std	Z+3, r21	; 0x03
 516:	64 83       	std	Z+4, r22	; 0x04
 518:	75 83       	std	Z+5, r23	; 0x05
 51a:	86 83       	std	Z+6, r24	; 0x06
 51c:	97 83       	std	Z+7, r25	; 0x07
	m_pulse_value_bak.ms[0] = val;
 51e:	b1 83       	std	Z+1, r27	; 0x01
 520:	a0 83       	st	Z, r26
	//
	tmp = (unsigned short)(m_pulse_value_bak.ms[0]/8);
 522:	cd 01       	movw	r24, r26
 524:	23 e0       	ldi	r18, 0x03	; 3
 526:	96 95       	lsr	r25
 528:	87 95       	ror	r24
 52a:	2a 95       	dec	r18
 52c:	e1 f7       	brne	.-8      	; 0x526 <pulse_value_handling+0x30>
	tmp += (unsigned short)(m_pulse_value_bak.ms[1]/2);
	tmp += (unsigned short)(m_pulse_value_bak.ms[2]/4);
 52e:	20 91 66 00 	lds	r18, 0x0066
 532:	30 91 67 00 	lds	r19, 0x0067
 536:	36 95       	lsr	r19
 538:	27 95       	ror	r18
 53a:	36 95       	lsr	r19
 53c:	27 95       	ror	r18
	//
	m_pulse_value_bak.mll <<= 16;
	m_pulse_value_bak.ms[0] = val;
	//
	tmp = (unsigned short)(m_pulse_value_bak.ms[0]/8);
	tmp += (unsigned short)(m_pulse_value_bak.ms[1]/2);
 53e:	40 91 64 00 	lds	r20, 0x0064
 542:	50 91 65 00 	lds	r21, 0x0065
 546:	56 95       	lsr	r21
 548:	47 95       	ror	r20
 54a:	24 0f       	add	r18, r20
 54c:	35 1f       	adc	r19, r21
	tmp += (unsigned short)(m_pulse_value_bak.ms[2]/4);
	tmp += (unsigned short)(m_pulse_value_bak.ms[3]/8);
 54e:	40 91 68 00 	lds	r20, 0x0068
 552:	50 91 69 00 	lds	r21, 0x0069
 556:	73 e0       	ldi	r23, 0x03	; 3
 558:	56 95       	lsr	r21
 55a:	47 95       	ror	r20
 55c:	7a 95       	dec	r23
 55e:	e1 f7       	brne	.-8      	; 0x558 <pulse_value_handling+0x62>
	m_pulse_value_bak.mll <<= 16;
	m_pulse_value_bak.ms[0] = val;
	//
	tmp = (unsigned short)(m_pulse_value_bak.ms[0]/8);
	tmp += (unsigned short)(m_pulse_value_bak.ms[1]/2);
	tmp += (unsigned short)(m_pulse_value_bak.ms[2]/4);
 560:	24 0f       	add	r18, r20
 562:	35 1f       	adc	r19, r21
	tmp += (unsigned short)(m_pulse_value_bak.ms[3]/8);
	//
	return tmp;
}
 564:	82 0f       	add	r24, r18
 566:	93 1f       	adc	r25, r19
 568:	0f 91       	pop	r16
 56a:	08 95       	ret

0000056c <__vector_9>:
/////////////////////////////////////////////////////////////////
//
//定时器0作为全局定时器,用来管理所有任务的调度
//
ISR(TIMER0_OVF_vect/*,ISR_NOBLOCK*/)//加入ISR_NOBLOCK属性,在中断服务程序中允许中断套嵌
{
 56c:	1f 92       	push	r1
 56e:	0f 92       	push	r0
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	0f 92       	push	r0
 574:	11 24       	eor	r1, r1
 576:	2f 93       	push	r18
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
	{
		TCNT0 = 255-62;//4MHz时钟,64分频,计数62次,定时约1毫秒
	}
	#elif F_CPU == F_16M
	{
		TCNT0 = 255-250;//16MHz时钟,64分频,计数62次,定时约1毫秒
 57c:	85 e0       	ldi	r24, 0x05	; 5
 57e:	82 bf       	out	0x32, r24	; 50
	#if USED_AD == TRUE
	{
		adsc = 1;
	}
	#endif
	ms1_counter++;
 580:	20 91 7a 00 	lds	r18, 0x007A
 584:	2f 5f       	subi	r18, 0xFF	; 255
 586:	20 93 7a 00 	sts	0x007A, r18
    m_ms++;
 58a:	80 91 7d 00 	lds	r24, 0x007D
 58e:	90 91 7e 00 	lds	r25, 0x007E
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	90 93 7e 00 	sts	0x007E, r25
 598:	80 93 7d 00 	sts	0x007D, r24
    //
    if(ms1_counter > 9)
 59c:	2a 30       	cpi	r18, 0x0A	; 10
 59e:	b0 f1       	brcs	.+108    	; 0x60c <__vector_9+0xa0>
    {
        ms1_counter = 0;
 5a0:	10 92 7a 00 	sts	0x007A, r1
        //10ms
        scan_key_enable = 1;//允许扫描按键
 5a4:	80 91 82 00 	lds	r24, 0x0082
 5a8:	82 60       	ori	r24, 0x02	; 2
 5aa:	80 93 82 00 	sts	0x0082, r24
        comm_error_delay++;
 5ae:	80 91 81 00 	lds	r24, 0x0081
 5b2:	8f 5f       	subi	r24, 0xFF	; 255
 5b4:	80 93 81 00 	sts	0x0081, r24
        if(comm_error_delay > 250)
 5b8:	80 91 81 00 	lds	r24, 0x0081
 5bc:	8b 3f       	cpi	r24, 0xFB	; 251
 5be:	18 f0       	brcs	.+6      	; 0x5c6 <__vector_9+0x5a>
		{
            comm_error_delay = 250;
 5c0:	8a ef       	ldi	r24, 0xFA	; 250
 5c2:	80 93 81 00 	sts	0x0081, r24
		}
        //
        m_led_delay++;
 5c6:	80 91 7c 00 	lds	r24, 0x007C
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
 5cc:	80 93 7c 00 	sts	0x007C, r24
        if(m_led_delay > 249)//最长可以延时2.5秒
 5d0:	80 91 7c 00 	lds	r24, 0x007C
 5d4:	8a 3f       	cpi	r24, 0xFA	; 250
 5d6:	18 f0       	brcs	.+6      	; 0x5de <__vector_9+0x72>
        {
            m_led_delay = 0;
 5d8:	10 92 7c 00 	sts	0x007C, r1
            bled = 0;
 5dc:	ac 98       	cbi	0x15, 4	; 21
        }
        //
        ms10_counter++;
 5de:	80 91 7b 00 	lds	r24, 0x007B
 5e2:	8f 5f       	subi	r24, 0xFF	; 255
 5e4:	80 93 7b 00 	sts	0x007B, r24
        if(ms10_counter > 9)
 5e8:	8a 30       	cpi	r24, 0x0A	; 10
 5ea:	80 f0       	brcs	.+32     	; 0x60c <__vector_9+0xa0>
        {
            ms10_counter = 0;
 5ec:	10 92 7b 00 	sts	0x007B, r1
            //100ms
			m_cgq_ack_delay++;//传感器应答延时
 5f0:	80 91 96 00 	lds	r24, 0x0096
 5f4:	8f 5f       	subi	r24, 0xFF	; 255
 5f6:	80 93 96 00 	sts	0x0096, r24
            ms100_counter++;
 5fa:	80 91 95 00 	lds	r24, 0x0095
 5fe:	8f 5f       	subi	r24, 0xFF	; 255
 600:	80 93 95 00 	sts	0x0095, r24
            if(ms100_counter > 9)
 604:	8a 30       	cpi	r24, 0x0A	; 10
 606:	10 f0       	brcs	.+4      	; 0x60c <__vector_9+0xa0>
            {
                ms100_counter = 0;
 608:	10 92 95 00 	sts	0x0095, r1
                //1s
            }
        }

    }
}
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <__vector_2>:
/////////////////////////////////////////////////////////////////
//
//外中断1,下降沿触发中断,输出正脉冲的结束边沿
//
ISR(INT1_vect)
{
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
    UCHAR4 m_temp;
    //
    m_temp.ms[0] = TCNT1;
 63e:	2c b5       	in	r18, 0x2c	; 44
 640:	3d b5       	in	r19, 0x2d	; 45
    m_pulse_value.ml += m_temp.ms[0];
 642:	80 91 6a 00 	lds	r24, 0x006A
 646:	90 91 6b 00 	lds	r25, 0x006B
 64a:	a0 91 6c 00 	lds	r26, 0x006C
 64e:	b0 91 6d 00 	lds	r27, 0x006D
 652:	82 0f       	add	r24, r18
 654:	93 1f       	adc	r25, r19
 656:	a1 1d       	adc	r26, r1
 658:	b1 1d       	adc	r27, r1
 65a:	80 93 6a 00 	sts	0x006A, r24
 65e:	90 93 6b 00 	sts	0x006B, r25
 662:	a0 93 6c 00 	sts	0x006C, r26
 666:	b0 93 6d 00 	sts	0x006D, r27
    m_pulse_counter++;
 66a:	80 91 97 00 	lds	r24, 0x0097
 66e:	90 91 98 00 	lds	r25, 0x0098
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	90 93 98 00 	sts	0x0098, r25
 678:	80 93 97 00 	sts	0x0097, r24
	//
    //软件中用的采样率是10KHz
    if(m_pulse_counter > (8*1024))//采集刷新时间约1秒       //4096=2^12  //2048=2^11  //1024=2^10  //512=2^9  //256=2^8
 67c:	80 91 97 00 	lds	r24, 0x0097
 680:	90 91 98 00 	lds	r25, 0x0098
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	90 42       	sbci	r25, 0x20	; 32
 688:	08 f4       	brcc	.+2      	; 0x68c <__vector_2+0x70>
 68a:	b0 c0       	rjmp	.+352    	; 0x7ec <__vector_2+0x1d0>
    {
        m_pulse_value.ml <<= (6-3);                        //16-12      //16-11      //16-10      //16-9     //16-8
 68c:	80 91 6a 00 	lds	r24, 0x006A
 690:	90 91 6b 00 	lds	r25, 0x006B
 694:	a0 91 6c 00 	lds	r26, 0x006C
 698:	b0 91 6d 00 	lds	r27, 0x006D
 69c:	23 e0       	ldi	r18, 0x03	; 3
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	aa 1f       	adc	r26, r26
 6a4:	bb 1f       	adc	r27, r27
 6a6:	2a 95       	dec	r18
 6a8:	d1 f7       	brne	.-12     	; 0x69e <__vector_2+0x82>
 6aa:	80 93 6a 00 	sts	0x006A, r24
 6ae:	90 93 6b 00 	sts	0x006B, r25
 6b2:	a0 93 6c 00 	sts	0x006C, r26
 6b6:	b0 93 6d 00 	sts	0x006D, r27
		m_pulse_value.ml <<= SAMPLE_SHIFT_BIT_NUM;
 6ba:	80 91 6a 00 	lds	r24, 0x006A
 6be:	90 91 6b 00 	lds	r25, 0x006B
 6c2:	a0 91 6c 00 	lds	r26, 0x006C
 6c6:	b0 91 6d 00 	lds	r27, 0x006D
 6ca:	ba 2f       	mov	r27, r26
 6cc:	a9 2f       	mov	r26, r25
 6ce:	98 2f       	mov	r25, r24
 6d0:	88 27       	eor	r24, r24
 6d2:	80 93 6a 00 	sts	0x006A, r24
 6d6:	90 93 6b 00 	sts	0x006B, r25
 6da:	a0 93 6c 00 	sts	0x006C, r26
 6de:	b0 93 6d 00 	sts	0x006D, r27
        m_mcur.ms = m_pulse_value.ms[1];//丢弃低16位,相当于除以2^16
 6e2:	80 91 6c 00 	lds	r24, 0x006C
 6e6:	90 91 6d 00 	lds	r25, 0x006D
 6ea:	90 93 94 00 	sts	0x0094, r25
 6ee:	80 93 93 00 	sts	0x0093, r24
		//
		m_mcur.ms = pulse_value_handling(m_mcur.ms);//平滑处理
 6f2:	80 91 93 00 	lds	r24, 0x0093
 6f6:	90 91 94 00 	lds	r25, 0x0094
 6fa:	fd de       	rcall	.-518    	; 0x4f6 <pulse_value_handling>
 6fc:	90 93 94 00 	sts	0x0094, r25
 700:	80 93 93 00 	sts	0x0093, r24
		//
        if(m_mcur.ms > PULSE_TOP)
 704:	80 91 93 00 	lds	r24, 0x0093
 708:	90 91 94 00 	lds	r25, 0x0094
 70c:	81 30       	cpi	r24, 0x01	; 1
 70e:	94 4c       	sbci	r25, 0xC4	; 196
 710:	30 f0       	brcs	.+12     	; 0x71e <__vector_2+0x102>
		{
            m_mcur.ms = PULSE_TOP;
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	94 ec       	ldi	r25, 0xC4	; 196
 716:	90 93 94 00 	sts	0x0094, r25
 71a:	80 93 93 00 	sts	0x0093, r24
		}
        m_pulse_counter = 0;
 71e:	10 92 98 00 	sts	0x0098, r1
 722:	10 92 97 00 	sts	0x0097, r1
        m_pulse_value.ml = 0;
 726:	10 92 6a 00 	sts	0x006A, r1
 72a:	10 92 6b 00 	sts	0x006B, r1
 72e:	10 92 6c 00 	sts	0x006C, r1
 732:	10 92 6d 00 	sts	0x006D, r1
		//OCR1A = PWM_TOP/2; //for test
		//return;
		//
        //计算pwm电压输出
        #ifndef __TEST__
        if(m_mcur.ms < m_ml_set)
 736:	20 91 93 00 	lds	r18, 0x0093
 73a:	30 91 94 00 	lds	r19, 0x0094
 73e:	80 91 87 00 	lds	r24, 0x0087
 742:	90 91 88 00 	lds	r25, 0x0088
 746:	28 17       	cp	r18, r24
 748:	39 07       	cpc	r19, r25
 74a:	18 f4       	brcc	.+6      	; 0x752 <__vector_2+0x136>
        {
            m_cur_pwm.ms = (PWM_TOP/5)-2;//150//200
 74c:	8e e4       	ldi	r24, 0x4E	; 78
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0d c0       	rjmp	.+26     	; 0x76c <__vector_2+0x150>
            OCR1A = (unsigned short)PWM_TOP-m_cur_pwm.ms;//800,1v
        }
        else if(m_mcur.ms > m_mh_set)
 752:	20 91 93 00 	lds	r18, 0x0093
 756:	30 91 94 00 	lds	r19, 0x0094
 75a:	80 91 85 00 	lds	r24, 0x0085
 75e:	90 91 86 00 	lds	r25, 0x0086
 762:	82 17       	cp	r24, r18
 764:	93 07       	cpc	r25, r19
 766:	38 f4       	brcc	.+14     	; 0x776 <__vector_2+0x15a>
        {
            m_cur_pwm.ms = PWM_TOP-1;
 768:	8f e8       	ldi	r24, 0x8F	; 143
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	90 93 84 00 	sts	0x0084, r25
 770:	80 93 83 00 	sts	0x0083, r24
 774:	31 c0       	rjmp	.+98     	; 0x7d8 <__vector_2+0x1bc>
        }
        else
        {
            //1v <= out <= 5v
            unsigned short m_offset;
            m_offset = m_mcur.ms-m_ml_set;//当前测得的值减去低位设置值
 776:	20 91 93 00 	lds	r18, 0x0093
 77a:	30 91 94 00 	lds	r19, 0x0094
 77e:	80 91 87 00 	lds	r24, 0x0087
 782:	90 91 88 00 	lds	r25, 0x0088
 786:	28 1b       	sub	r18, r24
 788:	39 0b       	sbc	r19, r25
            m_temp.ml = m_offset;
            m_temp.ml *= (unsigned short)((PWM_TOP/5)*4);//等距的平分1v到5v
            m_offset = m_mh_set-m_ml_set;//高位设置值减去低位设置值
 78a:	40 91 85 00 	lds	r20, 0x0085
 78e:	50 91 86 00 	lds	r21, 0x0086
 792:	80 91 87 00 	lds	r24, 0x0087
 796:	90 91 88 00 	lds	r25, 0x0088
 79a:	48 1b       	sub	r20, r24
 79c:	59 0b       	sbc	r21, r25
            m_temp.ml += m_offset>>1;//四舍五入
 79e:	fa 01       	movw	r30, r20
 7a0:	f6 95       	lsr	r31
 7a2:	e7 95       	ror	r30
        {
            //1v <= out <= 5v
            unsigned short m_offset;
            m_offset = m_mcur.ms-m_ml_set;//当前测得的值减去低位设置值
            m_temp.ml = m_offset;
            m_temp.ml *= (unsigned short)((PWM_TOP/5)*4);//等距的平分1v到5v
 7a4:	a0 e4       	ldi	r26, 0x40	; 64
 7a6:	b1 e0       	ldi	r27, 0x01	; 1
 7a8:	0f d1       	rcall	.+542    	; 0x9c8 <__umulhisi3>
            m_offset = m_mh_set-m_ml_set;//高位设置值减去低位设置值
            m_temp.ml += m_offset>>1;//四舍五入
 7aa:	6e 0f       	add	r22, r30
 7ac:	7f 1f       	adc	r23, r31
 7ae:	81 1d       	adc	r24, r1
 7b0:	91 1d       	adc	r25, r1
            m_temp.ml /= m_offset;
 7b2:	9a 01       	movw	r18, r20
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	e5 d0       	rcall	.+458    	; 0x984 <__udivmodsi4>
            m_temp.ms[0] += (PWM_TOP/5);//加入最低的1v
 7ba:	c9 01       	movw	r24, r18
 7bc:	80 5b       	subi	r24, 0xB0	; 176
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
            //
            if(m_temp.ms[0] > PWM_TOP)
 7c0:	81 39       	cpi	r24, 0x91	; 145
 7c2:	61 e0       	ldi	r22, 0x01	; 1
 7c4:	96 07       	cpc	r25, r22
 7c6:	10 f4       	brcc	.+4      	; 0x7cc <__vector_2+0x1b0>
            m_temp.ml = m_offset;
            m_temp.ml *= (unsigned short)((PWM_TOP/5)*4);//等距的平分1v到5v
            m_offset = m_mh_set-m_ml_set;//高位设置值减去低位设置值
            m_temp.ml += m_offset>>1;//四舍五入
            m_temp.ml /= m_offset;
            m_temp.ms[0] += (PWM_TOP/5);//加入最低的1v
 7c8:	9c 01       	movw	r18, r24
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <__vector_2+0x1b4>
            //
            if(m_temp.ms[0] > PWM_TOP)
			{
                m_temp.ms[0] = PWM_TOP-1;
 7cc:	2f e8       	ldi	r18, 0x8F	; 143
 7ce:	31 e0       	ldi	r19, 0x01	; 1
			}
            m_cur_pwm.ms=m_temp.ms[0];
 7d0:	30 93 84 00 	sts	0x0084, r19
 7d4:	20 93 83 00 	sts	0x0083, r18
            OCR1A=(unsigned short)PWM_TOP-m_cur_pwm.ms;
 7d8:	20 91 83 00 	lds	r18, 0x0083
 7dc:	30 91 84 00 	lds	r19, 0x0084
 7e0:	80 e9       	ldi	r24, 0x90	; 144
 7e2:	91 e0       	ldi	r25, 0x01	; 1
 7e4:	82 1b       	sub	r24, r18
 7e6:	93 0b       	sbc	r25, r19
 7e8:	9b bd       	out	0x2b, r25	; 43
 7ea:	8a bd       	out	0x2a, r24	; 42
		{
			uart_send_enable=1;//串口发送使能 
		}
        #endif   
    }
}
 7ec:	ff 91       	pop	r31
 7ee:	ef 91       	pop	r30
 7f0:	bf 91       	pop	r27
 7f2:	af 91       	pop	r26
 7f4:	9f 91       	pop	r25
 7f6:	8f 91       	pop	r24
 7f8:	7f 91       	pop	r23
 7fa:	6f 91       	pop	r22
 7fc:	5f 91       	pop	r21
 7fe:	4f 91       	pop	r20
 800:	3f 91       	pop	r19
 802:	2f 91       	pop	r18
 804:	0f 90       	pop	r0
 806:	0f be       	out	0x3f, r0	; 63
 808:	0f 90       	pop	r0
 80a:	1f 90       	pop	r1
 80c:	18 95       	reti

0000080e <__vector_13>:
//
//串口发送中断
//
#if USART_TEST == FALSE
ISR(USART_TXC_vect)
{
 80e:	1f 92       	push	r1
 810:	0f 92       	push	r0
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	0f 92       	push	r0
 816:	11 24       	eor	r1, r1
 818:	8f 93       	push	r24
 81a:	9f 93       	push	r25
 81c:	ef 93       	push	r30
 81e:	ff 93       	push	r31
    if(uart_tx_addr < 10)
 820:	80 91 79 00 	lds	r24, 0x0079
 824:	8a 30       	cpi	r24, 0x0A	; 10
 826:	60 f4       	brcc	.+24     	; 0x840 <__vector_13+0x32>
    {
        UDR = uart_tx_buf[uart_tx_addr++];
 828:	e0 91 79 00 	lds	r30, 0x0079
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	8e 0f       	add	r24, r30
 830:	80 93 79 00 	sts	0x0079, r24
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	e2 59       	subi	r30, 0x92	; 146
 838:	ff 4f       	sbci	r31, 0xFF	; 255
 83a:	80 81       	ld	r24, Z
 83c:	8c b9       	out	0x0c, r24	; 12
 83e:	07 c0       	rjmp	.+14     	; 0x84e <__vector_13+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 840:	8f e8       	ldi	r24, 0x8F	; 143
 842:	91 e0       	ldi	r25, 0x01	; 1
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <__vector_13+0x36>
 848:	00 c0       	rjmp	.+0      	; 0x84a <__vector_13+0x3c>
 84a:	00 00       	nop
    }
    else
    {
        _delay_us(100);
        b485en = 0;
 84c:	97 98       	cbi	0x12, 7	; 18
    }
}
 84e:	ff 91       	pop	r31
 850:	ef 91       	pop	r30
 852:	9f 91       	pop	r25
 854:	8f 91       	pop	r24
 856:	0f 90       	pop	r0
 858:	0f be       	out	0x3f, r0	; 63
 85a:	0f 90       	pop	r0
 85c:	1f 90       	pop	r1
 85e:	18 95       	reti

00000860 <__vector_11>:
/////////////////////////////////////////////////////////////////
//
//串口接收中断
//
ISR(USART_RXC_vect)
{
 860:	1f 92       	push	r1
 862:	0f 92       	push	r0
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	0f 92       	push	r0
 868:	11 24       	eor	r1, r1
 86a:	8f 93       	push	r24
 86c:	9f 93       	push	r25
 86e:	ef 93       	push	r30
 870:	ff 93       	push	r31
	unsigned char uart_value,sum,i;
    //
	if((UCSRA&0x1c) != 0)
 872:	8b b1       	in	r24, 0x0b	; 11
 874:	8c 71       	andi	r24, 0x1C	; 28
 876:	59 f0       	breq	.+22     	; 0x88e <__vector_11+0x2e>
	{
		//串口接收出现错误
		uart_rx_counter = 0;
 878:	10 92 78 00 	sts	0x0078, r1
        uart_frame_head_ok = 0;
 87c:	80 91 82 00 	lds	r24, 0x0082
 880:	8e 7f       	andi	r24, 0xFE	; 254
 882:	80 93 82 00 	sts	0x0082, r24
		while ( UCSRA & (1<<RXC) ) uart_value = UDR;
 886:	5f 9b       	sbis	0x0b, 7	; 11
 888:	60 c0       	rjmp	.+192    	; 0x94a <__vector_11+0xea>
 88a:	8c b1       	in	r24, 0x0c	; 12
 88c:	fc cf       	rjmp	.-8      	; 0x886 <__vector_11+0x26>
	}
	else
	{
		//串口接收正常
		uart_value = UDR;
 88e:	8c b1       	in	r24, 0x0c	; 12
        //
        if(1 == uart_frame_head_ok)
 890:	90 91 82 00 	lds	r25, 0x0082
 894:	90 ff       	sbrs	r25, 0
 896:	4e c0       	rjmp	.+156    	; 0x934 <__vector_11+0xd4>
        {
            uart_rx_buf[uart_rx_counter++] = uart_value;
 898:	e0 91 78 00 	lds	r30, 0x0078
 89c:	91 e0       	ldi	r25, 0x01	; 1
 89e:	9e 0f       	add	r25, r30
 8a0:	90 93 78 00 	sts	0x0078, r25
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	e7 57       	subi	r30, 0x77	; 119
 8a8:	ff 4f       	sbci	r31, 0xFF	; 255
 8aa:	80 83       	st	Z, r24
            if(uart_rx_counter > 8)//接收6个字节有效参数和一个字节校验和
 8ac:	99 30       	cpi	r25, 0x09	; 9
 8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__vector_11+0x52>
 8b0:	4c c0       	rjmp	.+152    	; 0x94a <__vector_11+0xea>
            {
                uart_rx_counter = 0;
 8b2:	10 92 78 00 	sts	0x0078, r1
                uart_frame_head_ok = 0;
 8b6:	80 91 82 00 	lds	r24, 0x0082
 8ba:	8e 7f       	andi	r24, 0xFE	; 254
 8bc:	80 93 82 00 	sts	0x0082, r24
 8c0:	e9 e8       	ldi	r30, 0x89	; 137
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
                //
                sum = 0xaa;
 8c4:	8a ea       	ldi	r24, 0xAA	; 170
                for(i=0; i<8; i++)
				{
                    sum += uart_rx_buf[i];
 8c6:	91 91       	ld	r25, Z+
 8c8:	89 0f       	add	r24, r25
            {
                uart_rx_counter = 0;
                uart_frame_head_ok = 0;
                //
                sum = 0xaa;
                for(i=0; i<8; i++)
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	e1 39       	cpi	r30, 0x91	; 145
 8ce:	f9 07       	cpc	r31, r25
 8d0:	d1 f7       	brne	.-12     	; 0x8c6 <__vector_11+0x66>
				{
                    sum += uart_rx_buf[i];
				}
                if(sum == uart_rx_buf[8])
 8d2:	90 91 91 00 	lds	r25, 0x0091
 8d6:	89 13       	cpse	r24, r25
 8d8:	38 c0       	rjmp	.+112    	; 0x94a <__vector_11+0xea>
                {
                    if(ADDR_CGQ == uart_rx_buf[0])
 8da:	80 91 89 00 	lds	r24, 0x0089
 8de:	83 30       	cpi	r24, 0x03	; 3
 8e0:	31 f5       	brne	.+76     	; 0x92e <__vector_11+0xce>
                    {
                        comm_error_delay = 0;
 8e2:	10 92 81 00 	sts	0x0081, r1
                        //
                        command_gaoliaowei = 0;
 8e6:	80 91 82 00 	lds	r24, 0x0082
 8ea:	87 7f       	andi	r24, 0xF7	; 247
 8ec:	80 93 82 00 	sts	0x0082, r24
                        command_diliaowei = 0;
 8f0:	80 91 82 00 	lds	r24, 0x0082
 8f4:	8f 7e       	andi	r24, 0xEF	; 239
 8f6:	80 93 82 00 	sts	0x0082, r24
                        if(GAOLIAOWEI == uart_rx_buf[1])
 8fa:	80 91 8a 00 	lds	r24, 0x008A
 8fe:	84 33       	cpi	r24, 0x34	; 52
 900:	21 f4       	brne	.+8      	; 0x90a <__vector_11+0xaa>
						{
                            command_gaoliaowei = 1;
 902:	90 91 82 00 	lds	r25, 0x0082
 906:	98 60       	ori	r25, 0x08	; 8
 908:	05 c0       	rjmp	.+10     	; 0x914 <__vector_11+0xb4>
							uart_tx_buf[2] = GAOLIAOWEI;
							send_time_count = 0;
						}
                        else if(DILIAOWEI == uart_rx_buf[1])
 90a:	85 33       	cpi	r24, 0x35	; 53
 90c:	59 f4       	brne	.+22     	; 0x924 <__vector_11+0xc4>
						{
                            command_diliaowei = 1;
 90e:	90 91 82 00 	lds	r25, 0x0082
 912:	90 61       	ori	r25, 0x10	; 16
 914:	90 93 82 00 	sts	0x0082, r25
							uart_tx_buf[2] = DILIAOWEI;
 918:	80 93 70 00 	sts	0x0070, r24
							send_time_count = 0;
 91c:	10 92 61 00 	sts	0x0061, r1
 920:	10 92 60 00 	sts	0x0060, r1
						}
                        //
                        uart_send_enable = 1;//串口发送使能
 924:	80 91 82 00 	lds	r24, 0x0082
 928:	80 62       	ori	r24, 0x20	; 32
 92a:	80 93 82 00 	sts	0x0082, r24
                    }
					comm_error_delay = 0;
 92e:	10 92 81 00 	sts	0x0081, r1
 932:	0b c0       	rjmp	.+22     	; 0x94a <__vector_11+0xea>
                }
            }
        }
        else
        {
            if(0xaa == uart_value)
 934:	8a 3a       	cpi	r24, 0xAA	; 170
 936:	49 f4       	brne	.+18     	; 0x94a <__vector_11+0xea>
            {
				comm_error_delay = 0;
 938:	10 92 81 00 	sts	0x0081, r1

				uart_rx_counter = 0;
 93c:	10 92 78 00 	sts	0x0078, r1
                uart_frame_head_ok = 1;
 940:	80 91 82 00 	lds	r24, 0x0082
 944:	81 60       	ori	r24, 0x01	; 1
 946:	80 93 82 00 	sts	0x0082, r24
            }
        }
	}
}
 94a:	ff 91       	pop	r31
 94c:	ef 91       	pop	r30
 94e:	9f 91       	pop	r25
 950:	8f 91       	pop	r24
 952:	0f 90       	pop	r0
 954:	0f be       	out	0x3f, r0	; 63
 956:	0f 90       	pop	r0
 958:	1f 90       	pop	r1
 95a:	18 95       	reti

0000095c <__udivmodhi4>:
 95c:	aa 1b       	sub	r26, r26
 95e:	bb 1b       	sub	r27, r27
 960:	51 e1       	ldi	r21, 0x11	; 17
 962:	07 c0       	rjmp	.+14     	; 0x972 <__udivmodhi4_ep>

00000964 <__udivmodhi4_loop>:
 964:	aa 1f       	adc	r26, r26
 966:	bb 1f       	adc	r27, r27
 968:	a6 17       	cp	r26, r22
 96a:	b7 07       	cpc	r27, r23
 96c:	10 f0       	brcs	.+4      	; 0x972 <__udivmodhi4_ep>
 96e:	a6 1b       	sub	r26, r22
 970:	b7 0b       	sbc	r27, r23

00000972 <__udivmodhi4_ep>:
 972:	88 1f       	adc	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	5a 95       	dec	r21
 978:	a9 f7       	brne	.-22     	; 0x964 <__udivmodhi4_loop>
 97a:	80 95       	com	r24
 97c:	90 95       	com	r25
 97e:	bc 01       	movw	r22, r24
 980:	cd 01       	movw	r24, r26
 982:	08 95       	ret

00000984 <__udivmodsi4>:
 984:	a1 e2       	ldi	r26, 0x21	; 33
 986:	1a 2e       	mov	r1, r26
 988:	aa 1b       	sub	r26, r26
 98a:	bb 1b       	sub	r27, r27
 98c:	fd 01       	movw	r30, r26
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <__udivmodsi4_ep>

00000990 <__udivmodsi4_loop>:
 990:	aa 1f       	adc	r26, r26
 992:	bb 1f       	adc	r27, r27
 994:	ee 1f       	adc	r30, r30
 996:	ff 1f       	adc	r31, r31
 998:	a2 17       	cp	r26, r18
 99a:	b3 07       	cpc	r27, r19
 99c:	e4 07       	cpc	r30, r20
 99e:	f5 07       	cpc	r31, r21
 9a0:	20 f0       	brcs	.+8      	; 0x9aa <__udivmodsi4_ep>
 9a2:	a2 1b       	sub	r26, r18
 9a4:	b3 0b       	sbc	r27, r19
 9a6:	e4 0b       	sbc	r30, r20
 9a8:	f5 0b       	sbc	r31, r21

000009aa <__udivmodsi4_ep>:
 9aa:	66 1f       	adc	r22, r22
 9ac:	77 1f       	adc	r23, r23
 9ae:	88 1f       	adc	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	1a 94       	dec	r1
 9b4:	69 f7       	brne	.-38     	; 0x990 <__udivmodsi4_loop>
 9b6:	60 95       	com	r22
 9b8:	70 95       	com	r23
 9ba:	80 95       	com	r24
 9bc:	90 95       	com	r25
 9be:	9b 01       	movw	r18, r22
 9c0:	ac 01       	movw	r20, r24
 9c2:	bd 01       	movw	r22, r26
 9c4:	cf 01       	movw	r24, r30
 9c6:	08 95       	ret

000009c8 <__umulhisi3>:
 9c8:	a2 9f       	mul	r26, r18
 9ca:	b0 01       	movw	r22, r0
 9cc:	b3 9f       	mul	r27, r19
 9ce:	c0 01       	movw	r24, r0
 9d0:	a3 9f       	mul	r26, r19
 9d2:	01 d0       	rcall	.+2      	; 0x9d6 <__umulhisi3+0xe>
 9d4:	b2 9f       	mul	r27, r18
 9d6:	70 0d       	add	r23, r0
 9d8:	81 1d       	adc	r24, r1
 9da:	11 24       	eor	r1, r1
 9dc:	91 1d       	adc	r25, r1
 9de:	08 95       	ret

000009e0 <__ashldi3>:
 9e0:	0f 93       	push	r16
 9e2:	08 30       	cpi	r16, 0x08	; 8
 9e4:	90 f0       	brcs	.+36     	; 0xa0a <__ashldi3+0x2a>
 9e6:	98 2f       	mov	r25, r24
 9e8:	87 2f       	mov	r24, r23
 9ea:	76 2f       	mov	r23, r22
 9ec:	65 2f       	mov	r22, r21
 9ee:	54 2f       	mov	r21, r20
 9f0:	43 2f       	mov	r20, r19
 9f2:	32 2f       	mov	r19, r18
 9f4:	22 27       	eor	r18, r18
 9f6:	08 50       	subi	r16, 0x08	; 8
 9f8:	f4 cf       	rjmp	.-24     	; 0x9e2 <__ashldi3+0x2>
 9fa:	22 0f       	add	r18, r18
 9fc:	33 1f       	adc	r19, r19
 9fe:	44 1f       	adc	r20, r20
 a00:	55 1f       	adc	r21, r21
 a02:	66 1f       	adc	r22, r22
 a04:	77 1f       	adc	r23, r23
 a06:	88 1f       	adc	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	0a 95       	dec	r16
 a0c:	b2 f7       	brpl	.-20     	; 0x9fa <__ashldi3+0x1a>
 a0e:	0f 91       	pop	r16
 a10:	08 95       	ret

00000a12 <__eerd_word_m8>:
 a12:	a8 e1       	ldi	r26, 0x18	; 24
 a14:	b0 e0       	ldi	r27, 0x00	; 0
 a16:	42 e0       	ldi	r20, 0x02	; 2
 a18:	50 e0       	ldi	r21, 0x00	; 0
 a1a:	05 c0       	rjmp	.+10     	; 0xa26 <__eerd_blraw_m8>

00000a1c <__eewr_word_m8>:
 a1c:	12 d0       	rcall	.+36     	; 0xa42 <__eewr_byte_m8>
 a1e:	27 2f       	mov	r18, r23
 a20:	11 c0       	rjmp	.+34     	; 0xa44 <__eewr_r18_m8>

00000a22 <__eerd_block_m8>:
 a22:	dc 01       	movw	r26, r24
 a24:	cb 01       	movw	r24, r22

00000a26 <__eerd_blraw_m8>:
 a26:	fc 01       	movw	r30, r24
 a28:	e1 99       	sbic	0x1c, 1	; 28
 a2a:	fe cf       	rjmp	.-4      	; 0xa28 <__eerd_blraw_m8+0x2>
 a2c:	06 c0       	rjmp	.+12     	; 0xa3a <__eerd_blraw_m8+0x14>
 a2e:	ff bb       	out	0x1f, r31	; 31
 a30:	ee bb       	out	0x1e, r30	; 30
 a32:	e0 9a       	sbi	0x1c, 0	; 28
 a34:	31 96       	adiw	r30, 0x01	; 1
 a36:	0d b2       	in	r0, 0x1d	; 29
 a38:	0d 92       	st	X+, r0
 a3a:	41 50       	subi	r20, 0x01	; 1
 a3c:	50 40       	sbci	r21, 0x00	; 0
 a3e:	b8 f7       	brcc	.-18     	; 0xa2e <__eerd_blraw_m8+0x8>
 a40:	08 95       	ret

00000a42 <__eewr_byte_m8>:
 a42:	26 2f       	mov	r18, r22

00000a44 <__eewr_r18_m8>:
 a44:	e1 99       	sbic	0x1c, 1	; 28
 a46:	fe cf       	rjmp	.-4      	; 0xa44 <__eewr_r18_m8>
 a48:	9f bb       	out	0x1f, r25	; 31
 a4a:	8e bb       	out	0x1e, r24	; 30
 a4c:	2d bb       	out	0x1d, r18	; 29
 a4e:	0f b6       	in	r0, 0x3f	; 63
 a50:	f8 94       	cli
 a52:	e2 9a       	sbi	0x1c, 2	; 28
 a54:	e1 9a       	sbi	0x1c, 1	; 28
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	01 96       	adiw	r24, 0x01	; 1
 a5a:	08 95       	ret

00000a5c <_exit>:
 a5c:	f8 94       	cli

00000a5e <__stop_program>:
 a5e:	ff cf       	rjmp	.-2      	; 0xa5e <__stop_program>
