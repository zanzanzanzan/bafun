Interrupt Vectors
    00000 940C 003C JMP	__text_start|__start
    00012 940C 01AF JMP	_timer0_ovf_isr
    00016 940C 01D2 JMP	_uart0_rx_isr

Program Code (text area)
__text_start|__start:
    0003C EFCF      LDI	R28,0xFF
    0003D E1D0      LDI	R29,0x10
    0003E BFCD      OUT	0x3D,R28
    0003F BFDE      OUT	0x3E,R29
    00040 51CE      SUBI	R28,0x1E
    00041 40D0      SBCI	R29,0
    00042 EA0A      LDI	R16,0xAA
    00043 8308      ST	Y,R16
    00044 2400      CLR	R0
    00045 E0E8      LDI	R30,0x8
    00046 E0F1      LDI	R31,1
    00047 E011      LDI	R17,1
    00048 30ED      CPI	R30,0xD
    00049 07F1      CPC	R31,R17
    0004A F011      BEQ	0x004D
    0004B 9201      ST	Z+,R0
    0004C CFFB      RJMP	0x0048
    0004D 8300      ST	Z,R16
    0004E E7E0      LDI	R30,0x70
    0004F E0F0      LDI	R31,0
    00050 E0A0      LDI	R26,0
    00051 E0B1      LDI	R27,1
    00052 E010      LDI	R17,0
    00053 E000      LDI	R16,0
    00054 BF0B      OUT	0x3B,R16
    00055 37E8      CPI	R30,0x78
    00056 07F1      CPC	R31,R17
    00057 F021      BEQ	0x005C
    00058 95C8      LPM
    00059 9631      ADIW	R30,1
    0005A 920D      ST	X+,R0
    0005B CFF9      RJMP	0x0055
    0005C 940E 0077 CALL	_main
_exit:
    0005E CFFF      RJMP	_exit
FILE: E:\WORK\北京康杰斯\16程序\步进电机\mian.c
(0001) //ICC-AVR application builder : 2016/5/14 10:46:21
(0002) // Target : M16
(0003) // Crystal: 4.0000Mhz
(0004) 
(0005) #include <iom16v.h>
(0006) #include <macros.h>
(0007) 
(0008) #include <delay.h>
(0009) #include <time.h>
(0010) #include <uart.h>
(0011) //delayms
(0012) //PA2 CLK
(0013) //PA3 SDA
(0014) 
(0015) 
(0016) #define  uint  unsigned int 
(0017) #define  uchar unsigned char 
(0018) #define  Nack_counter  10 
(0019) 
(0020) 
(0021) //************ 数据定义**************** 
(0022) unsigned char bit_out; 
(0023) unsigned char bit_in; 
(0024) 
(0025) 
(0026) 
(0027) 
(0028) //
(0029) 
(0030) #define SCKOUT DDRA|= 0X4; 
(0031) #define SCL1 PORTA |= 0X4;
(0032) #define SCL0 PORTA &= ~0X4;
(0033) 
(0034) 
(0035) #define SDAOUT DDRA|= 0X8;
(0036) #define SDA1 PORTA |= 0X8;
(0037) #define SDA0 PORTA &= ~0X8;
(0038) 
(0039) #define PIN  DDRA &= ~0X8;
(0040) #define READ  PINA&0X8
(0041) 
(0042) 
(0043) 
(0044) 
(0045) 
(0046) 
(0047) 
(0048) //************ 函数声明***************************************** 
(0049) void   start_bit(void);                 //MLX90614 发起始位子程序 
(0050) void   stop_bit(void);                 //MLX90614发结束位子程序 
(0051) uchar  rx_byte(void);              //MLX90614 接收字节子程序 
(0052) void   send_bit(void);             //MLX90614发送位子程序 
(0053) void   tx_byte(uchar dat_byte);     //MLX90614 接收字节子程序 
(0054) void   receive_bit(void);           //MLX90614接收位子程序 
(0055) uint   memread(unsigned char addr, unsigned char cmd);             // 读温度数据 
(0056) 
(0057) uchar DataH,DataL,Pecreg; 
(0058) 
(0059) void port_init(void)
(0060) {
(0061)  PORTA = 0x00;
_port_init:
    0005F 2422      CLR	R2
    00060 BA2B      OUT	0x1B,R2
(0062)  DDRA  = 0x00;
    00061 BA2A      OUT	0x1A,R2
(0063)  PORTB = 0x00;
    00062 BA28      OUT	0x18,R2
(0064)  DDRB  = 0x00;
    00063 BA27      OUT	0x17,R2
(0065)  
(0066)  PORTC = 0x03; //m103 output only
    00064 E083      LDI	R24,3
    00065 BB85      OUT	0x15,R24
(0067)  DDRC  = 0x00;
    00066 BA24      OUT	0x14,R2
(0068)  PORTD = 0x00;
    00067 BA22      OUT	0x12,R2
(0069)  DDRD  = 0x00;
    00068 BA21      OUT	0x11,R2
    00069 9508      RET
(0070) }
(0071) 
(0072) 
(0073) 
(0074) unsigned int P_bao=100;
(0075) unsigned int Bao_sum=0;
(0076) unsigned int Bao_time=0;
(0077) //call this routine to initialize all peripherals
(0078) void init_devices(void)
(0079) {
(0080)  //stop errant interrupts until set up
(0081)  CLI(); //disable all interrupts
_init_devices:
    0006A 94F8      BCLR	7
(0082)  port_init();
    0006B DFF3      RCALL	_port_init
(0083)  timer0_init();
    0006C 940E 01A6 CALL	_timer0_init
(0084)  uart0_init();
    0006E 940E 01C3 CALL	_uart0_init
(0085) 
(0086)  MCUCR = 0x00;
    00070 2422      CLR	R2
    00071 BE25      OUT	0x35,R2
(0087)  GICR  = 0x00;
    00072 BE2B      OUT	0x3B,R2
(0088)  TIMSK = 0x01; //timer interrupt sources
    00073 E081      LDI	R24,1
    00074 BF89      OUT	0x39,R24
(0089)  SEI(); //re-enable interrupts
    00075 9478      BSET	7
    00076 9508      RET
(0090)  //all peripherals are now initialized
(0091) }
(0092) unsigned int count=0;
(0093) void main(void)
(0094) {
(0095)  uint Tem; 
(0096)  unsigned char addr;
(0097)  init_devices();
_main:
  addr                 --> Y,+1
  Tem                  --> R20
    00077 DFF2      RCALL	_init_devices
(0098)  
(0099) SDAOUT;
    00078 9AD3      SBI	0x1A,3
(0100) SCKOUT; 
    00079 9AD2      SBI	0x1A,2
(0101)  //进入总线模式
(0102)  SCL1;SDA1;
    0007A 9ADA      SBI	0x1B,2
    0007B 9ADB      SBI	0x1B,3
(0103)  delayms(2);
    0007C E002      LDI	R16,2
    0007D E010      LDI	R17,0
    0007E 940E 02D8 CALL	_delayms
(0104)  SCL0;
    00080 98DA      CBI	0x1B,2
(0105)  delayms(5000);
    00081 E808      LDI	R16,0x88
    00082 E113      LDI	R17,0x13
    00083 940E 02D8 CALL	_delayms
(0106)  SCL1;
    00085 9ADA      SBI	0x1B,2
    00086 C033      RJMP	0x00BA
(0107) 
(0108)  
(0109)  
(0110)  //进入测试模式
(0111)  /*
(0112)  SCL0;SDA1;
(0113)  delayms(10);
(0114)  SCL1;
(0115)  delayms(10);
(0116)  SDA0;
(0117)  delayms(30000);
(0118)  SDA1;
(0119) */
(0120)  
(0121) 
(0122) while(0)
(0123) {
(0124) 
(0125) 
(0126) PIN;
    00087 98D3      CBI	0x1A,3
(0127) if (READ)
    00088 9BCB      SBIS	0x19,3
    00089 C006      RJMP	0x0090
(0128) {
(0129)  SCL1;
    0008A 9ADA      SBI	0x1B,2
(0130) 
(0131)  delayms(100);
    0008B E604      LDI	R16,0x64
    0008C E010      LDI	R17,0
    0008D 940E 02D8 CALL	_delayms
(0132)  }
    0008F C02A      RJMP	0x00BA
(0133)  else
(0134)  {
(0135) 
(0136)   SCL0;
    00090 98DA      CBI	0x1B,2
(0137) 
(0138)    delayms(200);
    00091 EC08      LDI	R16,0xC8
    00092 E010      LDI	R17,0
    00093 940E 02D8 CALL	_delayms
    00095 C024      RJMP	0x00BA
(0139) }
(0140) 
(0141) }
(0142)  
(0143)  while(1)
(0144)  {
(0145) 
(0146) 
(0147)  	    
(0148)  if((count>=20))
    00096 9180 0106 LDS	R24,count
    00098 9190 0107 LDS	R25,count+1
    0009A 3184      CPI	R24,0x14
    0009B E0E0      LDI	R30,0
    0009C 079E      CPC	R25,R30
    0009D F0E0      BCS	0x00BA
(0149)   {
(0150)    count=0;
    0009E 2422      CLR	R2
    0009F 2433      CLR	R3
    000A0 9230 0107 STS	count+1,R3
    000A2 9220 0106 STS	count,R2
(0151)    //USART_send(0x55)*0.02-273.15;        
(0152)    
(0153)    Tem = memread(0,0x2e);
    000A4 E22E      LDI	R18,0x2E
    000A5 2700      CLR	R16
    000A6 D0CB      RCALL	_memread
(0154)    Tem = memread(Tem&0xff,0x07);
    000A7 E027      LDI	R18,7
    000A8 7010      ANDI	R17,0
    000A9 D0C8      RCALL	_memread
(0155)    
(0156)    Tem = Tem / 50 - 273;
    000AA E322      LDI	R18,0x32
    000AB E030      LDI	R19,0
    000AC 940E 02EB CALL	div16u
    000AE 01A8      MOVW	R20,R16
    000AF 5141      SUBI	R20,0x11
    000B0 4051      SBCI	R21,1
(0157)    	USART_send(Tem>>8);
    000B1 018A      MOVW	R16,R20
    000B2 2F01      MOV	R16,R17
    000B3 2711      CLR	R17
    000B4 940E 01CE CALL	_USART_send
(0158) 	USART_send(Tem&0xff);
    000B6 018A      MOVW	R16,R20
    000B7 7010      ANDI	R17,0
    000B8 940E 01CE CALL	_USART_send
    000BA CFDB      RJMP	0x0096
    000BB 9508      RET
_display:
  b                    --> R12
  a                    --> R10
  T                    --> R20
  Tem                  --> R10
    000BC 940E 0315 CALL	push_xgset303C
    000BE 0158      MOVW	R10,R16
(0159) 
(0160)     
(0161)   }
(0162)  
(0163) 
(0164) }
(0165) }
(0166) 
(0167) 
(0168) 
(0169) 
(0170) 
(0171) //*********输入转换并显示********* 
(0172) void display(uint Tem) 
(0173) { 
(0174)  uint T,a,b; 
(0175)  T=Tem*2; 
    000BF 01A5      MOVW	R20,R10
    000C0 0F44      LSL	R20
    000C1 1F55      ROL	R21
(0176)  if(T>=27315) 
    000C2 3B43      CPI	R20,0xB3
    000C3 E6EA      LDI	R30,0x6A
    000C4 075E      CPC	R21,R30
    000C5 F088      BCS	0x00D7
(0177)  { 
(0178)    T=T-27315; 
    000C6 5B43      SUBI	R20,0xB3
    000C7 465A      SBCI	R21,0x6A
(0179)    a=T/100; 
    000C8 E624      LDI	R18,0x64
    000C9 E030      LDI	R19,0
    000CA 018A      MOVW	R16,R20
    000CB 940E 02EB CALL	div16u
    000CD 0158      MOVW	R10,R16
(0180)    b=T-a*100; 
    000CE E604      LDI	R16,0x64
    000CF E010      LDI	R17,0
    000D0 0195      MOVW	R18,R10
    000D1 940E 0305 CALL	empy16s
    000D3 016A      MOVW	R12,R20
    000D4 1AC0      SUB	R12,R16
    000D5 0AD1      SBC	R13,R17
(0181)  } 
    000D6 C013      RJMP	0x00EA
(0182)  else 
(0183)  { 
(0184)   T=27315-T; 
    000D7 EB83      LDI	R24,0xB3
    000D8 E69A      LDI	R25,0x6A
    000D9 1B84      SUB	R24,R20
    000DA 0B95      SBC	R25,R21
    000DB 01AC      MOVW	R20,R24
(0185)     a=T/100; 
    000DC E624      LDI	R18,0x64
    000DD E030      LDI	R19,0
    000DE 018C      MOVW	R16,R24
    000DF 940E 02EB CALL	div16u
    000E1 0158      MOVW	R10,R16
(0186)     b=T-a*100; 
    000E2 E604      LDI	R16,0x64
    000E3 E010      LDI	R17,0
    000E4 0195      MOVW	R18,R10
    000E5 940E 0305 CALL	empy16s
    000E7 016A      MOVW	R12,R20
    000E8 1AC0      SUB	R12,R16
    000E9 0AD1      SBC	R13,R17
(0187)  } 
    000EA 940C 031C JMP	pop_xgset303C
(0188) } 
(0189) 
(0190) //************************************ 
(0191) void   start_bit(void) 
(0192) { 
(0193)    SDAOUT;
_start_bit:
    000EC 9AD3      SBI	0x1A,3
(0194)    SDA1; 
    000ED 9ADB      SBI	0x1B,3
(0195)    delayms(3);
    000EE E003      LDI	R16,3
    000EF E010      LDI	R17,0
    000F0 940E 02D8 CALL	_delayms
(0196)    SCL1; 
    000F2 9ADA      SBI	0x1B,2
(0197)    delayms(3);
    000F3 E003      LDI	R16,3
    000F4 E010      LDI	R17,0
    000F5 940E 02D8 CALL	_delayms
(0198)    SDA0; 
    000F7 98DB      CBI	0x1B,3
(0199)    delayms(3);
    000F8 E003      LDI	R16,3
    000F9 E010      LDI	R17,0
    000FA 940E 02D8 CALL	_delayms
(0200)    SCL0; 
    000FC 98DA      CBI	0x1B,2
(0201)    delayms(3);
    000FD E003      LDI	R16,3
    000FE E010      LDI	R17,0
    000FF 940C 02D8 JMP	_delayms
(0202)  
(0203) } 
(0204) //------------------------------ 
(0205) void   stop_bit(void) 
(0206) { 
(0207)    SDAOUT;
_stop_bit:
    00101 9AD3      SBI	0x1A,3
(0208)    SCL0; 
    00102 98DA      CBI	0x1B,2
(0209)    delayms(3);
    00103 E003      LDI	R16,3
    00104 E010      LDI	R17,0
    00105 940E 02D8 CALL	_delayms
(0210)    SDA0; 
    00107 98DB      CBI	0x1B,3
(0211)    delayms(3);
    00108 E003      LDI	R16,3
    00109 E010      LDI	R17,0
    0010A 940E 02D8 CALL	_delayms
(0212)    SCL1; 
    0010C 9ADA      SBI	0x1B,2
(0213)    delayms(3);
    0010D E003      LDI	R16,3
    0010E E010      LDI	R17,0
    0010F 940E 02D8 CALL	_delayms
(0214)    SDA1; 
    00111 9ADB      SBI	0x1B,3
    00112 9508      RET
_tx_byte:
  n                    --> R20
  i                    --> R22
  dat                  --> R12
  dat_byte             --> R10
    00113 940E 0323 CALL	push_xgsetF03C
    00115 2EA0      MOV	R10,R16
(0215) } 
(0216) 
(0217) /*
(0218) void  tx_byte(uchar dat_byte) 
(0219) { 
(0220)    char i,n,dat; 
(0221)    n=Nack_counter; 
(0222)    dat=dat_byte; 
(0223)    for(i=0;i<8;i++) 
(0224)    { 
(0225)      if(dat&0x80) 
(0226)       bit_out=1; 
(0227)      else 
(0228)       bit_out=0; 
(0229)      send_bit(); 
(0230)      dat=dat<<1; 
(0231)    } 
(0232)    
(0233)    receive_bit(); 
(0234) 
(0235) } */
(0236) 
(0237) 
(0238) 
(0239) //--------- 发送一个字节--------- 
(0240) 
(0241) void  tx_byte(uchar dat_byte) 
(0242) { 
(0243)    char i,n,dat; 
(0244)    n=Nack_counter; 
    00116 E04A      LDI	R20,0xA
(0245) TX_again: 
(0246)    dat=dat_byte; 
    00117 2CCA      MOV	R12,R10
(0247)    for(i=0;i<8;i++) 
    00118 2766      CLR	R22
    00119 C00C      RJMP	0x0126
(0248)    { 
(0249)      if(dat&0x80) 
    0011A FEC7      SBRS	R12,7
    0011B C004      RJMP	0x0120
(0250) 	 {
(0251)       bit_out=1; 
    0011C E081      LDI	R24,1
    0011D 9380 010C STS	bit_out,R24
(0252) 	  }
    0011F C003      RJMP	0x0123
(0253)      else 
(0254) 	 {
(0255)       bit_out=0;
    00120 2422      CLR	R2
    00121 9220 010C STS	bit_out,R2
(0256) 	  } 
(0257)      send_bit(); 
    00123 D011      RCALL	_send_bit
(0258)      dat=dat<<1; 
    00124 0CCC      LSL	R12
    00125 9563      INC	R22
    00126 3068      CPI	R22,0x8
    00127 F390      BCS	0x011A
(0259)    } 
(0260)    
(0261)    receive_bit(); 
    00128 D036      RCALL	_receive_bit
(0262)    if(bit_in==1) 
    00129 9180 010B LDS	R24,bit_in
    0012B 3081      CPI	R24,1
    0012C F431      BNE	0x0133
(0263)    { 
(0264)     stop_bit(); 
    0012D DFD3      RCALL	_stop_bit
(0265)     if(n!=0) 
    0012E 2344      TST	R20
    0012F F019      BEQ	0x0133
(0266)     {n--;goto Repeat;} 
    00130 954A      DEC	R20
(0267)     else 
(0268)      goto exit; 
(0269)    } 
(0270)    else 
(0271)     goto exit; 
(0272) Repeat: 
(0273)     start_bit(); 
    00131 DFBA      RCALL	_start_bit
(0274)     goto TX_again; 
    00132 CFE4      RJMP	0x0117
(0275) exit: 
(0276) ;
    00133 940C 032C JMP	pop_xgsetF03C
(0277)   // USART_send(n)  ; 
(0278) } 
(0279) 
(0280) //300 720us
(0281) //低电平  27 ms  高电平时  45 us
(0282) //-----------发送一个位--------- 
(0283) void  send_bit(void) 
(0284) { 
(0285)    SDAOUT;
_send_bit:
    00135 9AD3      SBI	0x1A,3
(0286)   if(bit_out==0) 
    00136 9020 010C LDS	R2,bit_out
    00138 2022      TST	R2
    00139 F411      BNE	0x013C
(0287)   {
(0288)      SDA0; 
    0013A 98DB      CBI	0x1B,3
(0289)   }
    0013B C001      RJMP	0x013D
(0290)   else 
(0291)   {
(0292)      SDA1; 
    0013C 9ADB      SBI	0x1B,3
(0293)   }
(0294)   delayms(1);
    0013D E001      LDI	R16,1
    0013E E010      LDI	R17,0
    0013F 940E 02D8 CALL	_delayms
(0295)   SCL1; 
    00141 9ADA      SBI	0x1B,2
(0296)   delayms(3);
    00142 E003      LDI	R16,3
    00143 E010      LDI	R17,0
    00144 940E 02D8 CALL	_delayms
(0297)   SCL0; 
    00146 98DA      CBI	0x1B,2
(0298)   delayms(2);
    00147 E002      LDI	R16,2
    00148 E010      LDI	R17,0
    00149 940C 02D8 JMP	_delayms
_rx_byte:
  i                    --> R20
  dat                  --> R10
    0014B 92AA      ST	-Y,R10
    0014C 934A      ST	-Y,R20
(0299) 
(0300) } 
(0301) //---------- 接收一个字节-------- 
(0302) uchar rx_byte(void) 
(0303) { 
(0304)   uchar i,dat; 
(0305)   dat=0; 
    0014D 24AA      CLR	R10
(0306)   for(i=0;i<8;i++) 
    0014E 2744      CLR	R20
    0014F C008      RJMP	0x0158
(0307)   { 
(0308)     dat=dat<<1; 
    00150 0CAA      LSL	R10
(0309)     receive_bit(); 
    00151 D00D      RCALL	_receive_bit
(0310)     if(bit_in==0x8) 
    00152 9180 010B LDS	R24,bit_in
    00154 3088      CPI	R24,0x8
    00155 F409      BNE	0x0157
(0311)      dat=dat+1; 
    00156 94A3      INC	R10
    00157 9543      INC	R20
    00158 3048      CPI	R20,0x8
    00159 F3B0      BCS	0x0150
(0312)   } 
(0313)   send_bit(); 
    0015A DFDA      RCALL	_send_bit
(0314)   return dat; 
    0015B 2D0A      MOV	R16,R10
    0015C 9149      LD	R20,Y+
    0015D 90A9      LD	R10,Y+
    0015E 9508      RET
(0315) } 
(0316) 
(0317) //---------- 接收一个位---------- 
(0318) void receive_bit(void) 
(0319) { 
(0320)   //SDA1;
(0321)   PIN;
_receive_bit:
    0015F 98D3      CBI	0x1A,3
(0322)   delayms(1);
    00160 E001      LDI	R16,1
    00161 E010      LDI	R17,0
    00162 940E 02D8 CALL	_delayms
(0323)   SCL1; 
    00164 9ADA      SBI	0x1B,2
(0324) 
(0325)   delayms(3);
    00165 E003      LDI	R16,3
    00166 E010      LDI	R17,0
    00167 940E 02D8 CALL	_delayms
(0326)   bit_in=READ; 
    00169 B389      IN	R24,0x19
    0016A 7088      ANDI	R24,0x8
    0016B 9380 010B STS	bit_in,R24
(0327)   //delayms(2);
(0328)   SCL0; 
    0016D 98DA      CBI	0x1B,2
(0329)   delayms(2);
    0016E E002      LDI	R16,2
    0016F E010      LDI	R17,0
    00170 940C 02D8 JMP	_delayms
_memread:
  cmd                  --> R12
  slave_addr           --> R10
    00172 92AA      ST	-Y,R10
    00173 92CA      ST	-Y,R12
    00174 2EC2      MOV	R12,R18
    00175 2EA0      MOV	R10,R16
(0330) } 
(0331) //------------ 延时-------------- 
(0332) /*void   delay(uint N) 
(0333) { 
(0334)   uint i; 
(0335)   for(i=0;i<N;i++) 
(0336)   
(0337)      _nop_(); 
(0338) } */
(0339) //------------------------------ 
(0340) uint memread(unsigned char slave_addr, unsigned char cmd) 
(0341) { 
(0342)   start_bit(); 
    00176 DF75      RCALL	_start_bit
(0343)   tx_byte(slave_addr << 1);  //Send SlaveAddress ==============================
    00177 2D0A      MOV	R16,R10
    00178 0F00      LSL	R16
    00179 DF99      RCALL	_tx_byte
(0344)   //tx_byte(0x00); 
(0345)   tx_byte(cmd);  //Send Command 
    0017A 2D0C      MOV	R16,R12
    0017B DF97      RCALL	_tx_byte
(0346)   //------------ 
(0347)   start_bit(); 
    0017C DF6F      RCALL	_start_bit
(0348)   //tx_byte(0x01); 
(0349)   tx_byte((slave_addr << 1)+1);  //Send SlaveAddress ==============================
    0017D 2D0A      MOV	R16,R10
    0017E 0F00      LSL	R16
    0017F 5F0F      SUBI	R16,0xFF
    00180 DF92      RCALL	_tx_byte
(0350)   bit_out=0; 
    00181 2422      CLR	R2
    00182 9220 010C STS	bit_out,R2
(0351)   DataL=rx_byte(); 
    00184 DFC6      RCALL	_rx_byte
    00185 9300 0109 STS	DataL,R16
(0352)   bit_out=0; 
    00187 2422      CLR	R2
    00188 9220 010C STS	bit_out,R2
(0353)   DataH=rx_byte(); 
    0018A DFC0      RCALL	_rx_byte
    0018B 9300 010A STS	DataH,R16
(0354)   bit_out=1; 
    0018D E081      LDI	R24,1
    0018E 9380 010C STS	bit_out,R24
(0355)   Pecreg=rx_byte(); 
    00190 DFBA      RCALL	_rx_byte
    00191 2EA0      MOV	R10,R16
    00192 92A0 0108 STS	Pecreg,R10
(0356)   stop_bit(); 
    00194 DF6C      RCALL	_stop_bit
(0357)   return(DataH*256+DataL); 
    00195 9120 010A LDS	R18,DataH
    00197 2733      CLR	R19
    00198 E000      LDI	R16,0
    00199 E011      LDI	R17,1
    0019A 940E 0305 CALL	empy16s
    0019C 0118      MOVW	R2,R16
    0019D 9040 0109 LDS	R4,DataL
    0019F 2455      CLR	R5
    001A0 0C24      ADD	R2,R4
    001A1 1C35      ADC	R3,R5
    001A2 0181      MOVW	R16,R2
    001A3 90C9      LD	R12,Y+
    001A4 90A9      LD	R10,Y+
    001A5 9508      RET
FILE: E:\WORK\北京康杰斯\16程序\步进电机\time.c
(0001) 
(0002) #include <iom16v.h>
(0003) #include <macros.h>
(0004) 
(0005) 
(0006) //TIMER0 initialize - prescale:64
(0007) // WGM: Normal
(0008) // desired value: 1KHz
(0009) // actual value:  1.008KHz (0.8%)
(0010) void timer0_init(void)
(0011) {
(0012)  TCCR0 = 0x00; //stop
_timer0_init:
    001A6 2422      CLR	R2
    001A7 BE23      OUT	0x33,R2
(0013)  TCNT0 = 0xC2; //set count
    001A8 EC82      LDI	R24,0xC2
    001A9 BF82      OUT	0x32,R24
(0014)  OCR0  = 0xff;  //set compare
    001AA EF8F      LDI	R24,0xFF
    001AB BF8C      OUT	0x3C,R24
(0015)  TCCR0 = 0x05; //start timer
    001AC E085      LDI	R24,5
    001AD BF83      OUT	0x33,R24
    001AE 9508      RET
_timer0_ovf_isr:
    001AF 938A      ST	-Y,R24
    001B0 939A      ST	-Y,R25
    001B1 B78F      IN	R24,0x3F
    001B2 938A      ST	-Y,R24
(0016) }
(0017) extern unsigned int count;
(0018) extern unsigned int P_bao;
(0019) extern unsigned int Bao_sum;
(0020) extern unsigned int Bao_time;
(0021) 
(0022) 
(0023) /*
(0024) 最小定时精度是10MS毫秒 
(0025) 讲数据进行切分 
(0026) 当PC检测到低电平的时候对数据进行分析；
(0027) 数据<200毫秒的时候,不进行数据的累加  
(0028) 之后到PC0为高电平的时候才将数据进行累加
(0029) 设置时间 包括最小时间间隔的设置 控制精度是最小时间进行设置
(0030) 将数据2S进行一次数据的跟新；
(0031) 
(0032) 
(0033) */
(0034) 
(0035) 
(0036) #pragma interrupt_handler timer0_ovf_isr:iv_TIM0_OVF
(0037) void timer0_ovf_isr(void)
(0038) {
(0039)  TCNT0 = 99; //reload counter value
    001B3 E683      LDI	R24,0x63
    001B4 BF82      OUT	0x32,R24
(0040)  
(0041)  count++;
    001B5 9180 0106 LDS	R24,count
    001B7 9190 0107 LDS	R25,count+1
    001B9 9601      ADIW	R24,1
    001BA 9390 0107 STS	count+1,R25
    001BC 9380 0106 STS	count,R24
    001BE 9189      LD	R24,Y+
    001BF BF8F      OUT	0x3F,R24
    001C0 9199      LD	R25,Y+
    001C1 9189      LD	R24,Y+
    001C2 9518      RETI
FILE: E:\WORK\北京康杰斯\16程序\步进电机\uart.c
(0001) 
(0002) #include <iom16v.h>
(0003) #include <macros.h>
(0004) 
(0005) extern unsigned int P_bao;
(0006) extern unsigned int Bao_sum;
(0007) //UART0 initialize
(0008) // desired baud rate: 9600
(0009) // actual: baud rate:9615 (0.2%)
(0010) /*
(0011) UCSR0A=0x00;
(0012) UCSR0B=0x98;
(0013) UCSR0C=0x06;
(0014) UBRR0H=0x00;
(0015) UBRR0L=0x33;
(0016) }
(0017) 
(0018) */
(0019) 
(0020) 
(0021) 
(0022) void uart0_init(void)
(0023) {
(0024)  UCSRB = 0x00; //disable while setting baud rate
_uart0_init:
    001C3 2422      CLR	R2
    001C4 B82A      OUT	0x0A,R2
(0025)  UCSRA = 0x0;
    001C5 B82B      OUT	0x0B,R2
(0026)  UCSRC = 0x06;
    001C6 E086      LDI	R24,6
    001C7 BD80      OUT	0x20,R24
(0027)  //UBRRL =207; //set baud rate lo
(0028)  UBRRL =0x33; //set baud rate lo
    001C8 E383      LDI	R24,0x33
    001C9 B989      OUT	0x09,R24
(0029)  
(0030)  UBRRH = 0x00; //set baud rate hi
    001CA BC20      OUT	0x20,R2
(0031)  UCSRB = 0x98;
    001CB E988      LDI	R24,0x98
    001CC B98A      OUT	0x0A,R24
    001CD 9508      RET
(0032) }
(0033) 
(0034) 
(0035) void USART_send(unsigned char data)
(0036) {
(0037)  
(0038) /*等待发送缓冲器为空 */
(0039) while (! (UCSRA & 0x20));
_USART_send:
  data                 --> R16
    001CE 9B5D      SBIS	0x0B,5
    001CF CFFE      RJMP	_USART_send
(0040) /*将数据放入缓冲器，发送数据*/
(0041) UDR=data;
    001D0 B90C      OUT	0x0C,R16
    001D1 9508      RET
_uart0_rx_isr:
  j                    --> R12
  data                 --> Y,+0
  i                    --> R10
  UART_Timeout         --> R20
    001D2 920A      ST	-Y,R0
    001D3 921A      ST	-Y,R1
    001D4 922A      ST	-Y,R2
    001D5 923A      ST	-Y,R3
    001D6 924A      ST	-Y,R4
    001D7 925A      ST	-Y,R5
    001D8 926A      ST	-Y,R6
    001D9 927A      ST	-Y,R7
    001DA 928A      ST	-Y,R8
    001DB 929A      ST	-Y,R9
    001DC 930A      ST	-Y,R16
    001DD 931A      ST	-Y,R17
    001DE 932A      ST	-Y,R18
    001DF 933A      ST	-Y,R19
    001E0 938A      ST	-Y,R24
    001E1 939A      ST	-Y,R25
    001E2 93AA      ST	-Y,R26
    001E3 93BA      ST	-Y,R27
    001E4 93EA      ST	-Y,R30
    001E5 93FA      ST	-Y,R31
    001E6 B60F      IN	R0,0x3F
    001E7 920A      ST	-Y,R0
    001E8 940E 0315 CALL	push_xgset303C
    001EA 972F      SBIW	R28,0xF
(0042)  
(0043) 
(0044) }
(0045) 
(0046) #pragma interrupt_handler uart0_rx_isr:iv_USART0_RXC
(0047) void uart0_rx_isr(void)
(0048) {
(0049)     unsigned char data[15];
(0050) 	unsigned int UART_Timeout = 0;
    001EB 2744      CLR	R20
    001EC 2755      CLR	R21
(0051) 	unsigned char i = 0;
    001ED 24AA      CLR	R10
(0052) 	unsigned char j = 0;
    001EE 24CC      CLR	R12
(0053) 
(0054)    data[i] = UDR;
    001EF 01CE      MOVW	R24,R28
    001F0 2DEA      MOV	R30,R10
    001F1 27FF      CLR	R31
    001F2 0FE8      ADD	R30,R24
    001F3 1FF9      ADC	R31,R25
    001F4 B02C      IN	R2,0x0C
    001F5 8220      ST	Z,R2
    001F6 C01F      RJMP	0x0216
(0055)          while(data[i]!='E')
(0056) 				{
(0057) 				
(0058) 				i++;
    001F7 94A3      INC	R10
    001F8 C002      RJMP	0x01FB
(0059) 					
(0060) 					while((0==(UCSRA&0x80))&&(UART_Timeout<5000))
(0061) 					{UART_Timeout++;}
    001F9 5F4F      SUBI	R20,0xFF
    001FA 4F5F      SBCI	R21,0xFF
    001FB 995F      SBIC	0x0B,7
    001FC C004      RJMP	0x0201
    001FD 3848      CPI	R20,0x88
    001FE E1E3      LDI	R30,0x13
    001FF 075E      CPC	R21,R30
    00200 F3C0      BCS	0x01F9
(0062) 					if(UART_Timeout>=5000)
    00201 3848      CPI	R20,0x88
    00202 E1E3      LDI	R30,0x13
    00203 075E      CPC	R21,R30
    00204 F040      BCS	0x020D
(0063) 					{
(0064) 						data[i]='E'; // 如果接收超时，退出中断
    00205 01CE      MOVW	R24,R28
    00206 2DEA      MOV	R30,R10
    00207 27FF      CLR	R31
    00208 0FE8      ADD	R30,R24
    00209 1FF9      ADC	R31,R25
    0020A E485      LDI	R24,0x45
    0020B 8380      ST	Z,R24
(0065) 					}
    0020C C007      RJMP	0x0214
(0066) 					else
(0067) 					{
(0068) 						data[i] = UDR;
    0020D 01CE      MOVW	R24,R28
    0020E 2DEA      MOV	R30,R10
    0020F 27FF      CLR	R31
    00210 0FE8      ADD	R30,R24
    00211 1FF9      ADC	R31,R25
    00212 B02C      IN	R2,0x0C
    00213 8220      ST	Z,R2
(0069) 					}
(0070) 					
(0071) 					UART_Timeout = 0;
    00214 2744      CLR	R20
    00215 2755      CLR	R21
    00216 01CE      MOVW	R24,R28
    00217 2DEA      MOV	R30,R10
    00218 27FF      CLR	R31
    00219 0FE8      ADD	R30,R24
    0021A 1FF9      ADC	R31,R25
    0021B 8180      LD	R24,Z
    0021C 3485      CPI	R24,0x45
    0021D F6C9      BNE	0x01F7
(0072) 					
(0073) 				}
(0074)  UCSRA&=~0x80;
    0021E 985F      CBI	0x0B,7
(0075) 
(0076)  
(0077) 
(0078)   P_bao=(data[1]-0X30)*10000+(data[2]-0X30)*1000+(data[3]-0X30)*100+(data[4]-0X30)*10+(data[5]-0X30);
    0021F 812A      LDD	R18,Y+2
    00220 2733      CLR	R19
    00221 EE08      LDI	R16,0xE8
    00222 E013      LDI	R17,3
    00223 940E 0305 CALL	empy16s
    00225 01C8      MOVW	R24,R16
    00226 5880      SUBI	R24,0x80
    00227 4B9B      SBCI	R25,0xBB
    00228 8129      LDD	R18,Y+1
    00229 2733      CLR	R19
    0022A E100      LDI	R16,0x10
    0022B E217      LDI	R17,0x27
    0022C 940E 0305 CALL	empy16s
    0022E 01F8      MOVW	R30,R16
    0022F 50E0      SUBI	R30,0
    00230 45F3      SBCI	R31,0x53
    00231 0FE8      ADD	R30,R24
    00232 1FF9      ADC	R31,R25
    00233 811B      LDD	R17,Y+3
    00234 E604      LDI	R16,0x64
    00235 0301      MULSU	R16,R17
    00236 01C0      MOVW	R24,R0
    00237 5C80      SUBI	R24,0xC0
    00238 4192      SBCI	R25,0x12
    00239 0FE8      ADD	R30,R24
    0023A 1FF9      ADC	R31,R25
    0023B 811C      LDD	R17,Y+4
    0023C E00A      LDI	R16,0xA
    0023D 0301      MULSU	R16,R17
    0023E 01C0      MOVW	R24,R0
    0023F 5E80      SUBI	R24,0xE0
    00240 4091      SBCI	R25,1
    00241 0FE8      ADD	R30,R24
    00242 1FF9      ADC	R31,R25
    00243 818D      LDD	R24,Y+5
    00244 2799      CLR	R25
    00245 97C0      SBIW	R24,0x30
    00246 0FE8      ADD	R30,R24
    00247 1FF9      ADC	R31,R25
    00248 93F0 0101 STS	P_bao+1,R31
    0024A 93E0 0100 STS	P_bao,R30
(0079)    
(0080)    
(0081)    USART_send(0xc9); 
    0024C EC09      LDI	R16,0xC9
    0024D DF80      RCALL	_USART_send
(0082)    USART_send(0xe8);
    0024E EE08      LDI	R16,0xE8
    0024F DF7E      RCALL	_USART_send
(0083)     
(0084)    USART_send(0xD6); 
    00250 ED06      LDI	R16,0xD6
    00251 DF7C      RCALL	_USART_send
(0085)    USART_send(0xC3 ); 
    00252 EC03      LDI	R16,0xC3
    00253 DF7A      RCALL	_USART_send
(0086)    
(0087)    USART_send(0xCE); 
    00254 EC0E      LDI	R16,0xCE
    00255 DF78      RCALL	_USART_send
(0088)    USART_send(0xAA); 
    00256 EA0A      LDI	R16,0xAA
    00257 DF76      RCALL	_USART_send
(0089)    
(0090)    USART_send(0xA3); 
    00258 EA03      LDI	R16,0xA3
    00259 DF74      RCALL	_USART_send
(0091)    USART_send(0xBA); 
    0025A EB0A      LDI	R16,0xBA
    0025B DF72      RCALL	_USART_send
(0092)    
(0093)    USART_send(P_bao/10000%10+0x30); 
    0025C E120      LDI	R18,0x10
    0025D E237      LDI	R19,0x27
    0025E 9100 0100 LDS	R16,P_bao
    00260 9110 0101 LDS	R17,P_bao+1
    00262 940E 02EB CALL	div16u
    00264 E02A      LDI	R18,0xA
    00265 E030      LDI	R19,0
    00266 940E 02E9 CALL	mod16u
    00268 5D00      SUBI	R16,0xD0
    00269 4F1F      SBCI	R17,0xFF
    0026A DF63      RCALL	_USART_send
(0094)    USART_send(P_bao/1000%10+0x30); 
    0026B EE28      LDI	R18,0xE8
    0026C E033      LDI	R19,3
    0026D 9100 0100 LDS	R16,P_bao
    0026F 9110 0101 LDS	R17,P_bao+1
    00271 940E 02EB CALL	div16u
    00273 E02A      LDI	R18,0xA
    00274 E030      LDI	R19,0
    00275 940E 02E9 CALL	mod16u
    00277 5D00      SUBI	R16,0xD0
    00278 4F1F      SBCI	R17,0xFF
    00279 DF54      RCALL	_USART_send
(0095)    
(0096)    USART_send(P_bao/100%10+0x30); 
    0027A E624      LDI	R18,0x64
    0027B E030      LDI	R19,0
    0027C 9100 0100 LDS	R16,P_bao
    0027E 9110 0101 LDS	R17,P_bao+1
    00280 940E 02EB CALL	div16u
    00282 E02A      LDI	R18,0xA
    00283 E030      LDI	R19,0
    00284 940E 02E9 CALL	mod16u
    00286 5D00      SUBI	R16,0xD0
    00287 4F1F      SBCI	R17,0xFF
    00288 DF45      RCALL	_USART_send
(0097)    USART_send(P_bao/10%10+0x30); 
    00289 E02A      LDI	R18,0xA
    0028A E030      LDI	R19,0
    0028B 9100 0100 LDS	R16,P_bao
    0028D 9110 0101 LDS	R17,P_bao+1
    0028F 940E 02EB CALL	div16u
    00291 E02A      LDI	R18,0xA
    00292 E030      LDI	R19,0
    00293 940E 02E9 CALL	mod16u
    00295 5D00      SUBI	R16,0xD0
    00296 4F1F      SBCI	R17,0xFF
    00297 DF36      RCALL	_USART_send
(0098)    
(0099)    USART_send(P_bao%10+0x30); 
    00298 E02A      LDI	R18,0xA
    00299 E030      LDI	R19,0
    0029A 9100 0100 LDS	R16,P_bao
    0029C 9110 0101 LDS	R17,P_bao+1
    0029E 940E 02E9 CALL	mod16u
    002A0 5D00      SUBI	R16,0xD0
    002A1 4F1F      SBCI	R17,0xFF
    002A2 DF2B      RCALL	_USART_send
(0100)    USART_send(0x30);
    002A3 E300      LDI	R16,0x30
    002A4 DF29      RCALL	_USART_send
(0101)    
(0102)    USART_send(0xBA ); 
    002A5 EB0A      LDI	R16,0xBA
    002A6 DF27      RCALL	_USART_send
(0103)    USART_send(0xC1 ); 
    002A7 EC01      LDI	R16,0xC1
    002A8 DF25      RCALL	_USART_send
(0104)    
(0105)    USART_send(0xC3 ); 
    002A9 EC03      LDI	R16,0xC3
    002AA DF23      RCALL	_USART_send
(0106)    USART_send(0xEB); 
    002AB EE0B      LDI	R16,0xEB
    002AC DF21      RCALL	_USART_send
    002AD 962F      ADIW	R28,0xF
    002AE 940E 031C CALL	pop_xgset303C
    002B0 9009      LD	R0,Y+
    002B1 BE0F      OUT	0x3F,R0
    002B2 91F9      LD	R31,Y+
    002B3 91E9      LD	R30,Y+
    002B4 91B9      LD	R27,Y+
    002B5 91A9      LD	R26,Y+
    002B6 9199      LD	R25,Y+
    002B7 9189      LD	R24,Y+
    002B8 9139      LD	R19,Y+
    002B9 9129      LD	R18,Y+
    002BA 9119      LD	R17,Y+
    002BB 9109      LD	R16,Y+
    002BC 9099      LD	R9,Y+
    002BD 9089      LD	R8,Y+
    002BE 9079      LD	R7,Y+
    002BF 9069      LD	R6,Y+
    002C0 9059      LD	R5,Y+
    002C1 9049      LD	R4,Y+
    002C2 9039      LD	R3,Y+
    002C3 9029      LD	R2,Y+
    002C4 9019      LD	R1,Y+
    002C5 9009      LD	R0,Y+
    002C6 9518      RETI
_delay:
  i                    --> R20
  j                    --> R16
    002C7 934A      ST	-Y,R20
FILE: E:\WORK\北京康杰斯\16程序\步进电机\delay.c
(0001) #include<delay.h>
(0002) 
(0003) void delay(int j)
(0004) {
(0005) unsigned char i;
(0006) for(;j>1;j--)
    002C8 C008      RJMP	0x02D1
(0007)    for(i=100;i>1;i--);
    002C9 E644      LDI	R20,0x64
    002CA C001      RJMP	0x02CC
    002CB 954A      DEC	R20
    002CC E081      LDI	R24,1
    002CD 1784      CP	R24,R20
    002CE F3E0      BCS	0x02CB
    002CF 5001      SUBI	R16,1
    002D0 4010      SBCI	R17,0
    002D1 E081      LDI	R24,1
    002D2 E090      LDI	R25,0
    002D3 1780      CP	R24,R16
    002D4 0791      CPC	R25,R17
    002D5 F39C      BLT	0x02C9
    002D6 9149      LD	R20,Y+
    002D7 9508      RET
_delayms:
  i                    --> R20
  j                    --> R16
    002D8 934A      ST	-Y,R20
(0008) 
(0009) }
(0010) 
(0011) void delayms(int j)
(0012) {
(0013) unsigned char i;
(0014) for(;j>1;j--)
    002D9 C008      RJMP	0x02E2
(0015)    for(i=2;i>1;i--);
FILE: <library>
    002DA E042      LDI	R20,2
    002DB C001      RJMP	0x02DD
    002DC 954A      DEC	R20
    002DD E081      LDI	R24,1
    002DE 1784      CP	R24,R20
    002DF F3E0      BCS	0x02DC
    002E0 5001      SUBI	R16,1
    002E1 4010      SBCI	R17,0
    002E2 E081      LDI	R24,1
    002E3 E090      LDI	R25,0
    002E4 1780      CP	R24,R16
    002E5 0791      CPC	R25,R17
    002E6 F39C      BLT	0x02DA
    002E7 9149      LD	R20,Y+
    002E8 9508      RET
mod16u:
    002E9 9468      BSET	6
    002EA C001      RJMP	xdiv16u
div16u:
    002EB 94E8      BCLR	6
xdiv16u:
    002EC 92EA      ST	-Y,R14
    002ED 92FA      ST	-Y,R15
    002EE 938A      ST	-Y,R24
    002EF 24EE      CLR	R14
    002F0 24FF      CLR	R15
    002F1 E180      LDI	R24,0x10
    002F2 0F00      LSL	R16
    002F3 1F11      ROL	R17
    002F4 1CEE      ROL	R14
    002F5 1CFF      ROL	R15
    002F6 16E2      CP	R14,R18
    002F7 06F3      CPC	R15,R19
    002F8 F018      BCS	0x02FC
    002F9 1AE2      SUB	R14,R18
    002FA 0AF3      SBC	R15,R19
    002FB 9503      INC	R16
    002FC 958A      DEC	R24
    002FD F7A1      BNE	0x02F2
    002FE F416      BRTC	0x0301
    002FF 2D0E      MOV	R16,R14
    00300 2D1F      MOV	R17,R15
    00301 9189      LD	R24,Y+
    00302 90F9      LD	R15,Y+
    00303 90E9      LD	R14,Y+
    00304 9508      RET
empy16s:
    00305 920A      ST	-Y,R0
    00306 921A      ST	-Y,R1
    00307 938A      ST	-Y,R24
    00308 939A      ST	-Y,R25
    00309 9F02      MUL	R16,R18
    0030A 01C0      MOVW	R24,R0
    0030B 9F12      MUL	R17,R18
    0030C 0D90      ADD	R25,R0
    0030D 9F03      MUL	R16,R19
    0030E 0D90      ADD	R25,R0
    0030F 018C      MOVW	R16,R24
    00310 9199      LD	R25,Y+
    00311 9189      LD	R24,Y+
    00312 9019      LD	R1,Y+
    00313 9009      LD	R0,Y+
    00314 9508      RET
push_xgset303C:
    00315 935A      ST	-Y,R21
    00316 934A      ST	-Y,R20
    00317 92DA      ST	-Y,R13
    00318 92CA      ST	-Y,R12
    00319 92BA      ST	-Y,R11
    0031A 92AA      ST	-Y,R10
    0031B 9508      RET
pop_xgset303C:
    0031C 90A9      LD	R10,Y+
    0031D 90B9      LD	R11,Y+
    0031E 90C9      LD	R12,Y+
    0031F 90D9      LD	R13,Y+
    00320 9149      LD	R20,Y+
    00321 9159      LD	R21,Y+
    00322 9508      RET
push_xgsetF03C:
    00323 937A      ST	-Y,R23
    00324 936A      ST	-Y,R22
    00325 935A      ST	-Y,R21
    00326 934A      ST	-Y,R20
    00327 92DA      ST	-Y,R13
    00328 92CA      ST	-Y,R12
    00329 92BA      ST	-Y,R11
    0032A 92AA      ST	-Y,R10
    0032B 9508      RET
pop_xgsetF03C:
    0032C 90A9      LD	R10,Y+
    0032D 90B9      LD	R11,Y+
    0032E 90C9      LD	R12,Y+
    0032F 90D9      LD	R13,Y+
    00330 9149      LD	R20,Y+
    00331 9159      LD	R21,Y+
    00332 9169      LD	R22,Y+
    00333 9179      LD	R23,Y+
    00334 9508      RET
