
sgdkcgq_485_cry4m16m_pulse_ad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .eeprom       000001ea  00810080  00810080  00001e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d7a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00800060  00001d7a  00001e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000012d  00800060  00800060  00001e2e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dec  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000527  00000000  00000000  00004f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad2  00000000  00000000  00005463  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00005f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068e  00000000  00000000  00006270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d6d  00000000  00000000  000068fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000966b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	09 cd       	rjmp	.-1518   	; 0xfffffa18 <__eeprom_end+0xff7ef7ae>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	b4 cc       	rjmp	.-1688   	; 0xfffff97c <__eeprom_end+0xff7ef712>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	55 cd       	rjmp	.-1366   	; 0xfffffac2 <__eeprom_end+0xff7ef858>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	2a cd       	rjmp	.-1452   	; 0xfffffa70 <__eeprom_end+0xff7ef806>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	ea e7       	ldi	r30, 0x7A	; 122
      3a:	fd e1       	ldi	r31, 0x1D	; 29
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a0 36       	cpi	r26, 0x60	; 96
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	a0 e6       	ldi	r26, 0x60	; 96
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	ad 38       	cpi	r26, 0x8D	; 141
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	4d db       	rcall	.-2406   	; 0xfffff6f4 <__eeprom_end+0xff7ef48a>
      5a:	8d ce       	rjmp	.-742    	; 0xfffffd76 <__eeprom_end+0xff7efb0c>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <SetTimer>:
	}
	//
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		//搜索指定的定时器并关闭它
		if(soft_timer[i].id == id)
      5e:	0f 93       	push	r16
      60:	1f 93       	push	r17
      62:	a2 2f       	mov	r26, r18
      64:	00 97       	sbiw	r24, 0x00	; 0
      66:	09 f4       	brne	.+2      	; 0x6a <SetTimer+0xc>
      68:	6c c0       	rjmp	.+216    	; 0x142 <SetTimer+0xe4>
      6a:	41 15       	cp	r20, r1
      6c:	51 05       	cpc	r21, r1
      6e:	61 05       	cpc	r22, r1
      70:	71 05       	cpc	r23, r1
      72:	09 f4       	brne	.+2      	; 0x76 <SetTimer+0x18>
      74:	66 c0       	rjmp	.+204    	; 0x142 <SetTimer+0xe4>
      76:	e0 91 66 00 	lds	r30, 0x0066
{
	unsigned char i;
	//
	if(SOFT_TIMER_ERROR == id)
	{
		return SOFT_TIMER_ERROR;
      7a:	f0 91 67 00 	lds	r31, 0x0067
	}
	//
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		//搜索指定的定时器并关闭它
		if(soft_timer[i].id == id)
      7e:	e8 17       	cp	r30, r24
      80:	f9 07       	cpc	r31, r25
		{
			soft_timer[i].enable = FALSE;
      82:	09 f4       	brne	.+2      	; 0x86 <SetTimer+0x28>
      84:	93 c0       	rjmp	.+294    	; 0x1ac <SetTimer+0x14e>
      86:	20 91 72 00 	lds	r18, 0x0072
      8a:	30 91 73 00 	lds	r19, 0x0073
      8e:	28 17       	cp	r18, r24
      90:	39 07       	cpc	r19, r25
      92:	09 f4       	brne	.+2      	; 0x96 <SetTimer+0x38>
      94:	9b c0       	rjmp	.+310    	; 0x1cc <SetTimer+0x16e>
      96:	20 91 7e 00 	lds	r18, 0x007E
			return id;
      9a:	30 91 7f 00 	lds	r19, 0x007F
	}
	//
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		//搜索指定的定时器并关闭它
		if(soft_timer[i].id == id)
      9e:	28 17       	cp	r18, r24
      a0:	39 07       	cpc	r19, r25
      a2:	09 f4       	brne	.+2      	; 0xa6 <SetTimer+0x48>
      a4:	96 c0       	rjmp	.+300    	; 0x1d2 <SetTimer+0x174>
      a6:	20 91 8a 00 	lds	r18, 0x008A
      aa:	30 91 8b 00 	lds	r19, 0x008B
      ae:	28 17       	cp	r18, r24
      b0:	39 07       	cpc	r19, r25
      b2:	09 f4       	brne	.+2      	; 0xb6 <SetTimer+0x58>
      b4:	91 c0       	rjmp	.+290    	; 0x1d8 <SetTimer+0x17a>
      b6:	20 91 96 00 	lds	r18, 0x0096
      ba:	30 91 97 00 	lds	r19, 0x0097
      be:	28 17       	cp	r18, r24
      c0:	39 07       	cpc	r19, r25
      c2:	09 f4       	brne	.+2      	; 0xc6 <SetTimer+0x68>
      c4:	8c c0       	rjmp	.+280    	; 0x1de <SetTimer+0x180>
	}
	//
	//搜索id号匹配的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(soft_timer[i].id == id)
      c6:	20 91 a2 00 	lds	r18, 0x00A2
      ca:	30 91 a3 00 	lds	r19, 0x00A3
      ce:	28 17       	cp	r18, r24
      d0:	39 07       	cpc	r19, r25
      d2:	09 f4       	brne	.+2      	; 0xd6 <SetTimer+0x78>
      d4:	87 c0       	rjmp	.+270    	; 0x1e4 <SetTimer+0x186>
      d6:	20 91 ae 00 	lds	r18, 0x00AE
      da:	30 91 af 00 	lds	r19, 0x00AF
      de:	28 17       	cp	r18, r24
      e0:	39 07       	cpc	r19, r25
      e2:	09 f4       	brne	.+2      	; 0xe6 <SetTimer+0x88>
      e4:	82 c0       	rjmp	.+260    	; 0x1ea <SetTimer+0x18c>
      e6:	20 91 ba 00 	lds	r18, 0x00BA
      ea:	30 91 bb 00 	lds	r19, 0x00BB
      ee:	28 17       	cp	r18, r24
      f0:	39 07       	cpc	r19, r25
      f2:	09 f4       	brne	.+2      	; 0xf6 <SetTimer+0x98>
      f4:	7d c0       	rjmp	.+250    	; 0x1f0 <SetTimer+0x192>
	}
	//
	//id号匹配的软件定时器没有找到，搜索空闲的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(FALSE == soft_timer[i].enable)
      f6:	20 91 71 00 	lds	r18, 0x0071
      fa:	22 23       	and	r18, r18
      fc:	09 f4       	brne	.+2      	; 0x100 <SetTimer+0xa2>
      fe:	7e c0       	rjmp	.+252    	; 0x1fc <SetTimer+0x19e>
     100:	20 91 7d 00 	lds	r18, 0x007D
     104:	22 23       	and	r18, r18
     106:	09 f4       	brne	.+2      	; 0x10a <SetTimer+0xac>
     108:	76 c0       	rjmp	.+236    	; 0x1f6 <SetTimer+0x198>
     10a:	20 91 89 00 	lds	r18, 0x0089
     10e:	22 23       	and	r18, r18
     110:	09 f4       	brne	.+2      	; 0x114 <SetTimer+0xb6>
     112:	77 c0       	rjmp	.+238    	; 0x202 <SetTimer+0x1a4>
     114:	20 91 95 00 	lds	r18, 0x0095
     118:	22 23       	and	r18, r18
     11a:	09 f4       	brne	.+2      	; 0x11e <SetTimer+0xc0>
     11c:	75 c0       	rjmp	.+234    	; 0x208 <SetTimer+0x1aa>
     11e:	20 91 a1 00 	lds	r18, 0x00A1
     122:	22 23       	and	r18, r18
     124:	09 f4       	brne	.+2      	; 0x128 <SetTimer+0xca>
     126:	73 c0       	rjmp	.+230    	; 0x20e <SetTimer+0x1b0>
     128:	20 91 ad 00 	lds	r18, 0x00AD
     12c:	22 23       	and	r18, r18
     12e:	09 f4       	brne	.+2      	; 0x132 <SetTimer+0xd4>
     130:	71 c0       	rjmp	.+226    	; 0x214 <SetTimer+0x1b6>
     132:	20 91 b9 00 	lds	r18, 0x00B9
     136:	22 23       	and	r18, r18
     138:	49 f0       	breq	.+18     	; 0x14c <SetTimer+0xee>
     13a:	20 91 c5 00 	lds	r18, 0x00C5
     13e:	22 23       	and	r18, r18
     140:	91 f1       	breq	.+100    	; 0x1a6 <SetTimer+0x148>
	//中，软件定时器的定时时间一般不会比设置值多1ms。
	unsigned char i;
	//
	if(SOFT_TIMER_ERROR == id)
	{
		return SOFT_TIMER_ERROR;
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
			return id;			
		}
	}
	//
	return SOFT_TIMER_ERROR;
}
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret
	}
	//
	//id号匹配的软件定时器没有找到，搜索空闲的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(FALSE == soft_timer[i].enable)
     14c:	26 e0       	ldi	r18, 0x06	; 6
     14e:	30 e0       	ldi	r19, 0x00	; 0
		{
			soft_timer[i].enable = TRUE;
     150:	f9 01       	movw	r30, r18
     152:	ee 0f       	add	r30, r30
     154:	ff 1f       	adc	r31, r31
     156:	e2 0f       	add	r30, r18
     158:	f3 1f       	adc	r31, r19
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	ea 59       	subi	r30, 0x9A	; 154
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	23 87       	std	Z+11, r18	; 0x0b
			soft_timer[i].id = id;
     16a:	91 83       	std	Z+1, r25	; 0x01
     16c:	80 83       	st	Z, r24
			soft_timer[i].ms = ms;
     16e:	42 83       	std	Z+2, r20	; 0x02
     170:	53 83       	std	Z+3, r21	; 0x03
     172:	64 83       	std	Z+4, r22	; 0x04
     174:	75 83       	std	Z+5, r23	; 0x05
			soft_timer[i].overtime = soft_timer[i].ms + boot_time;
     176:	42 81       	ldd	r20, Z+2	; 0x02
     178:	53 81       	ldd	r21, Z+3	; 0x03
     17a:	64 81       	ldd	r22, Z+4	; 0x04
     17c:	75 81       	ldd	r23, Z+5	; 0x05
     17e:	00 91 82 01 	lds	r16, 0x0182
     182:	10 91 83 01 	lds	r17, 0x0183
     186:	20 91 84 01 	lds	r18, 0x0184
     18a:	30 91 85 01 	lds	r19, 0x0185
     18e:	40 0f       	add	r20, r16
     190:	51 1f       	adc	r21, r17
     192:	62 1f       	adc	r22, r18
     194:	73 1f       	adc	r23, r19
     196:	46 83       	std	Z+6, r20	; 0x06
     198:	57 83       	std	Z+7, r21	; 0x07
     19a:	60 87       	std	Z+8, r22	; 0x08
     19c:	71 87       	std	Z+9, r23	; 0x09
			soft_timer[i].retry = retry;
     19e:	a2 87       	std	Z+10, r26	; 0x0a
			return id;			
		}
	}
	//
	return SOFT_TIMER_ERROR;
}
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	08 95       	ret
	}
	//
	//id号匹配的软件定时器没有找到，搜索空闲的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(FALSE == soft_timer[i].enable)
     1a6:	27 e0       	ldi	r18, 0x07	; 7
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	d2 cf       	rjmp	.-92     	; 0x150 <SetTimer+0xf2>
	}
	//
	//搜索id号匹配的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(soft_timer[i].id == id)
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
		{
			soft_timer[i].enable = TRUE;
     1b0:	f9 01       	movw	r30, r18
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	e2 0f       	add	r30, r18
     1b8:	f3 1f       	adc	r31, r19
     1ba:	ee 0f       	add	r30, r30
     1bc:	ff 1f       	adc	r31, r31
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	ea 59       	subi	r30, 0x9A	; 154
     1c4:	ff 4f       	sbci	r31, 0xFF	; 255
     1c6:	21 e0       	ldi	r18, 0x01	; 1
     1c8:	23 87       	std	Z+11, r18	; 0x0b
     1ca:	d1 cf       	rjmp	.-94     	; 0x16e <SetTimer+0x110>
	}
	//
	//搜索id号匹配的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(soft_timer[i].id == id)
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	ef cf       	rjmp	.-34     	; 0x1b0 <SetTimer+0x152>
     1d2:	22 e0       	ldi	r18, 0x02	; 2
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	ec cf       	rjmp	.-40     	; 0x1b0 <SetTimer+0x152>
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	e9 cf       	rjmp	.-46     	; 0x1b0 <SetTimer+0x152>
     1de:	24 e0       	ldi	r18, 0x04	; 4
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	e6 cf       	rjmp	.-52     	; 0x1b0 <SetTimer+0x152>
     1e4:	25 e0       	ldi	r18, 0x05	; 5
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	e3 cf       	rjmp	.-58     	; 0x1b0 <SetTimer+0x152>
     1ea:	26 e0       	ldi	r18, 0x06	; 6
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	e0 cf       	rjmp	.-64     	; 0x1b0 <SetTimer+0x152>
     1f0:	27 e0       	ldi	r18, 0x07	; 7
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	dd cf       	rjmp	.-70     	; 0x1b0 <SetTimer+0x152>
	}
	//
	//id号匹配的软件定时器没有找到，搜索空闲的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(FALSE == soft_timer[i].enable)
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	aa cf       	rjmp	.-172    	; 0x150 <SetTimer+0xf2>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	a7 cf       	rjmp	.-178    	; 0x150 <SetTimer+0xf2>
     202:	22 e0       	ldi	r18, 0x02	; 2
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	a4 cf       	rjmp	.-184    	; 0x150 <SetTimer+0xf2>
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	a1 cf       	rjmp	.-190    	; 0x150 <SetTimer+0xf2>
     20e:	24 e0       	ldi	r18, 0x04	; 4
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	9e cf       	rjmp	.-196    	; 0x150 <SetTimer+0xf2>
     214:	25 e0       	ldi	r18, 0x05	; 5
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	9b cf       	rjmp	.-202    	; 0x150 <SetTimer+0xf2>

0000021a <timer_run>:
void timer_run(void)
{
	unsigned char id;
	//
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
     21a:	80 91 64 00 	lds	r24, 0x0064
     21e:	90 91 65 00 	lds	r25, 0x0065
     222:	87 70       	andi	r24, 0x07	; 7
     224:	99 27       	eor	r25, r25
     226:	90 93 65 00 	sts	0x0065, r25
     22a:	80 93 64 00 	sts	0x0064, r24
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
		{
			if(boot_time >= soft_timer[soft_timer_id].overtime)
     22e:	80 91 82 01 	lds	r24, 0x0182
     232:	90 91 83 01 	lds	r25, 0x0183
     236:	a0 91 84 01 	lds	r26, 0x0184
     23a:	b0 91 85 01 	lds	r27, 0x0185
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     23e:	20 91 64 00 	lds	r18, 0x0064
     242:	30 91 65 00 	lds	r19, 0x0065
     246:	f9 01       	movw	r30, r18
     248:	ee 0f       	add	r30, r30
     24a:	ff 1f       	adc	r31, r31
     24c:	e2 0f       	add	r30, r18
     24e:	f3 1f       	adc	r31, r19
     250:	ee 0f       	add	r30, r30
     252:	ff 1f       	adc	r31, r31
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	ea 59       	subi	r30, 0x9A	; 154
     25a:	ff 4f       	sbci	r31, 0xFF	; 255
     25c:	23 85       	ldd	r18, Z+11	; 0x0b
     25e:	21 30       	cpi	r18, 0x01	; 1
     260:	09 f4       	brne	.+2      	; 0x264 <timer_run+0x4a>
     262:	25 c1       	rjmp	.+586    	; 0x4ae <__stack+0x4f>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     264:	20 91 64 00 	lds	r18, 0x0064
     268:	30 91 65 00 	lds	r19, 0x0065
     26c:	2f 5f       	subi	r18, 0xFF	; 255
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	30 93 65 00 	sts	0x0065, r19
     274:	20 93 64 00 	sts	0x0064, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     278:	20 91 64 00 	lds	r18, 0x0064
     27c:	30 91 65 00 	lds	r19, 0x0065
     280:	27 70       	andi	r18, 0x07	; 7
     282:	33 27       	eor	r19, r19
     284:	30 93 65 00 	sts	0x0065, r19
     288:	20 93 64 00 	sts	0x0064, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     28c:	20 91 64 00 	lds	r18, 0x0064
     290:	30 91 65 00 	lds	r19, 0x0065
     294:	f9 01       	movw	r30, r18
     296:	ee 0f       	add	r30, r30
     298:	ff 1f       	adc	r31, r31
     29a:	e2 0f       	add	r30, r18
     29c:	f3 1f       	adc	r31, r19
     29e:	ee 0f       	add	r30, r30
     2a0:	ff 1f       	adc	r31, r31
     2a2:	ee 0f       	add	r30, r30
     2a4:	ff 1f       	adc	r31, r31
     2a6:	ea 59       	subi	r30, 0x9A	; 154
     2a8:	ff 4f       	sbci	r31, 0xFF	; 255
     2aa:	23 85       	ldd	r18, Z+11	; 0x0b
     2ac:	21 30       	cpi	r18, 0x01	; 1
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <timer_run+0x98>
     2b0:	a6 c1       	rjmp	.+844    	; 0x5fe <__stack+0x19f>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     2b2:	20 91 64 00 	lds	r18, 0x0064
     2b6:	30 91 65 00 	lds	r19, 0x0065
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	30 93 65 00 	sts	0x0065, r19
     2c2:	20 93 64 00 	sts	0x0064, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     2c6:	20 91 64 00 	lds	r18, 0x0064
     2ca:	30 91 65 00 	lds	r19, 0x0065
     2ce:	27 70       	andi	r18, 0x07	; 7
     2d0:	33 27       	eor	r19, r19
     2d2:	30 93 65 00 	sts	0x0065, r19
     2d6:	20 93 64 00 	sts	0x0064, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     2da:	20 91 64 00 	lds	r18, 0x0064
     2de:	30 91 65 00 	lds	r19, 0x0065
     2e2:	f9 01       	movw	r30, r18
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	e2 0f       	add	r30, r18
     2ea:	f3 1f       	adc	r31, r19
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	ea 59       	subi	r30, 0x9A	; 154
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	23 85       	ldd	r18, Z+11	; 0x0b
     2fa:	21 30       	cpi	r18, 0x01	; 1
     2fc:	09 f4       	brne	.+2      	; 0x300 <timer_run+0xe6>
     2fe:	99 c1       	rjmp	.+818    	; 0x632 <__stack+0x1d3>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     300:	20 91 64 00 	lds	r18, 0x0064
     304:	30 91 65 00 	lds	r19, 0x0065
     308:	2f 5f       	subi	r18, 0xFF	; 255
     30a:	3f 4f       	sbci	r19, 0xFF	; 255
     30c:	30 93 65 00 	sts	0x0065, r19
     310:	20 93 64 00 	sts	0x0064, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     314:	20 91 64 00 	lds	r18, 0x0064
     318:	30 91 65 00 	lds	r19, 0x0065
     31c:	27 70       	andi	r18, 0x07	; 7
     31e:	33 27       	eor	r19, r19
     320:	30 93 65 00 	sts	0x0065, r19
     324:	20 93 64 00 	sts	0x0064, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     328:	20 91 64 00 	lds	r18, 0x0064
     32c:	30 91 65 00 	lds	r19, 0x0065
     330:	f9 01       	movw	r30, r18
     332:	ee 0f       	add	r30, r30
     334:	ff 1f       	adc	r31, r31
     336:	e2 0f       	add	r30, r18
     338:	f3 1f       	adc	r31, r19
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	ee 0f       	add	r30, r30
     340:	ff 1f       	adc	r31, r31
     342:	ea 59       	subi	r30, 0x9A	; 154
     344:	ff 4f       	sbci	r31, 0xFF	; 255
     346:	23 85       	ldd	r18, Z+11	; 0x0b
     348:	21 30       	cpi	r18, 0x01	; 1
     34a:	09 f4       	brne	.+2      	; 0x34e <timer_run+0x134>
     34c:	8c c1       	rjmp	.+792    	; 0x666 <__stack+0x207>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     34e:	20 91 64 00 	lds	r18, 0x0064
     352:	30 91 65 00 	lds	r19, 0x0065
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	30 93 65 00 	sts	0x0065, r19
     35e:	20 93 64 00 	sts	0x0064, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     362:	20 91 64 00 	lds	r18, 0x0064
     366:	30 91 65 00 	lds	r19, 0x0065
     36a:	27 70       	andi	r18, 0x07	; 7
     36c:	33 27       	eor	r19, r19
     36e:	30 93 65 00 	sts	0x0065, r19
     372:	20 93 64 00 	sts	0x0064, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     376:	20 91 64 00 	lds	r18, 0x0064
     37a:	30 91 65 00 	lds	r19, 0x0065
     37e:	f9 01       	movw	r30, r18
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e2 0f       	add	r30, r18
     386:	f3 1f       	adc	r31, r19
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	ea 59       	subi	r30, 0x9A	; 154
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	23 85       	ldd	r18, Z+11	; 0x0b
     396:	21 30       	cpi	r18, 0x01	; 1
     398:	09 f4       	brne	.+2      	; 0x39c <timer_run+0x182>
     39a:	7f c1       	rjmp	.+766    	; 0x69a <__stack+0x23b>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     39c:	20 91 64 00 	lds	r18, 0x0064
     3a0:	30 91 65 00 	lds	r19, 0x0065
     3a4:	2f 5f       	subi	r18, 0xFF	; 255
     3a6:	3f 4f       	sbci	r19, 0xFF	; 255
     3a8:	30 93 65 00 	sts	0x0065, r19
     3ac:	20 93 64 00 	sts	0x0064, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     3b0:	20 91 64 00 	lds	r18, 0x0064
     3b4:	30 91 65 00 	lds	r19, 0x0065
     3b8:	27 70       	andi	r18, 0x07	; 7
     3ba:	33 27       	eor	r19, r19
     3bc:	30 93 65 00 	sts	0x0065, r19
     3c0:	20 93 64 00 	sts	0x0064, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     3c4:	20 91 64 00 	lds	r18, 0x0064
     3c8:	30 91 65 00 	lds	r19, 0x0065
     3cc:	f9 01       	movw	r30, r18
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e2 0f       	add	r30, r18
     3d4:	f3 1f       	adc	r31, r19
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	ea 59       	subi	r30, 0x9A	; 154
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	23 85       	ldd	r18, Z+11	; 0x0b
     3e4:	21 30       	cpi	r18, 0x01	; 1
     3e6:	09 f4       	brne	.+2      	; 0x3ea <timer_run+0x1d0>
     3e8:	72 c1       	rjmp	.+740    	; 0x6ce <__stack+0x26f>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     3ea:	20 91 64 00 	lds	r18, 0x0064
     3ee:	30 91 65 00 	lds	r19, 0x0065
     3f2:	2f 5f       	subi	r18, 0xFF	; 255
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	30 93 65 00 	sts	0x0065, r19
     3fa:	20 93 64 00 	sts	0x0064, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     3fe:	20 91 64 00 	lds	r18, 0x0064
     402:	30 91 65 00 	lds	r19, 0x0065
     406:	27 70       	andi	r18, 0x07	; 7
     408:	33 27       	eor	r19, r19
     40a:	30 93 65 00 	sts	0x0065, r19
     40e:	20 93 64 00 	sts	0x0064, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     412:	20 91 64 00 	lds	r18, 0x0064
     416:	30 91 65 00 	lds	r19, 0x0065
     41a:	f9 01       	movw	r30, r18
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	e2 0f       	add	r30, r18
     422:	f3 1f       	adc	r31, r19
     424:	ee 0f       	add	r30, r30
     426:	ff 1f       	adc	r31, r31
     428:	ee 0f       	add	r30, r30
     42a:	ff 1f       	adc	r31, r31
     42c:	ea 59       	subi	r30, 0x9A	; 154
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	23 85       	ldd	r18, Z+11	; 0x0b
     432:	21 30       	cpi	r18, 0x01	; 1
     434:	09 f4       	brne	.+2      	; 0x438 <timer_run+0x21e>
     436:	65 c1       	rjmp	.+714    	; 0x702 <__stack+0x2a3>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     438:	20 91 64 00 	lds	r18, 0x0064
     43c:	30 91 65 00 	lds	r19, 0x0065
     440:	2f 5f       	subi	r18, 0xFF	; 255
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	30 93 65 00 	sts	0x0065, r19
     448:	20 93 64 00 	sts	0x0064, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     44c:	20 91 64 00 	lds	r18, 0x0064
     450:	30 91 65 00 	lds	r19, 0x0065
     454:	27 70       	andi	r18, 0x07	; 7
     456:	33 27       	eor	r19, r19
     458:	30 93 65 00 	sts	0x0065, r19
     45c:	20 93 64 00 	sts	0x0064, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     460:	20 91 64 00 	lds	r18, 0x0064
     464:	30 91 65 00 	lds	r19, 0x0065
     468:	f9 01       	movw	r30, r18
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	e2 0f       	add	r30, r18
     470:	f3 1f       	adc	r31, r19
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	ee 0f       	add	r30, r30
     478:	ff 1f       	adc	r31, r31
     47a:	ea 59       	subi	r30, 0x9A	; 154
     47c:	ff 4f       	sbci	r31, 0xFF	; 255
     47e:	23 85       	ldd	r18, Z+11	; 0x0b
     480:	21 30       	cpi	r18, 0x01	; 1
     482:	09 f4       	brne	.+2      	; 0x486 <__stack+0x27>
     484:	58 c1       	rjmp	.+688    	; 0x736 <__stack+0x2d7>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     486:	80 91 64 00 	lds	r24, 0x0064
     48a:	90 91 65 00 	lds	r25, 0x0065
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	90 93 65 00 	sts	0x0065, r25
     494:	80 93 64 00 	sts	0x0064, r24
		soft_timer_id %= SOFT_TIMER_NUM;	
     498:	80 91 64 00 	lds	r24, 0x0064
     49c:	90 91 65 00 	lds	r25, 0x0065
     4a0:	87 70       	andi	r24, 0x07	; 7
     4a2:	99 27       	eor	r25, r25
     4a4:	90 93 65 00 	sts	0x0065, r25
     4a8:	80 93 64 00 	sts	0x0064, r24
     4ac:	08 95       	ret
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
		{
			if(boot_time >= soft_timer[soft_timer_id].overtime)
     4ae:	20 91 64 00 	lds	r18, 0x0064
     4b2:	30 91 65 00 	lds	r19, 0x0065
     4b6:	f9 01       	movw	r30, r18
     4b8:	ee 0f       	add	r30, r30
     4ba:	ff 1f       	adc	r31, r31
     4bc:	e2 0f       	add	r30, r18
     4be:	f3 1f       	adc	r31, r19
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	ea 59       	subi	r30, 0x9A	; 154
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	46 81       	ldd	r20, Z+6	; 0x06
     4ce:	57 81       	ldd	r21, Z+7	; 0x07
     4d0:	60 85       	ldd	r22, Z+8	; 0x08
     4d2:	71 85       	ldd	r23, Z+9	; 0x09
     4d4:	84 17       	cp	r24, r20
     4d6:	95 07       	cpc	r25, r21
     4d8:	a6 07       	cpc	r26, r22
     4da:	b7 07       	cpc	r27, r23
     4dc:	08 f4       	brcc	.+2      	; 0x4e0 <__stack+0x81>
     4de:	c2 ce       	rjmp	.-636    	; 0x264 <timer_run+0x4a>
			{
				//根据重试参数判断是否关闭定时器
				if(-1 != soft_timer[soft_timer_id].retry)
     4e0:	80 91 64 00 	lds	r24, 0x0064
     4e4:	90 91 65 00 	lds	r25, 0x0065
     4e8:	fc 01       	movw	r30, r24
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	e8 0f       	add	r30, r24
     4f0:	f9 1f       	adc	r31, r25
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	ea 59       	subi	r30, 0x9A	; 154
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	82 85       	ldd	r24, Z+10	; 0x0a
     500:	8f 3f       	cpi	r24, 0xFF	; 255
     502:	29 f1       	breq	.+74     	; 0x54e <__stack+0xef>
				{
					//重试次数为-1代表一直运行
					if(soft_timer[soft_timer_id].retry > 0)
     504:	80 91 64 00 	lds	r24, 0x0064
     508:	90 91 65 00 	lds	r25, 0x0065
     50c:	fc 01       	movw	r30, r24
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e8 0f       	add	r30, r24
     514:	f9 1f       	adc	r31, r25
     516:	ee 0f       	add	r30, r30
     518:	ff 1f       	adc	r31, r31
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	ea 59       	subi	r30, 0x9A	; 154
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	82 85       	ldd	r24, Z+10	; 0x0a
     524:	18 16       	cp	r1, r24
     526:	0c f0       	brlt	.+2      	; 0x52a <__stack+0xcb>
     528:	20 c1       	rjmp	.+576    	; 0x76a <__stack+0x30b>
					{
						//减重试次数
						soft_timer[soft_timer_id].retry--;
     52a:	80 91 64 00 	lds	r24, 0x0064
     52e:	90 91 65 00 	lds	r25, 0x0065
     532:	fc 01       	movw	r30, r24
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	e8 0f       	add	r30, r24
     53a:	f9 1f       	adc	r31, r25
     53c:	ee 0f       	add	r30, r30
     53e:	ff 1f       	adc	r31, r31
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	ea 59       	subi	r30, 0x9A	; 154
     546:	ff 4f       	sbci	r31, 0xFF	; 255
     548:	82 85       	ldd	r24, Z+10	; 0x0a
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	82 87       	std	Z+10, r24	; 0x0a
						soft_timer[soft_timer_id].enable = FALSE;
					}					
				}
				//
				//在执行定时器服务程序的过程中能够再次设置定时器				
				OnTimer(soft_timer[soft_timer_id].id);//定时器溢出处理
     54e:	80 91 64 00 	lds	r24, 0x0064
     552:	90 91 65 00 	lds	r25, 0x0065
     556:	fc 01       	movw	r30, r24
     558:	ee 0f       	add	r30, r30
     55a:	ff 1f       	adc	r31, r31
     55c:	e8 0f       	add	r30, r24
     55e:	f9 1f       	adc	r31, r25
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	ea 59       	subi	r30, 0x9A	; 154
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	80 81       	ld	r24, Z
     56e:	91 81       	ldd	r25, Z+1	; 0x01
     570:	25 d7       	rcall	.+3658   	; 0x13bc <OnTimer>
				//
				//定时器服务程序运行时间不算在定时时间内
				if(TRUE == soft_timer[soft_timer_id].enable)
     572:	80 91 64 00 	lds	r24, 0x0064
     576:	90 91 65 00 	lds	r25, 0x0065
     57a:	fc 01       	movw	r30, r24
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	e8 0f       	add	r30, r24
     582:	f9 1f       	adc	r31, r25
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	ea 59       	subi	r30, 0x9A	; 154
     58e:	ff 4f       	sbci	r31, 0xFF	; 255
     590:	83 85       	ldd	r24, Z+11	; 0x0b
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	09 f0       	breq	.+2      	; 0x598 <__stack+0x139>
     596:	77 cf       	rjmp	.-274    	; 0x486 <__stack+0x27>
				{
					//定时继续运行，重置定时器时间
					soft_timer[soft_timer_id].overtime = soft_timer[soft_timer_id].ms + boot_time;
     598:	20 91 64 00 	lds	r18, 0x0064
     59c:	30 91 65 00 	lds	r19, 0x0065
     5a0:	80 91 64 00 	lds	r24, 0x0064
     5a4:	90 91 65 00 	lds	r25, 0x0065
     5a8:	fc 01       	movw	r30, r24
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	e8 0f       	add	r30, r24
     5b0:	f9 1f       	adc	r31, r25
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	ea 59       	subi	r30, 0x9A	; 154
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	82 81       	ldd	r24, Z+2	; 0x02
     5c0:	93 81       	ldd	r25, Z+3	; 0x03
     5c2:	a4 81       	ldd	r26, Z+4	; 0x04
     5c4:	b5 81       	ldd	r27, Z+5	; 0x05
     5c6:	40 91 82 01 	lds	r20, 0x0182
     5ca:	50 91 83 01 	lds	r21, 0x0183
     5ce:	60 91 84 01 	lds	r22, 0x0184
     5d2:	70 91 85 01 	lds	r23, 0x0185
     5d6:	84 0f       	add	r24, r20
     5d8:	95 1f       	adc	r25, r21
     5da:	a6 1f       	adc	r26, r22
     5dc:	b7 1f       	adc	r27, r23
     5de:	f9 01       	movw	r30, r18
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	e2 0f       	add	r30, r18
     5e6:	f3 1f       	adc	r31, r19
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	ee 0f       	add	r30, r30
     5ee:	ff 1f       	adc	r31, r31
     5f0:	ea 59       	subi	r30, 0x9A	; 154
     5f2:	ff 4f       	sbci	r31, 0xFF	; 255
     5f4:	86 83       	std	Z+6, r24	; 0x06
     5f6:	97 83       	std	Z+7, r25	; 0x07
     5f8:	a0 87       	std	Z+8, r26	; 0x08
     5fa:	b1 87       	std	Z+9, r27	; 0x09
     5fc:	44 cf       	rjmp	.-376    	; 0x486 <__stack+0x27>
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
		{
			if(boot_time >= soft_timer[soft_timer_id].overtime)
     5fe:	20 91 64 00 	lds	r18, 0x0064
     602:	30 91 65 00 	lds	r19, 0x0065
     606:	f9 01       	movw	r30, r18
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	e2 0f       	add	r30, r18
     60e:	f3 1f       	adc	r31, r19
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	ea 59       	subi	r30, 0x9A	; 154
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	46 81       	ldd	r20, Z+6	; 0x06
     61e:	57 81       	ldd	r21, Z+7	; 0x07
     620:	60 85       	ldd	r22, Z+8	; 0x08
     622:	71 85       	ldd	r23, Z+9	; 0x09
     624:	84 17       	cp	r24, r20
     626:	95 07       	cpc	r25, r21
     628:	a6 07       	cpc	r26, r22
     62a:	b7 07       	cpc	r27, r23
     62c:	08 f4       	brcc	.+2      	; 0x630 <__stack+0x1d1>
     62e:	41 ce       	rjmp	.-894    	; 0x2b2 <timer_run+0x98>
     630:	57 cf       	rjmp	.-338    	; 0x4e0 <__stack+0x81>
     632:	20 91 64 00 	lds	r18, 0x0064
     636:	30 91 65 00 	lds	r19, 0x0065
     63a:	f9 01       	movw	r30, r18
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	e2 0f       	add	r30, r18
     642:	f3 1f       	adc	r31, r19
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	ea 59       	subi	r30, 0x9A	; 154
     64e:	ff 4f       	sbci	r31, 0xFF	; 255
     650:	46 81       	ldd	r20, Z+6	; 0x06
     652:	57 81       	ldd	r21, Z+7	; 0x07
     654:	60 85       	ldd	r22, Z+8	; 0x08
     656:	71 85       	ldd	r23, Z+9	; 0x09
     658:	84 17       	cp	r24, r20
     65a:	95 07       	cpc	r25, r21
     65c:	a6 07       	cpc	r26, r22
     65e:	b7 07       	cpc	r27, r23
     660:	08 f4       	brcc	.+2      	; 0x664 <__stack+0x205>
     662:	4e ce       	rjmp	.-868    	; 0x300 <timer_run+0xe6>
     664:	3d cf       	rjmp	.-390    	; 0x4e0 <__stack+0x81>
     666:	20 91 64 00 	lds	r18, 0x0064
     66a:	30 91 65 00 	lds	r19, 0x0065
     66e:	f9 01       	movw	r30, r18
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	e2 0f       	add	r30, r18
     676:	f3 1f       	adc	r31, r19
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	ea 59       	subi	r30, 0x9A	; 154
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	46 81       	ldd	r20, Z+6	; 0x06
     686:	57 81       	ldd	r21, Z+7	; 0x07
     688:	60 85       	ldd	r22, Z+8	; 0x08
     68a:	71 85       	ldd	r23, Z+9	; 0x09
     68c:	84 17       	cp	r24, r20
     68e:	95 07       	cpc	r25, r21
     690:	a6 07       	cpc	r26, r22
     692:	b7 07       	cpc	r27, r23
     694:	08 f4       	brcc	.+2      	; 0x698 <__stack+0x239>
     696:	5b ce       	rjmp	.-842    	; 0x34e <timer_run+0x134>
     698:	23 cf       	rjmp	.-442    	; 0x4e0 <__stack+0x81>
     69a:	20 91 64 00 	lds	r18, 0x0064
     69e:	30 91 65 00 	lds	r19, 0x0065
     6a2:	f9 01       	movw	r30, r18
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	e2 0f       	add	r30, r18
     6aa:	f3 1f       	adc	r31, r19
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	ea 59       	subi	r30, 0x9A	; 154
     6b6:	ff 4f       	sbci	r31, 0xFF	; 255
     6b8:	46 81       	ldd	r20, Z+6	; 0x06
     6ba:	57 81       	ldd	r21, Z+7	; 0x07
     6bc:	60 85       	ldd	r22, Z+8	; 0x08
     6be:	71 85       	ldd	r23, Z+9	; 0x09
     6c0:	84 17       	cp	r24, r20
     6c2:	95 07       	cpc	r25, r21
     6c4:	a6 07       	cpc	r26, r22
     6c6:	b7 07       	cpc	r27, r23
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <__stack+0x26d>
     6ca:	68 ce       	rjmp	.-816    	; 0x39c <timer_run+0x182>
     6cc:	09 cf       	rjmp	.-494    	; 0x4e0 <__stack+0x81>
     6ce:	20 91 64 00 	lds	r18, 0x0064
     6d2:	30 91 65 00 	lds	r19, 0x0065
     6d6:	f9 01       	movw	r30, r18
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	e2 0f       	add	r30, r18
     6de:	f3 1f       	adc	r31, r19
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	ea 59       	subi	r30, 0x9A	; 154
     6ea:	ff 4f       	sbci	r31, 0xFF	; 255
     6ec:	46 81       	ldd	r20, Z+6	; 0x06
     6ee:	57 81       	ldd	r21, Z+7	; 0x07
     6f0:	60 85       	ldd	r22, Z+8	; 0x08
     6f2:	71 85       	ldd	r23, Z+9	; 0x09
     6f4:	84 17       	cp	r24, r20
     6f6:	95 07       	cpc	r25, r21
     6f8:	a6 07       	cpc	r26, r22
     6fa:	b7 07       	cpc	r27, r23
     6fc:	08 f4       	brcc	.+2      	; 0x700 <__stack+0x2a1>
     6fe:	75 ce       	rjmp	.-790    	; 0x3ea <timer_run+0x1d0>
     700:	ef ce       	rjmp	.-546    	; 0x4e0 <__stack+0x81>
     702:	20 91 64 00 	lds	r18, 0x0064
     706:	30 91 65 00 	lds	r19, 0x0065
     70a:	f9 01       	movw	r30, r18
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	e2 0f       	add	r30, r18
     712:	f3 1f       	adc	r31, r19
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	ee 0f       	add	r30, r30
     71a:	ff 1f       	adc	r31, r31
     71c:	ea 59       	subi	r30, 0x9A	; 154
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	46 81       	ldd	r20, Z+6	; 0x06
     722:	57 81       	ldd	r21, Z+7	; 0x07
     724:	60 85       	ldd	r22, Z+8	; 0x08
     726:	71 85       	ldd	r23, Z+9	; 0x09
     728:	84 17       	cp	r24, r20
     72a:	95 07       	cpc	r25, r21
     72c:	a6 07       	cpc	r26, r22
     72e:	b7 07       	cpc	r27, r23
     730:	08 f4       	brcc	.+2      	; 0x734 <__stack+0x2d5>
     732:	82 ce       	rjmp	.-764    	; 0x438 <timer_run+0x21e>
     734:	d5 ce       	rjmp	.-598    	; 0x4e0 <__stack+0x81>
     736:	20 91 64 00 	lds	r18, 0x0064
     73a:	30 91 65 00 	lds	r19, 0x0065
     73e:	f9 01       	movw	r30, r18
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	e2 0f       	add	r30, r18
     746:	f3 1f       	adc	r31, r19
     748:	ee 0f       	add	r30, r30
     74a:	ff 1f       	adc	r31, r31
     74c:	ee 0f       	add	r30, r30
     74e:	ff 1f       	adc	r31, r31
     750:	ea 59       	subi	r30, 0x9A	; 154
     752:	ff 4f       	sbci	r31, 0xFF	; 255
     754:	46 81       	ldd	r20, Z+6	; 0x06
     756:	57 81       	ldd	r21, Z+7	; 0x07
     758:	60 85       	ldd	r22, Z+8	; 0x08
     75a:	71 85       	ldd	r23, Z+9	; 0x09
     75c:	84 17       	cp	r24, r20
     75e:	95 07       	cpc	r25, r21
     760:	a6 07       	cpc	r26, r22
     762:	b7 07       	cpc	r27, r23
     764:	08 f4       	brcc	.+2      	; 0x768 <__stack+0x309>
     766:	8f ce       	rjmp	.-738    	; 0x486 <__stack+0x27>
     768:	bb ce       	rjmp	.-650    	; 0x4e0 <__stack+0x81>
						soft_timer[soft_timer_id].retry--;
					}
					else
					{
						//关闭定时器
						soft_timer[soft_timer_id].enable = FALSE;
     76a:	80 91 64 00 	lds	r24, 0x0064
     76e:	90 91 65 00 	lds	r25, 0x0065
     772:	fc 01       	movw	r30, r24
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	e8 0f       	add	r30, r24
     77a:	f9 1f       	adc	r31, r25
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	ea 59       	subi	r30, 0x9A	; 154
     786:	ff 4f       	sbci	r31, 0xFF	; 255
     788:	13 86       	std	Z+11, r1	; 0x0b
     78a:	e1 ce       	rjmp	.-574    	; 0x54e <__stack+0xef>

0000078c <hardward_init>:
}
/////////////////////////////////////////////////////////////
void hardward_init(void)
{
	//硬件初始化程序,设置固定的端口方向,串口属性,AD属性等
	wdt_disable();
     78c:	88 e1       	ldi	r24, 0x18	; 24
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	80 93 41 00 	sts	0x0041, r24
     796:	10 92 41 00 	sts	0x0041, r1
     79a:	0f be       	out	0x3f, r0	; 63
	//I/O设置
	PORTB=0;//先设置所有的口为高阻
     79c:	18 ba       	out	0x18, r1	; 24
	//
    DDRB = _BV(PB1)|_BV(PB2);
     79e:	86 e0       	ldi	r24, 0x06	; 6
     7a0:	87 bb       	out	0x17, r24	; 23
    PORTD = _BV(PD2)|_BV(PD3);
     7a2:	8c e0       	ldi	r24, 0x0C	; 12
     7a4:	82 bb       	out	0x12, r24	; 18
	DDRD = _BV(PD7);//根据需要设置输出口
     7a6:	90 e8       	ldi	r25, 0x80	; 128
     7a8:	91 bb       	out	0x11, r25	; 17
    PORTC = _BV(PC2)|_BV(PC3);
     7aa:	85 bb       	out	0x15, r24	; 21
    DDRC = _BV(PC4)|_BV(PC5);
     7ac:	80 e3       	ldi	r24, 0x30	; 48
     7ae:	84 bb       	out	0x14, r24	; 20
	//定时器0
	TCCR0 = 0x03;//64分频
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	83 bf       	out	0x33, r24	; 51
	{		
		TCNT0 = 255-62;//4MHz时钟,计数62次,约1毫秒
	}
	#elif F_CPU == F_16M
	{
		TCNT0 = 255-250;//16MHz时钟,计数250次,约1毫秒
     7b4:	85 e0       	ldi	r24, 0x05	; 5
     7b6:	82 bf       	out	0x32, r24	; 50
	#else
	{
		#error "F_CPU error"
	}
	#endif
	TIMSK |=_BV(TOIE0);//定时器0溢出中断使能
     7b8:	89 b7       	in	r24, 0x39	; 57
     7ba:	81 60       	ori	r24, 0x01	; 1
     7bc:	89 bf       	out	0x39, r24	; 57
	//定时器1
	TCCR1A = 0xf2;//oc1a,oc1b匹配时置1,达到TOP时清零
     7be:	82 ef       	ldi	r24, 0xF2	; 242
     7c0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x19;//时钟不分频
     7c2:	89 e1       	ldi	r24, 0x19	; 25
     7c4:	8e bd       	out	0x2e, r24	; 46
	ICR1 = PWM_TOP;//TOP//4kHz
     7c6:	80 e9       	ldi	r24, 0x90	; 144
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	97 bd       	out	0x27, r25	; 39
     7cc:	86 bd       	out	0x26, r24	; 38
    OCR1A = PWM_TOP/2;//电压输出初始占空比50%,2.5v
     7ce:	88 ec       	ldi	r24, 0xC8	; 200
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9b bd       	out	0x2b, r25	; 43
     7d4:	8a bd       	out	0x2a, r24	; 42
    OCR1B = PWM_LOW;//触发脉冲,占空比LOW_PULSE/PWM_TOP(低电平时间)
     7d6:	84 e0       	ldi	r24, 0x04	; 4
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	99 bd       	out	0x29, r25	; 41
     7dc:	88 bd       	out	0x28, r24	; 40
	ADMUX |= ICM7555_AD;
	ADCSRA = 0x8f;//1000 1111//允许ad转换,单次转换方式,允许中断,128分频
	#endif
	//
    //外中断
    MCUCR &= 0xf0;
     7de:	85 b7       	in	r24, 0x35	; 53
     7e0:	80 7f       	andi	r24, 0xF0	; 240
     7e2:	85 bf       	out	0x35, r24	; 53
    MCUCR |= 0x08;//外中断1下降沿触发
     7e4:	85 b7       	in	r24, 0x35	; 53
     7e6:	88 60       	ori	r24, 0x08	; 8
     7e8:	85 bf       	out	0x35, r24	; 53
    GICR &= 0x3f;
     7ea:	8b b7       	in	r24, 0x3b	; 59
     7ec:	8f 73       	andi	r24, 0x3F	; 63
     7ee:	8b bf       	out	0x3b, r24	; 59
    GICR |= _BV(INT1);//外中断1使能
     7f0:	8b b7       	in	r24, 0x3b	; 59
     7f2:	80 68       	ori	r24, 0x80	; 128
     7f4:	8b bf       	out	0x3b, r24	; 59
	//
	#if USART_TEST == FALSE
	{
		//38461.5 Bd //0.2%
		UBRRH = 0;
     7f6:	10 bc       	out	0x20, r1	; 32
		{
			UBRRL = 12;
		}
		#elif F_CPU == F_16M
		{
			UBRRL = 51;
     7f8:	83 e3       	ldi	r24, 0x33	; 51
     7fa:	89 b9       	out	0x09, r24	; 9
		#else
		{
			#error "F_CPU error"
		}
		#endif
		UCSRA = (1<<U2X);//波特率分频因子从16降到8
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	8b b9       	out	0x0b, r24	; 11
		UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);//接收和发送中断使能
     800:	88 ed       	ldi	r24, 0xD8	; 216
     802:	8a b9       	out	0x0a, r24	; 10
		UCSRC = (1<<URSEL)|(3<<UCSZ0);//8N1
     804:	86 e8       	ldi	r24, 0x86	; 134
     806:	80 bd       	out	0x20, r24	; 32
		b485en = 0;//接收使能,发送禁止
     808:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     80a:	8f e1       	ldi	r24, 0x1F	; 31
     80c:	9e e4       	ldi	r25, 0x4E	; 78
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <hardward_init+0x82>
     812:	00 c0       	rjmp	.+0      	; 0x814 <hardward_init+0x88>
     814:	00 00       	nop
     816:	08 95       	ret

00000818 <softward_init>:
	_delay_ms(5);
}
////////////////////////////////////////////////////////////////
void softward_init(void)
{	
    MCUCR &= 0x0f;//休眠禁止,空闲模式
     818:	85 b7       	in	r24, 0x35	; 53
     81a:	8f 70       	andi	r24, 0x0F	; 15
     81c:	85 bf       	out	0x35, r24	; 53
    //
    ms1_counter = 0;
     81e:	10 92 61 01 	sts	0x0161, r1
    ms10_counter = 0;
     822:	10 92 62 01 	sts	0x0162, r1
    ms100_counter = 0;
     826:	10 92 88 01 	sts	0x0188, r1
    s1_counter = 0;
     82a:	10 92 86 01 	sts	0x0186, r1
    m_ms = 0;
     82e:	10 92 64 01 	sts	0x0164, r1
     832:	10 92 63 01 	sts	0x0163, r1
    m_minute = 0;
     836:	10 92 6b 01 	sts	0x016B, r1
     83a:	10 92 6a 01 	sts	0x016A, r1
	//
    m_pulse_counter = 0;//检测脉冲个数
     83e:	10 92 8c 01 	sts	0x018C, r1
     842:	10 92 8b 01 	sts	0x018B, r1
    m_pulse_value.ml = 0;//检测脉冲宽度值
     846:	10 92 d0 00 	sts	0x00D0, r1
     84a:	10 92 d1 00 	sts	0x00D1, r1
     84e:	10 92 d2 00 	sts	0x00D2, r1
     852:	10 92 d3 00 	sts	0x00D3, r1
    //
	m_cgq_ack=0;
     856:	10 92 67 01 	sts	0x0167, r1
    //
    m_pulse_value_bak.ms[0] = PULSE_TOP/2;
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	9b e4       	ldi	r25, 0x4B	; 75
     85e:	90 93 c9 00 	sts	0x00C9, r25
     862:	80 93 c8 00 	sts	0x00C8, r24
    m_pulse_value_bak.ms[1] = PULSE_TOP/2;
     866:	90 93 cb 00 	sts	0x00CB, r25
     86a:	80 93 ca 00 	sts	0x00CA, r24
    m_pulse_value_bak.ms[2] = PULSE_TOP/2;
     86e:	90 93 cd 00 	sts	0x00CD, r25
     872:	80 93 cc 00 	sts	0x00CC, r24
    m_pulse_value_bak.ms[3] = PULSE_TOP/2;
     876:	90 93 cf 00 	sts	0x00CF, r25
     87a:	80 93 ce 00 	sts	0x00CE, r24
    m_ad_value_bak.ms[2] = PULSE_TOP/2;
    m_ad_value_bak.ms[3] = PULSE_TOP/2;
	#endif

	//
	m_pulse_value_rc = PULSE_BOTTOM;
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	99 e1       	ldi	r25, 0x19	; 25
     882:	90 93 c7 00 	sts	0x00C7, r25
     886:	80 93 c6 00 	sts	0x00C6, r24
	m_ad_value_rc = PULSE_BOTTOM;
     88a:	90 93 6d 01 	sts	0x016D, r25
     88e:	80 93 6c 01 	sts	0x016C, r24
	//
	uart_frame_head_ok = 0;
     892:	10 92 68 01 	sts	0x0168, r1
	command_gaoliaowei = 0;
     896:	10 92 65 01 	sts	0x0165, r1
	command_diliaowei = 0;
     89a:	10 92 66 01 	sts	0x0166, r1
	uart_send_enable = 0;
     89e:	10 92 87 01 	sts	0x0187, r1
	//
	pulse_value_counter=0;
     8a2:	10 92 8a 01 	sts	0x018A, r1
	pulse_value_write_id=0;
     8a6:	10 92 69 01 	sts	0x0169, r1
	pulse_value_read_id=0;
     8aa:	10 92 df 00 	sts	0x00DF, r1
	//
	boot_time = 0;
     8ae:	10 92 82 01 	sts	0x0182, r1
     8b2:	10 92 83 01 	sts	0x0183, r1
     8b6:	10 92 84 01 	sts	0x0184, r1
     8ba:	10 92 85 01 	sts	0x0185, r1
	boot_time_sub = 0;
     8be:	10 92 89 01 	sts	0x0189, r1
     8c2:	08 95       	ret

000008c4 <wdt_reset_mcu>:
}
////////////////////////////////////////////////////////////////
void wdt_reset_mcu(void)
{
	//通过看门狗来复位单片机
	wdt_reset();
     8c4:	a8 95       	wdr
	wdt_disable();
     8c6:	88 e1       	ldi	r24, 0x18	; 24
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	80 93 41 00 	sts	0x0041, r24
     8d0:	10 92 41 00 	sts	0x0041, r1
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	2f ef       	ldi	r18, 0xFF	; 255
     8d8:	80 e7       	ldi	r24, 0x70	; 112
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	21 50       	subi	r18, 0x01	; 1
     8de:	80 40       	sbci	r24, 0x00	; 0
     8e0:	90 40       	sbci	r25, 0x00	; 0
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <wdt_reset_mcu+0x18>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <wdt_reset_mcu+0x22>
     8e6:	00 00       	nop
	_delay_ms(50);
	cli();//看门狗复位单片机
     8e8:	f8 94       	cli
	wdt_enable(WDTO_120MS);
     8ea:	2b e0       	ldi	r18, 0x0B	; 11
     8ec:	88 e1       	ldi	r24, 0x18	; 24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	a8 95       	wdr
     8f6:	80 93 41 00 	sts	0x0041, r24
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	20 93 41 00 	sts	0x0041, r18
     900:	ff cf       	rjmp	.-2      	; 0x900 <wdt_reset_mcu+0x3c>

00000902 <eeprom_write_word_2>:
	//
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
     902:	cf 93       	push	r28
	unsigned m_sreg = SREG;
     904:	cf b7       	in	r28, 0x3f	; 63
	cli();
     906:	f8 94       	cli
	wdt_reset();
     908:	a8 95       	wdr
	eeprom_busy_wait();
     90a:	e1 99       	sbic	0x1c, 1	; 28
     90c:	fe cf       	rjmp	.-4      	; 0x90a <eeprom_write_word_2+0x8>
	eeprom_write_word((uint16_t *)p, val);
     90e:	13 da       	rcall	.-3034   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     910:	e1 99       	sbic	0x1c, 1	; 28
     912:	fe cf       	rjmp	.-4      	; 0x910 <eeprom_write_word_2+0xe>
	SREG = m_sreg;
     914:	cf bf       	out	0x3f, r28	; 63
}
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <eeprom_read_word_user>:
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_user(const uint16_t *p1)
{
     91a:	2f 92       	push	r2
     91c:	3f 92       	push	r3
     91e:	4f 92       	push	r4
     920:	5f 92       	push	r5
     922:	6f 92       	push	r6
     924:	7f 92       	push	r7
     926:	8f 92       	push	r8
     928:	9f 92       	push	r9
     92a:	af 92       	push	r10
     92c:	bf 92       	push	r11
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	00 d0       	rcall	.+0      	; 0x940 <eeprom_read_word_user+0x26>
     940:	00 d0       	rcall	.+0      	; 0x942 <eeprom_read_word_user+0x28>
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	8c 01       	movw	r16, r24
	unsigned short tmp,tmp1,tmp2,tmp3,tmp4,tmp5;
	//
	tmp = 0xff;
	//
	const uint16_t *p2 = (const uint16_t *)(p1+EEPROM_DATA_WORD_SIZE);
     948:	2c 01       	movw	r4, r24
     94a:	82 e6       	ldi	r24, 0x62	; 98
     94c:	48 0e       	add	r4, r24
     94e:	51 1c       	adc	r5, r1
	const uint16_t *p3 = (const uint16_t *)(p1+2*EEPROM_DATA_WORD_SIZE);
     950:	38 01       	movw	r6, r16
     952:	94 ec       	ldi	r25, 0xC4	; 196
     954:	69 0e       	add	r6, r25
     956:	71 1c       	adc	r7, r1
	const uint16_t *p4 = (const uint16_t *)(p1+3*EEPROM_DATA_WORD_SIZE);
     958:	58 01       	movw	r10, r16
     95a:	ea ed       	ldi	r30, 0xDA	; 218
     95c:	ae 1a       	sub	r10, r30
     95e:	ee ef       	ldi	r30, 0xFE	; 254
     960:	be 0a       	sbc	r11, r30
	const uint16_t *p5 = (const uint16_t *)(p1+4*EEPROM_DATA_WORD_SIZE);
     962:	48 01       	movw	r8, r16
     964:	f8 e7       	ldi	r31, 0x78	; 120
     966:	8f 1a       	sub	r8, r31
     968:	fe ef       	ldi	r31, 0xFE	; 254
     96a:	9f 0a       	sbc	r9, r31
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     96c:	ff b6       	in	r15, 0x3f	; 63
	cli();
     96e:	f8 94       	cli
	wdt_reset();
     970:	a8 95       	wdr
	eeprom_busy_wait();
     972:	e1 99       	sbic	0x1c, 1	; 28
     974:	fe cf       	rjmp	.-4      	; 0x972 <eeprom_read_word_user+0x58>
	tmp = eeprom_read_word((uint16_t *)p);
     976:	c8 01       	movw	r24, r16
     978:	d9 d9       	rcall	.-3150   	; 0xfffffd2c <__eeprom_end+0xff7efac2>
     97a:	9c 83       	std	Y+4, r25	; 0x04
     97c:	8b 83       	std	Y+3, r24	; 0x03
	eeprom_busy_wait();
     97e:	e1 99       	sbic	0x1c, 1	; 28
     980:	fe cf       	rjmp	.-4      	; 0x97e <eeprom_read_word_user+0x64>
	SREG = m_sreg;
     982:	ff be       	out	0x3f, r15	; 63
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     984:	df b6       	in	r13, 0x3f	; 63
	cli();
     986:	f8 94       	cli
	wdt_reset();
     988:	a8 95       	wdr
	eeprom_busy_wait();
     98a:	e1 99       	sbic	0x1c, 1	; 28
     98c:	fe cf       	rjmp	.-4      	; 0x98a <eeprom_read_word_user+0x70>
	tmp = eeprom_read_word((uint16_t *)p);
     98e:	c2 01       	movw	r24, r4
     990:	cd d9       	rcall	.-3174   	; 0xfffffd2c <__eeprom_end+0xff7efac2>
     992:	7c 01       	movw	r14, r24
	eeprom_busy_wait();
     994:	e1 99       	sbic	0x1c, 1	; 28
     996:	fe cf       	rjmp	.-4      	; 0x994 <eeprom_read_word_user+0x7a>
	SREG = m_sreg;
     998:	df be       	out	0x3f, r13	; 63
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     99a:	3f b6       	in	r3, 0x3f	; 63
	cli();
     99c:	f8 94       	cli
	wdt_reset();
     99e:	a8 95       	wdr
	eeprom_busy_wait();
     9a0:	e1 99       	sbic	0x1c, 1	; 28
     9a2:	fe cf       	rjmp	.-4      	; 0x9a0 <eeprom_read_word_user+0x86>
	tmp = eeprom_read_word((uint16_t *)p);
     9a4:	c3 01       	movw	r24, r6
     9a6:	c2 d9       	rcall	.-3196   	; 0xfffffd2c <__eeprom_end+0xff7efac2>
     9a8:	6c 01       	movw	r12, r24
	eeprom_busy_wait();
     9aa:	e1 99       	sbic	0x1c, 1	; 28
     9ac:	fe cf       	rjmp	.-4      	; 0x9aa <eeprom_read_word_user+0x90>
	SREG = m_sreg;
     9ae:	3f be       	out	0x3f, r3	; 63
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     9b0:	2f b7       	in	r18, 0x3f	; 63
	cli();
     9b2:	f8 94       	cli
	wdt_reset();
     9b4:	a8 95       	wdr
	eeprom_busy_wait();
     9b6:	e1 99       	sbic	0x1c, 1	; 28
     9b8:	fe cf       	rjmp	.-4      	; 0x9b6 <eeprom_read_word_user+0x9c>
	tmp = eeprom_read_word((uint16_t *)p);
     9ba:	c5 01       	movw	r24, r10
     9bc:	2a 83       	std	Y+2, r18	; 0x02
     9be:	b6 d9       	rcall	.-3220   	; 0xfffffd2c <__eeprom_end+0xff7efac2>
     9c0:	1c 01       	movw	r2, r24
     9c2:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     9c4:	e1 99       	sbic	0x1c, 1	; 28
     9c6:	fe cf       	rjmp	.-4      	; 0x9c4 <eeprom_read_word_user+0xaa>
	SREG = m_sreg;
     9c8:	2f bf       	out	0x3f, r18	; 63
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     9ca:	4f b7       	in	r20, 0x3f	; 63
	cli();
     9cc:	f8 94       	cli
	wdt_reset();
     9ce:	a8 95       	wdr
	eeprom_busy_wait();
     9d0:	e1 99       	sbic	0x1c, 1	; 28
     9d2:	fe cf       	rjmp	.-4      	; 0x9d0 <eeprom_read_word_user+0xb6>
	tmp = eeprom_read_word((uint16_t *)p);
     9d4:	c4 01       	movw	r24, r8
     9d6:	49 83       	std	Y+1, r20	; 0x01
     9d8:	a9 d9       	rcall	.-3246   	; 0xfffffd2c <__eeprom_end+0xff7efac2>
     9da:	9c 01       	movw	r18, r24
     9dc:	49 81       	ldd	r20, Y+1	; 0x01
	eeprom_busy_wait();
     9de:	e1 99       	sbic	0x1c, 1	; 28
     9e0:	fe cf       	rjmp	.-4      	; 0x9de <eeprom_read_word_user+0xc4>
	SREG = m_sreg;
     9e2:	4f bf       	out	0x3f, r20	; 63
	tmp2 = eeprom_read_word_2(p2);
	tmp3 = eeprom_read_word_2(p3);
	tmp4 = eeprom_read_word_2(p4);
	tmp5 = eeprom_read_word_2(p5);
	//
	if((tmp1==tmp2) && (tmp1==tmp3)) //123
     9e4:	8b 81       	ldd	r24, Y+3	; 0x03
     9e6:	9c 81       	ldd	r25, Y+4	; 0x04
     9e8:	8e 15       	cp	r24, r14
     9ea:	9f 05       	cpc	r25, r15
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <eeprom_read_word_user+0xd6>
     9ee:	4c c0       	rjmp	.+152    	; 0xa88 <eeprom_read_word_user+0x16e>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp1==tmp3) && (tmp1==tmp4)) //134
     9f0:	8c 15       	cp	r24, r12
     9f2:	9d 05       	cpc	r25, r13
     9f4:	39 f1       	breq	.+78     	; 0xa44 <eeprom_read_word_user+0x12a>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp1==tmp4) && (tmp1==tmp5)) //145
     9f6:	82 15       	cp	r24, r2
     9f8:	93 05       	cpc	r25, r3
     9fa:	09 f0       	breq	.+2      	; 0x9fe <eeprom_read_word_user+0xe4>
     9fc:	53 c0       	rjmp	.+166    	; 0xaa4 <eeprom_read_word_user+0x18a>
     9fe:	82 17       	cp	r24, r18
     a00:	93 07       	cpc	r25, r19
     a02:	09 f0       	breq	.+2      	; 0xa06 <eeprom_read_word_user+0xec>
     a04:	4f c0       	rjmp	.+158    	; 0xaa4 <eeprom_read_word_user+0x18a>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     a06:	1f b7       	in	r17, 0x3f	; 63
	cli();
     a08:	f8 94       	cli
	wdt_reset();
     a0a:	a8 95       	wdr
	eeprom_busy_wait();
     a0c:	e1 99       	sbic	0x1c, 1	; 28
     a0e:	fe cf       	rjmp	.-4      	; 0xa0c <eeprom_read_word_user+0xf2>
	eeprom_write_word((uint16_t *)p, val);
     a10:	6b 81       	ldd	r22, Y+3	; 0x03
     a12:	7c 81       	ldd	r23, Y+4	; 0x04
     a14:	c3 01       	movw	r24, r6
     a16:	8f d9       	rcall	.-3298   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     a18:	e1 99       	sbic	0x1c, 1	; 28
     a1a:	fe cf       	rjmp	.-4      	; 0xa18 <eeprom_read_word_user+0xfe>
	SREG = m_sreg;
     a1c:	1f bf       	out	0x3f, r17	; 63
		if(tmp != tmp3)
		{
			eeprom_write_word_2(p3,tmp);
		}
		//
		if(tmp != tmp2)
     a1e:	eb 81       	ldd	r30, Y+3	; 0x03
     a20:	fc 81       	ldd	r31, Y+4	; 0x04
     a22:	ee 15       	cp	r30, r14
     a24:	ff 05       	cpc	r31, r15
     a26:	09 f4       	brne	.+2      	; 0xa2a <eeprom_read_word_user+0x110>
     a28:	4b c0       	rjmp	.+150    	; 0xac0 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     a2a:	1f b7       	in	r17, 0x3f	; 63
	cli();
     a2c:	f8 94       	cli
	wdt_reset();
     a2e:	a8 95       	wdr
	eeprom_busy_wait();
     a30:	e1 99       	sbic	0x1c, 1	; 28
     a32:	fe cf       	rjmp	.-4      	; 0xa30 <eeprom_read_word_user+0x116>
	eeprom_write_word((uint16_t *)p, val);
     a34:	6b 81       	ldd	r22, Y+3	; 0x03
     a36:	7c 81       	ldd	r23, Y+4	; 0x04
     a38:	c2 01       	movw	r24, r4
     a3a:	7d d9       	rcall	.-3334   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     a3c:	e1 99       	sbic	0x1c, 1	; 28
     a3e:	fe cf       	rjmp	.-4      	; 0xa3c <eeprom_read_word_user+0x122>
	SREG = m_sreg;
     a40:	1f bf       	out	0x3f, r17	; 63
     a42:	3e c0       	rjmp	.+124    	; 0xac0 <eeprom_read_word_user+0x1a6>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp1==tmp3) && (tmp1==tmp4)) //134
     a44:	82 15       	cp	r24, r2
     a46:	93 05       	cpc	r25, r3
     a48:	09 f4       	brne	.+2      	; 0xa4c <eeprom_read_word_user+0x132>
     a4a:	01 c1       	rjmp	.+514    	; 0xc4e <eeprom_read_word_user+0x334>
		if(tmp != tmp5)
		{
			eeprom_write_word_2(p5,tmp);
		}
	}
	else if((tmp1==tmp3) && (tmp1==tmp5)) //135
     a4c:	eb 81       	ldd	r30, Y+3	; 0x03
     a4e:	fc 81       	ldd	r31, Y+4	; 0x04
     a50:	e2 17       	cp	r30, r18
     a52:	f3 07       	cpc	r31, r19
     a54:	51 f5       	brne	.+84     	; 0xaaa <eeprom_read_word_user+0x190>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     a56:	1f b7       	in	r17, 0x3f	; 63
	cli();
     a58:	f8 94       	cli
	wdt_reset();
     a5a:	a8 95       	wdr
	eeprom_busy_wait();
     a5c:	e1 99       	sbic	0x1c, 1	; 28
     a5e:	fe cf       	rjmp	.-4      	; 0xa5c <eeprom_read_word_user+0x142>
	eeprom_write_word((uint16_t *)p, val);
     a60:	6b 81       	ldd	r22, Y+3	; 0x03
     a62:	7c 81       	ldd	r23, Y+4	; 0x04
     a64:	c2 01       	movw	r24, r4
     a66:	67 d9       	rcall	.-3378   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     a68:	e1 99       	sbic	0x1c, 1	; 28
     a6a:	fe cf       	rjmp	.-4      	; 0xa68 <eeprom_read_word_user+0x14e>
	SREG = m_sreg;
     a6c:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     a6e:	1f b7       	in	r17, 0x3f	; 63
	cli();
     a70:	f8 94       	cli
	wdt_reset();
     a72:	a8 95       	wdr
	eeprom_busy_wait();
     a74:	e1 99       	sbic	0x1c, 1	; 28
     a76:	fe cf       	rjmp	.-4      	; 0xa74 <eeprom_read_word_user+0x15a>
	eeprom_write_word((uint16_t *)p, val);
     a78:	6b 81       	ldd	r22, Y+3	; 0x03
     a7a:	7c 81       	ldd	r23, Y+4	; 0x04
     a7c:	c5 01       	movw	r24, r10
     a7e:	5b d9       	rcall	.-3402   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     a80:	e1 99       	sbic	0x1c, 1	; 28
     a82:	fe cf       	rjmp	.-4      	; 0xa80 <eeprom_read_word_user+0x166>
	SREG = m_sreg;
     a84:	1f bf       	out	0x3f, r17	; 63
     a86:	1c c0       	rjmp	.+56     	; 0xac0 <eeprom_read_word_user+0x1a6>
	tmp2 = eeprom_read_word_2(p2);
	tmp3 = eeprom_read_word_2(p3);
	tmp4 = eeprom_read_word_2(p4);
	tmp5 = eeprom_read_word_2(p5);
	//
	if((tmp1==tmp2) && (tmp1==tmp3)) //123
     a88:	8c 15       	cp	r24, r12
     a8a:	9d 05       	cpc	r25, r13
     a8c:	09 f4       	brne	.+2      	; 0xa90 <eeprom_read_word_user+0x176>
     a8e:	7d c0       	rjmp	.+250    	; 0xb8a <eeprom_read_word_user+0x270>
		if(tmp != tmp5)
		{
			eeprom_write_word_2(p5,tmp);
		}
	}
	else if((tmp1==tmp2) && (tmp1==tmp4)) //124
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
     a94:	82 15       	cp	r24, r2
     a96:	93 05       	cpc	r25, r3
     a98:	09 f4       	brne	.+2      	; 0xa9c <eeprom_read_word_user+0x182>
     a9a:	9d c0       	rjmp	.+314    	; 0xbd6 <eeprom_read_word_user+0x2bc>
		if(tmp != tmp5)
		{
			eeprom_write_word_2(p5,tmp);
		}
	}
	else if((tmp1==tmp2) && (tmp1==tmp5)) //125
     a9c:	82 17       	cp	r24, r18
     a9e:	93 07       	cpc	r25, r19
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <eeprom_read_word_user+0x18a>
     aa2:	bc c0       	rjmp	.+376    	; 0xc1c <eeprom_read_word_user+0x302>
		if(tmp != tmp2)
		{
			eeprom_write_word_2(p2,tmp);
		}
	}
	else if((tmp2==tmp3) && (tmp2==tmp4)) //234
     aa4:	ec 14       	cp	r14, r12
     aa6:	fd 04       	cpc	r15, r13
     aa8:	69 f1       	breq	.+90     	; 0xb04 <eeprom_read_word_user+0x1ea>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp2==tmp4) && (tmp2==tmp5)) //245
     aaa:	e2 14       	cp	r14, r2
     aac:	f3 04       	cpc	r15, r3
     aae:	09 f4       	brne	.+2      	; 0xab2 <eeprom_read_word_user+0x198>
     ab0:	4e c0       	rjmp	.+156    	; 0xb4e <eeprom_read_word_user+0x234>
		if(tmp != tmp3)
		{
			eeprom_write_word_2(p3,tmp);
		}
	}
	else if((tmp3==tmp4) && (tmp3==tmp5)) //345
     ab2:	c2 14       	cp	r12, r2
     ab4:	d3 04       	cpc	r13, r3
     ab6:	e9 f0       	breq	.+58     	; 0xaf2 <eeprom_read_word_user+0x1d8>
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_user(const uint16_t *p1)
{
	unsigned short tmp,tmp1,tmp2,tmp3,tmp4,tmp5;
	//
	tmp = 0xff;
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	9c 83       	std	Y+4, r25	; 0x04
     abe:	8b 83       	std	Y+3, r24	; 0x03
			eeprom_write_word_2(p2,tmp);
		}
	}
	//
	return tmp;
}
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	9c 81       	ldd	r25, Y+4	; 0x04
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	7f 90       	pop	r7
     ae6:	6f 90       	pop	r6
     ae8:	5f 90       	pop	r5
     aea:	4f 90       	pop	r4
     aec:	3f 90       	pop	r3
     aee:	2f 90       	pop	r2
     af0:	08 95       	ret
		if(tmp != tmp3)
		{
			eeprom_write_word_2(p3,tmp);
		}
	}
	else if((tmp3==tmp4) && (tmp3==tmp5)) //345
     af2:	c2 16       	cp	r12, r18
     af4:	d3 06       	cpc	r13, r19
     af6:	09 f4       	brne	.+2      	; 0xafa <eeprom_read_word_user+0x1e0>
     af8:	f2 c0       	rjmp	.+484    	; 0xcde <eeprom_read_word_user+0x3c4>
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_user(const uint16_t *p1)
{
	unsigned short tmp,tmp1,tmp2,tmp3,tmp4,tmp5;
	//
	tmp = 0xff;
     afa:	ef ef       	ldi	r30, 0xFF	; 255
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	fc 83       	std	Y+4, r31	; 0x04
     b00:	eb 83       	std	Y+3, r30	; 0x03
     b02:	de cf       	rjmp	.-68     	; 0xac0 <eeprom_read_word_user+0x1a6>
		if(tmp != tmp2)
		{
			eeprom_write_word_2(p2,tmp);
		}
	}
	else if((tmp2==tmp3) && (tmp2==tmp4)) //234
     b04:	e2 14       	cp	r14, r2
     b06:	f3 04       	cpc	r15, r3
     b08:	09 f4       	brne	.+2      	; 0xb0c <eeprom_read_word_user+0x1f2>
     b0a:	c4 c0       	rjmp	.+392    	; 0xc94 <eeprom_read_word_user+0x37a>
		if(tmp != tmp5)
		{
			eeprom_write_word_2(p5,tmp);
		}
	}
	else if((tmp2==tmp3) && (tmp2==tmp5)) //235
     b0c:	e2 16       	cp	r14, r18
     b0e:	f3 06       	cpc	r15, r19
     b10:	99 f6       	brne	.-90     	; 0xab8 <eeprom_read_word_user+0x19e>
	{
		tmp = tmp2;
		if(tmp != tmp1)
     b12:	eb 81       	ldd	r30, Y+3	; 0x03
     b14:	fc 81       	ldd	r31, Y+4	; 0x04
     b16:	ee 15       	cp	r30, r14
     b18:	ff 05       	cpc	r31, r15
     b1a:	59 f0       	breq	.+22     	; 0xb32 <eeprom_read_word_user+0x218>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     b1c:	df b6       	in	r13, 0x3f	; 63
	cli();
     b1e:	f8 94       	cli
	wdt_reset();
     b20:	a8 95       	wdr
	eeprom_busy_wait();
     b22:	e1 99       	sbic	0x1c, 1	; 28
     b24:	fe cf       	rjmp	.-4      	; 0xb22 <eeprom_read_word_user+0x208>
	eeprom_write_word((uint16_t *)p, val);
     b26:	b7 01       	movw	r22, r14
     b28:	c8 01       	movw	r24, r16
     b2a:	05 d9       	rcall	.-3574   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     b2c:	e1 99       	sbic	0x1c, 1	; 28
     b2e:	fe cf       	rjmp	.-4      	; 0xb2c <eeprom_read_word_user+0x212>
	SREG = m_sreg;
     b30:	df be       	out	0x3f, r13	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     b32:	1f b7       	in	r17, 0x3f	; 63
	cli();
     b34:	f8 94       	cli
	wdt_reset();
     b36:	a8 95       	wdr
	eeprom_busy_wait();
     b38:	e1 99       	sbic	0x1c, 1	; 28
     b3a:	fe cf       	rjmp	.-4      	; 0xb38 <eeprom_read_word_user+0x21e>
	eeprom_write_word((uint16_t *)p, val);
     b3c:	b7 01       	movw	r22, r14
     b3e:	c5 01       	movw	r24, r10
     b40:	fa d8       	rcall	.-3596   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     b42:	e1 99       	sbic	0x1c, 1	; 28
     b44:	fe cf       	rjmp	.-4      	; 0xb42 <eeprom_read_word_user+0x228>
	SREG = m_sreg;
     b46:	1f bf       	out	0x3f, r17	; 63
     b48:	fc 82       	std	Y+4, r15	; 0x04
     b4a:	eb 82       	std	Y+3, r14	; 0x03
     b4c:	b9 cf       	rjmp	.-142    	; 0xac0 <eeprom_read_word_user+0x1a6>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp2==tmp4) && (tmp2==tmp5)) //245
     b4e:	e2 16       	cp	r14, r18
     b50:	f3 06       	cpc	r15, r19
     b52:	99 f6       	brne	.-90     	; 0xafa <eeprom_read_word_user+0x1e0>
	{
		tmp = tmp2;
		if(tmp != tmp1)
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
     b58:	8e 15       	cp	r24, r14
     b5a:	9f 05       	cpc	r25, r15
     b5c:	59 f0       	breq	.+22     	; 0xb74 <eeprom_read_word_user+0x25a>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     b5e:	df b6       	in	r13, 0x3f	; 63
	cli();
     b60:	f8 94       	cli
	wdt_reset();
     b62:	a8 95       	wdr
	eeprom_busy_wait();
     b64:	e1 99       	sbic	0x1c, 1	; 28
     b66:	fe cf       	rjmp	.-4      	; 0xb64 <eeprom_read_word_user+0x24a>
	eeprom_write_word((uint16_t *)p, val);
     b68:	b7 01       	movw	r22, r14
     b6a:	c8 01       	movw	r24, r16
     b6c:	e4 d8       	rcall	.-3640   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     b6e:	e1 99       	sbic	0x1c, 1	; 28
     b70:	fe cf       	rjmp	.-4      	; 0xb6e <eeprom_read_word_user+0x254>
	SREG = m_sreg;
     b72:	df be       	out	0x3f, r13	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     b74:	1f b7       	in	r17, 0x3f	; 63
	cli();
     b76:	f8 94       	cli
	wdt_reset();
     b78:	a8 95       	wdr
	eeprom_busy_wait();
     b7a:	e1 99       	sbic	0x1c, 1	; 28
     b7c:	fe cf       	rjmp	.-4      	; 0xb7a <eeprom_read_word_user+0x260>
	eeprom_write_word((uint16_t *)p, val);
     b7e:	b7 01       	movw	r22, r14
     b80:	c3 01       	movw	r24, r6
     b82:	d9 d8       	rcall	.-3662   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     b84:	e1 99       	sbic	0x1c, 1	; 28
     b86:	fe cf       	rjmp	.-4      	; 0xb84 <eeprom_read_word_user+0x26a>
     b88:	de cf       	rjmp	.-68     	; 0xb46 <eeprom_read_word_user+0x22c>
	tmp5 = eeprom_read_word_2(p5);
	//
	if((tmp1==tmp2) && (tmp1==tmp3)) //123
	{
		tmp = tmp1;
		if(tmp != tmp4)
     b8a:	82 15       	cp	r24, r2
     b8c:	93 05       	cpc	r25, r3
     b8e:	81 f0       	breq	.+32     	; 0xbb0 <eeprom_read_word_user+0x296>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     b90:	1f b7       	in	r17, 0x3f	; 63
	cli();
     b92:	f8 94       	cli
	wdt_reset();
     b94:	a8 95       	wdr
	eeprom_busy_wait();
     b96:	e1 99       	sbic	0x1c, 1	; 28
     b98:	fe cf       	rjmp	.-4      	; 0xb96 <eeprom_read_word_user+0x27c>
	eeprom_write_word((uint16_t *)p, val);
     b9a:	6b 81       	ldd	r22, Y+3	; 0x03
     b9c:	7c 81       	ldd	r23, Y+4	; 0x04
     b9e:	c5 01       	movw	r24, r10
     ba0:	2a 83       	std	Y+2, r18	; 0x02
     ba2:	39 83       	std	Y+1, r19	; 0x01
     ba4:	c8 d8       	rcall	.-3696   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
     ba6:	39 81       	ldd	r19, Y+1	; 0x01
     ba8:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     baa:	e1 99       	sbic	0x1c, 1	; 28
     bac:	fe cf       	rjmp	.-4      	; 0xbaa <eeprom_read_word_user+0x290>
	SREG = m_sreg;
     bae:	1f bf       	out	0x3f, r17	; 63
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
		//
		if(tmp != tmp5)
     bb0:	eb 81       	ldd	r30, Y+3	; 0x03
     bb2:	fc 81       	ldd	r31, Y+4	; 0x04
     bb4:	e2 17       	cp	r30, r18
     bb6:	f3 07       	cpc	r31, r19
     bb8:	09 f4       	brne	.+2      	; 0xbbc <eeprom_read_word_user+0x2a2>
     bba:	82 cf       	rjmp	.-252    	; 0xac0 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     bbc:	1f b7       	in	r17, 0x3f	; 63
	cli();
     bbe:	f8 94       	cli
	wdt_reset();
     bc0:	a8 95       	wdr
	eeprom_busy_wait();
     bc2:	e1 99       	sbic	0x1c, 1	; 28
     bc4:	fe cf       	rjmp	.-4      	; 0xbc2 <eeprom_read_word_user+0x2a8>
	eeprom_write_word((uint16_t *)p, val);
     bc6:	6b 81       	ldd	r22, Y+3	; 0x03
     bc8:	7c 81       	ldd	r23, Y+4	; 0x04
     bca:	c4 01       	movw	r24, r8
     bcc:	b4 d8       	rcall	.-3736   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     bce:	e1 99       	sbic	0x1c, 1	; 28
     bd0:	fe cf       	rjmp	.-4      	; 0xbce <eeprom_read_word_user+0x2b4>
	SREG = m_sreg;
     bd2:	1f bf       	out	0x3f, r17	; 63
     bd4:	75 cf       	rjmp	.-278    	; 0xac0 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     bd6:	1f b7       	in	r17, 0x3f	; 63
	cli();
     bd8:	f8 94       	cli
	wdt_reset();
     bda:	a8 95       	wdr
	eeprom_busy_wait();
     bdc:	e1 99       	sbic	0x1c, 1	; 28
     bde:	fe cf       	rjmp	.-4      	; 0xbdc <eeprom_read_word_user+0x2c2>
	eeprom_write_word((uint16_t *)p, val);
     be0:	6b 81       	ldd	r22, Y+3	; 0x03
     be2:	7c 81       	ldd	r23, Y+4	; 0x04
     be4:	c3 01       	movw	r24, r6
     be6:	2a 83       	std	Y+2, r18	; 0x02
     be8:	39 83       	std	Y+1, r19	; 0x01
     bea:	a5 d8       	rcall	.-3766   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
     bec:	39 81       	ldd	r19, Y+1	; 0x01
     bee:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     bf0:	e1 99       	sbic	0x1c, 1	; 28
     bf2:	fe cf       	rjmp	.-4      	; 0xbf0 <eeprom_read_word_user+0x2d6>
	SREG = m_sreg;
     bf4:	1f bf       	out	0x3f, r17	; 63
		if(tmp != tmp3)
		{
			eeprom_write_word_2(p3,tmp);
		}
		//
		if(tmp != tmp5)
     bf6:	eb 81       	ldd	r30, Y+3	; 0x03
     bf8:	fc 81       	ldd	r31, Y+4	; 0x04
     bfa:	e2 17       	cp	r30, r18
     bfc:	f3 07       	cpc	r31, r19
     bfe:	09 f4       	brne	.+2      	; 0xc02 <eeprom_read_word_user+0x2e8>
     c00:	5f cf       	rjmp	.-322    	; 0xac0 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c02:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c04:	f8 94       	cli
	wdt_reset();
     c06:	a8 95       	wdr
	eeprom_busy_wait();
     c08:	e1 99       	sbic	0x1c, 1	; 28
     c0a:	fe cf       	rjmp	.-4      	; 0xc08 <eeprom_read_word_user+0x2ee>
	eeprom_write_word((uint16_t *)p, val);
     c0c:	6b 81       	ldd	r22, Y+3	; 0x03
     c0e:	7c 81       	ldd	r23, Y+4	; 0x04
     c10:	c4 01       	movw	r24, r8
     c12:	91 d8       	rcall	.-3806   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     c14:	e1 99       	sbic	0x1c, 1	; 28
     c16:	fe cf       	rjmp	.-4      	; 0xc14 <eeprom_read_word_user+0x2fa>
	SREG = m_sreg;
     c18:	1f bf       	out	0x3f, r17	; 63
     c1a:	52 cf       	rjmp	.-348    	; 0xac0 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c1c:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c1e:	f8 94       	cli
	wdt_reset();
     c20:	a8 95       	wdr
	eeprom_busy_wait();
     c22:	e1 99       	sbic	0x1c, 1	; 28
     c24:	fe cf       	rjmp	.-4      	; 0xc22 <eeprom_read_word_user+0x308>
	eeprom_write_word((uint16_t *)p, val);
     c26:	6b 81       	ldd	r22, Y+3	; 0x03
     c28:	7c 81       	ldd	r23, Y+4	; 0x04
     c2a:	c3 01       	movw	r24, r6
     c2c:	84 d8       	rcall	.-3832   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     c2e:	e1 99       	sbic	0x1c, 1	; 28
     c30:	fe cf       	rjmp	.-4      	; 0xc2e <eeprom_read_word_user+0x314>
	SREG = m_sreg;
     c32:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c34:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c36:	f8 94       	cli
	wdt_reset();
     c38:	a8 95       	wdr
	eeprom_busy_wait();
     c3a:	e1 99       	sbic	0x1c, 1	; 28
     c3c:	fe cf       	rjmp	.-4      	; 0xc3a <eeprom_read_word_user+0x320>
	eeprom_write_word((uint16_t *)p, val);
     c3e:	6b 81       	ldd	r22, Y+3	; 0x03
     c40:	7c 81       	ldd	r23, Y+4	; 0x04
     c42:	c5 01       	movw	r24, r10
     c44:	78 d8       	rcall	.-3856   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     c46:	e1 99       	sbic	0x1c, 1	; 28
     c48:	fe cf       	rjmp	.-4      	; 0xc46 <eeprom_read_word_user+0x32c>
	SREG = m_sreg;
     c4a:	1f bf       	out	0x3f, r17	; 63
     c4c:	39 cf       	rjmp	.-398    	; 0xac0 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c4e:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c50:	f8 94       	cli
	wdt_reset();
     c52:	a8 95       	wdr
	eeprom_busy_wait();
     c54:	e1 99       	sbic	0x1c, 1	; 28
     c56:	fe cf       	rjmp	.-4      	; 0xc54 <eeprom_read_word_user+0x33a>
	eeprom_write_word((uint16_t *)p, val);
     c58:	6b 81       	ldd	r22, Y+3	; 0x03
     c5a:	7c 81       	ldd	r23, Y+4	; 0x04
     c5c:	c2 01       	movw	r24, r4
     c5e:	2a 83       	std	Y+2, r18	; 0x02
     c60:	39 83       	std	Y+1, r19	; 0x01
     c62:	69 d8       	rcall	.-3886   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
     c64:	39 81       	ldd	r19, Y+1	; 0x01
     c66:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     c68:	e1 99       	sbic	0x1c, 1	; 28
     c6a:	fe cf       	rjmp	.-4      	; 0xc68 <eeprom_read_word_user+0x34e>
	SREG = m_sreg;
     c6c:	1f bf       	out	0x3f, r17	; 63
		if(tmp != tmp2)
		{
			eeprom_write_word_2(p2,tmp);
		}
		//
		if(tmp != tmp5)
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	09 f4       	brne	.+2      	; 0xc7a <eeprom_read_word_user+0x360>
     c78:	23 cf       	rjmp	.-442    	; 0xac0 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c7a:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c7c:	f8 94       	cli
	wdt_reset();
     c7e:	a8 95       	wdr
	eeprom_busy_wait();
     c80:	e1 99       	sbic	0x1c, 1	; 28
     c82:	fe cf       	rjmp	.-4      	; 0xc80 <eeprom_read_word_user+0x366>
	eeprom_write_word((uint16_t *)p, val);
     c84:	6b 81       	ldd	r22, Y+3	; 0x03
     c86:	7c 81       	ldd	r23, Y+4	; 0x04
     c88:	c4 01       	movw	r24, r8
     c8a:	55 d8       	rcall	.-3926   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     c8c:	e1 99       	sbic	0x1c, 1	; 28
     c8e:	fe cf       	rjmp	.-4      	; 0xc8c <eeprom_read_word_user+0x372>
	SREG = m_sreg;
     c90:	1f bf       	out	0x3f, r17	; 63
     c92:	16 cf       	rjmp	.-468    	; 0xac0 <eeprom_read_word_user+0x1a6>
		}
	}
	else if((tmp2==tmp3) && (tmp2==tmp4)) //234
	{
		tmp = tmp2;
		if(tmp != tmp1)
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	8e 15       	cp	r24, r14
     c9a:	9f 05       	cpc	r25, r15
     c9c:	79 f0       	breq	.+30     	; 0xcbc <eeprom_read_word_user+0x3a2>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c9e:	df b6       	in	r13, 0x3f	; 63
	cli();
     ca0:	f8 94       	cli
	wdt_reset();
     ca2:	a8 95       	wdr
	eeprom_busy_wait();
     ca4:	e1 99       	sbic	0x1c, 1	; 28
     ca6:	fe cf       	rjmp	.-4      	; 0xca4 <eeprom_read_word_user+0x38a>
	eeprom_write_word((uint16_t *)p, val);
     ca8:	b7 01       	movw	r22, r14
     caa:	c8 01       	movw	r24, r16
     cac:	2a 83       	std	Y+2, r18	; 0x02
     cae:	39 83       	std	Y+1, r19	; 0x01
     cb0:	42 d8       	rcall	.-3964   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
     cb2:	39 81       	ldd	r19, Y+1	; 0x01
     cb4:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     cb6:	e1 99       	sbic	0x1c, 1	; 28
     cb8:	fe cf       	rjmp	.-4      	; 0xcb6 <eeprom_read_word_user+0x39c>
	SREG = m_sreg;
     cba:	df be       	out	0x3f, r13	; 63
		if(tmp != tmp1)
		{
			eeprom_write_word_2(p1,tmp);
		}
		//
		if(tmp != tmp5)
     cbc:	e2 16       	cp	r14, r18
     cbe:	f3 06       	cpc	r15, r19
     cc0:	59 f0       	breq	.+22     	; 0xcd8 <eeprom_read_word_user+0x3be>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     cc2:	1f b7       	in	r17, 0x3f	; 63
	cli();
     cc4:	f8 94       	cli
	wdt_reset();
     cc6:	a8 95       	wdr
	eeprom_busy_wait();
     cc8:	e1 99       	sbic	0x1c, 1	; 28
     cca:	fe cf       	rjmp	.-4      	; 0xcc8 <eeprom_read_word_user+0x3ae>
	eeprom_write_word((uint16_t *)p, val);
     ccc:	b7 01       	movw	r22, r14
     cce:	c4 01       	movw	r24, r8
     cd0:	32 d8       	rcall	.-3996   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     cd2:	e1 99       	sbic	0x1c, 1	; 28
     cd4:	fe cf       	rjmp	.-4      	; 0xcd2 <eeprom_read_word_user+0x3b8>
     cd6:	37 cf       	rjmp	.-402    	; 0xb46 <eeprom_read_word_user+0x22c>
     cd8:	fc 82       	std	Y+4, r15	; 0x04
     cda:	eb 82       	std	Y+3, r14	; 0x03
     cdc:	f1 ce       	rjmp	.-542    	; 0xac0 <eeprom_read_word_user+0x1a6>
		}
	}
	else if((tmp3==tmp4) && (tmp3==tmp5)) //345
	{
		tmp = tmp3;
		if(tmp != tmp1)
     cde:	eb 81       	ldd	r30, Y+3	; 0x03
     ce0:	fc 81       	ldd	r31, Y+4	; 0x04
     ce2:	ec 15       	cp	r30, r12
     ce4:	fd 05       	cpc	r31, r13
     ce6:	59 f0       	breq	.+22     	; 0xcfe <eeprom_read_word_user+0x3e4>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     ce8:	bf b6       	in	r11, 0x3f	; 63
	cli();
     cea:	f8 94       	cli
	wdt_reset();
     cec:	a8 95       	wdr
	eeprom_busy_wait();
     cee:	e1 99       	sbic	0x1c, 1	; 28
     cf0:	fe cf       	rjmp	.-4      	; 0xcee <eeprom_read_word_user+0x3d4>
	eeprom_write_word((uint16_t *)p, val);
     cf2:	b6 01       	movw	r22, r12
     cf4:	c8 01       	movw	r24, r16
     cf6:	1f d8       	rcall	.-4034   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     cf8:	e1 99       	sbic	0x1c, 1	; 28
     cfa:	fe cf       	rjmp	.-4      	; 0xcf8 <eeprom_read_word_user+0x3de>
	SREG = m_sreg;
     cfc:	bf be       	out	0x3f, r11	; 63
		if(tmp != tmp1)
		{
			eeprom_write_word_2(p1,tmp);
		}
		//
		if(tmp != tmp2)
     cfe:	ec 14       	cp	r14, r12
     d00:	fd 04       	cpc	r15, r13
     d02:	51 f3       	breq	.-44     	; 0xcd8 <eeprom_read_word_user+0x3be>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d04:	1f b7       	in	r17, 0x3f	; 63
	cli();
     d06:	f8 94       	cli
	wdt_reset();
     d08:	a8 95       	wdr
	eeprom_busy_wait();
     d0a:	e1 99       	sbic	0x1c, 1	; 28
     d0c:	fe cf       	rjmp	.-4      	; 0xd0a <eeprom_read_word_user+0x3f0>
	eeprom_write_word((uint16_t *)p, val);
     d0e:	b6 01       	movw	r22, r12
     d10:	c2 01       	movw	r24, r4
     d12:	11 d8       	rcall	.-4062   	; 0xfffffd36 <__eeprom_end+0xff7efacc>
	eeprom_busy_wait();
     d14:	e1 99       	sbic	0x1c, 1	; 28
     d16:	fe cf       	rjmp	.-4      	; 0xd14 <eeprom_read_word_user+0x3fa>
	SREG = m_sreg;
     d18:	1f bf       	out	0x3f, r17	; 63
     d1a:	dc 82       	std	Y+4, r13	; 0x04
     d1c:	cb 82       	std	Y+3, r12	; 0x03
     d1e:	d0 ce       	rjmp	.-608    	; 0xac0 <eeprom_read_word_user+0x1a6>

00000d20 <eeprom_write_word_user>:
	//
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	8c 01       	movw	r16, r24
     d2c:	eb 01       	movw	r28, r22
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d2e:	ff b6       	in	r15, 0x3f	; 63
	cli();
     d30:	f8 94       	cli
	wdt_reset();
     d32:	a8 95       	wdr
	eeprom_busy_wait();
     d34:	e1 99       	sbic	0x1c, 1	; 28
     d36:	fe cf       	rjmp	.-4      	; 0xd34 <eeprom_write_word_user+0x14>
	eeprom_write_word((uint16_t *)p, val);
     d38:	be 01       	movw	r22, r28
     d3a:	c8 01       	movw	r24, r16
     d3c:	fc d7       	rcall	.+4088   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     d3e:	e1 99       	sbic	0x1c, 1	; 28
     d40:	fe cf       	rjmp	.-4      	; 0xd3e <eeprom_write_word_user+0x1e>
	SREG = m_sreg;
     d42:	ff be       	out	0x3f, r15	; 63
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
     d44:	c8 01       	movw	r24, r16
     d46:	8e 59       	subi	r24, 0x9E	; 158
     d48:	9f 4f       	sbci	r25, 0xFF	; 255
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d4a:	ff b6       	in	r15, 0x3f	; 63
	cli();
     d4c:	f8 94       	cli
	wdt_reset();
     d4e:	a8 95       	wdr
	eeprom_busy_wait();
     d50:	e1 99       	sbic	0x1c, 1	; 28
     d52:	fe cf       	rjmp	.-4      	; 0xd50 <eeprom_write_word_user+0x30>
	eeprom_write_word((uint16_t *)p, val);
     d54:	be 01       	movw	r22, r28
     d56:	ef d7       	rcall	.+4062   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     d58:	e1 99       	sbic	0x1c, 1	; 28
     d5a:	fe cf       	rjmp	.-4      	; 0xd58 <eeprom_write_word_user+0x38>
	SREG = m_sreg;
     d5c:	ff be       	out	0x3f, r15	; 63
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
     d5e:	c8 01       	movw	r24, r16
     d60:	8c 53       	subi	r24, 0x3C	; 60
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d64:	ff b6       	in	r15, 0x3f	; 63
	cli();
     d66:	f8 94       	cli
	wdt_reset();
     d68:	a8 95       	wdr
	eeprom_busy_wait();
     d6a:	e1 99       	sbic	0x1c, 1	; 28
     d6c:	fe cf       	rjmp	.-4      	; 0xd6a <eeprom_write_word_user+0x4a>
	eeprom_write_word((uint16_t *)p, val);
     d6e:	be 01       	movw	r22, r28
     d70:	e2 d7       	rcall	.+4036   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     d72:	e1 99       	sbic	0x1c, 1	; 28
     d74:	fe cf       	rjmp	.-4      	; 0xd72 <eeprom_write_word_user+0x52>
	SREG = m_sreg;
     d76:	ff be       	out	0x3f, r15	; 63
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+3*EEPROM_DATA_WORD_SIZE),val);
     d78:	c8 01       	movw	r24, r16
     d7a:	8a 5d       	subi	r24, 0xDA	; 218
     d7c:	9e 4f       	sbci	r25, 0xFE	; 254
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d7e:	ff b6       	in	r15, 0x3f	; 63
	cli();
     d80:	f8 94       	cli
	wdt_reset();
     d82:	a8 95       	wdr
	eeprom_busy_wait();
     d84:	e1 99       	sbic	0x1c, 1	; 28
     d86:	fe cf       	rjmp	.-4      	; 0xd84 <eeprom_write_word_user+0x64>
	eeprom_write_word((uint16_t *)p, val);
     d88:	be 01       	movw	r22, r28
     d8a:	d5 d7       	rcall	.+4010   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     d8c:	e1 99       	sbic	0x1c, 1	; 28
     d8e:	fe cf       	rjmp	.-4      	; 0xd8c <eeprom_write_word_user+0x6c>
	SREG = m_sreg;
     d90:	ff be       	out	0x3f, r15	; 63
{
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+3*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+4*EEPROM_DATA_WORD_SIZE),val);
     d92:	c8 01       	movw	r24, r16
     d94:	88 57       	subi	r24, 0x78	; 120
     d96:	9e 4f       	sbci	r25, 0xFE	; 254
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d98:	1f b7       	in	r17, 0x3f	; 63
	cli();
     d9a:	f8 94       	cli
	wdt_reset();
     d9c:	a8 95       	wdr
	eeprom_busy_wait();
     d9e:	e1 99       	sbic	0x1c, 1	; 28
     da0:	fe cf       	rjmp	.-4      	; 0xd9e <eeprom_write_word_user+0x7e>
	eeprom_write_word((uint16_t *)p, val);
     da2:	be 01       	movw	r22, r28
     da4:	c8 d7       	rcall	.+3984   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     da6:	e1 99       	sbic	0x1c, 1	; 28
     da8:	fe cf       	rjmp	.-4      	; 0xda6 <eeprom_write_word_user+0x86>
	SREG = m_sreg;
     daa:	1f bf       	out	0x3f, r17	; 63
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+3*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+4*EEPROM_DATA_WORD_SIZE),val);
}
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	08 95       	ret

00000db8 <set_default_para>:
////////////////////////////////////////////////////////////////
void set_default_para(void)
{
	//执行恢复出厂默认参数操作
	//
	cli();
     db8:	f8 94       	cli
	//
	//脉冲
	eeprom_write_word_user((uint16_t *)&m_para[0].e_mh,PULSE_TOP);
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	76 e9       	ldi	r23, 0x96	; 150
     dbe:	80 ec       	ldi	r24, 0xC0	; 192
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	ae df       	rcall	.-164    	; 0xd20 <eeprom_write_word_user>
	eeprom_write_word_user((uint16_t *)&m_para[0].e_ml,PULSE_BOTTOM);
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	79 e1       	ldi	r23, 0x19	; 25
     dc8:	82 ec       	ldi	r24, 0xC2	; 194
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a9 df       	rcall	.-174    	; 0xd20 <eeprom_write_word_user>

	eeprom_write_word_user((uint16_t *)&m_para[0].smoothingDate,PARA_SETED_SMOOTHING);
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	86 ec       	ldi	r24, 0xC6	; 198
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a4 df       	rcall	.-184    	; 0xd20 <eeprom_write_word_user>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
	eeprom_write_word_2((uint16_t *)p,val);
     dd8:	66 e0       	ldi	r22, 0x06	; 6
     dda:	79 e1       	ldi	r23, 0x19	; 25
     ddc:	84 ec       	ldi	r24, 0xC4	; 196
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	90 dd       	rcall	.-1248   	; 0x902 <eeprom_write_word_2>
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
     de2:	66 e0       	ldi	r22, 0x06	; 6
     de4:	79 e1       	ldi	r23, 0x19	; 25
     de6:	86 e2       	ldi	r24, 0x26	; 38
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	8b dd       	rcall	.-1258   	; 0x902 <eeprom_write_word_2>
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
     dec:	66 e0       	ldi	r22, 0x06	; 6
     dee:	79 e1       	ldi	r23, 0x19	; 25
     df0:	88 e8       	ldi	r24, 0x88	; 136
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	86 dd       	rcall	.-1268   	; 0x902 <eeprom_write_word_2>
	eeprom_write_word_2((uint16_t *)(p+3*EEPROM_DATA_WORD_SIZE),val);
     df6:	66 e0       	ldi	r22, 0x06	; 6
     df8:	79 e1       	ldi	r23, 0x19	; 25
     dfa:	8a ee       	ldi	r24, 0xEA	; 234
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	81 dd       	rcall	.-1278   	; 0x902 <eeprom_write_word_2>
	eeprom_write_word_2((uint16_t *)(p+4*EEPROM_DATA_WORD_SIZE),val);
     e00:	66 e0       	ldi	r22, 0x06	; 6
     e02:	79 e1       	ldi	r23, 0x19	; 25
     e04:	8c e4       	ldi	r24, 0x4C	; 76
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	7c dd       	rcall	.-1288   	; 0x902 <eeprom_write_word_2>
     e0a:	c5 e0       	ldi	r28, 0x05	; 5
     e0c:	d0 e0       	ldi	r29, 0x00	; 0
     e0e:	8f e3       	ldi	r24, 0x3F	; 63
     e10:	9c e9       	ldi	r25, 0x9C	; 156
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <set_default_para+0x5a>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <set_default_para+0x60>
     e18:	00 00       	nop
	{
		int i;
		for(i=5; i>0; i--)
		{
			_delay_ms(10);
			if(PARA_SETED_FLAG == eeprom_read_word_user((const uint16_t *)&m_para[0].e_para_seted_flag))
     e1a:	84 ec       	ldi	r24, 0xC4	; 196
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	7d dd       	rcall	.-1286   	; 0x91a <eeprom_read_word_user>
     e20:	86 30       	cpi	r24, 0x06	; 6
     e22:	99 41       	sbci	r25, 0x19	; 25
     e24:	09 f4       	brne	.+2      	; 0xe28 <set_default_para+0x70>
     e26:	4e c0       	rjmp	.+156    	; 0xec4 <set_default_para+0x10c>
     e28:	8f ef       	ldi	r24, 0xFF	; 255
     e2a:	99 ef       	ldi	r25, 0xF9	; 249
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	81 50       	subi	r24, 0x01	; 1
     e30:	90 40       	sbci	r25, 0x00	; 0
     e32:	20 40       	sbci	r18, 0x00	; 0
     e34:	e1 f7       	brne	.-8      	; 0xe2e <set_default_para+0x76>
     e36:	00 c0       	rjmp	.+0      	; 0xe38 <set_default_para+0x80>
     e38:	00 00       	nop
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     e3a:	1f b7       	in	r17, 0x3f	; 63
	cli();
     e3c:	f8 94       	cli
	wdt_reset();
     e3e:	a8 95       	wdr
	eeprom_busy_wait();
     e40:	e1 99       	sbic	0x1c, 1	; 28
     e42:	fe cf       	rjmp	.-4      	; 0xe40 <set_default_para+0x88>
	eeprom_write_word((uint16_t *)p, val);
     e44:	66 e0       	ldi	r22, 0x06	; 6
     e46:	79 e1       	ldi	r23, 0x19	; 25
     e48:	84 ec       	ldi	r24, 0xC4	; 196
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	74 d7       	rcall	.+3816   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     e4e:	e1 99       	sbic	0x1c, 1	; 28
     e50:	fe cf       	rjmp	.-4      	; 0xe4e <set_default_para+0x96>
	SREG = m_sreg;
     e52:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     e54:	1f b7       	in	r17, 0x3f	; 63
	cli();
     e56:	f8 94       	cli
	wdt_reset();
     e58:	a8 95       	wdr
	eeprom_busy_wait();
     e5a:	e1 99       	sbic	0x1c, 1	; 28
     e5c:	fe cf       	rjmp	.-4      	; 0xe5a <set_default_para+0xa2>
	eeprom_write_word((uint16_t *)p, val);
     e5e:	66 e0       	ldi	r22, 0x06	; 6
     e60:	79 e1       	ldi	r23, 0x19	; 25
     e62:	86 e2       	ldi	r24, 0x26	; 38
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	67 d7       	rcall	.+3790   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     e68:	e1 99       	sbic	0x1c, 1	; 28
     e6a:	fe cf       	rjmp	.-4      	; 0xe68 <set_default_para+0xb0>
	SREG = m_sreg;
     e6c:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     e6e:	1f b7       	in	r17, 0x3f	; 63
	cli();
     e70:	f8 94       	cli
	wdt_reset();
     e72:	a8 95       	wdr
	eeprom_busy_wait();
     e74:	e1 99       	sbic	0x1c, 1	; 28
     e76:	fe cf       	rjmp	.-4      	; 0xe74 <set_default_para+0xbc>
	eeprom_write_word((uint16_t *)p, val);
     e78:	66 e0       	ldi	r22, 0x06	; 6
     e7a:	79 e1       	ldi	r23, 0x19	; 25
     e7c:	88 e8       	ldi	r24, 0x88	; 136
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	5a d7       	rcall	.+3764   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     e82:	e1 99       	sbic	0x1c, 1	; 28
     e84:	fe cf       	rjmp	.-4      	; 0xe82 <set_default_para+0xca>
	SREG = m_sreg;
     e86:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     e88:	1f b7       	in	r17, 0x3f	; 63
	cli();
     e8a:	f8 94       	cli
	wdt_reset();
     e8c:	a8 95       	wdr
	eeprom_busy_wait();
     e8e:	e1 99       	sbic	0x1c, 1	; 28
     e90:	fe cf       	rjmp	.-4      	; 0xe8e <set_default_para+0xd6>
	eeprom_write_word((uint16_t *)p, val);
     e92:	66 e0       	ldi	r22, 0x06	; 6
     e94:	79 e1       	ldi	r23, 0x19	; 25
     e96:	8a ee       	ldi	r24, 0xEA	; 234
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	4d d7       	rcall	.+3738   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     e9c:	e1 99       	sbic	0x1c, 1	; 28
     e9e:	fe cf       	rjmp	.-4      	; 0xe9c <set_default_para+0xe4>
	SREG = m_sreg;
     ea0:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     ea2:	1f b7       	in	r17, 0x3f	; 63
	cli();
     ea4:	f8 94       	cli
	wdt_reset();
     ea6:	a8 95       	wdr
	eeprom_busy_wait();
     ea8:	e1 99       	sbic	0x1c, 1	; 28
     eaa:	fe cf       	rjmp	.-4      	; 0xea8 <set_default_para+0xf0>
	eeprom_write_word((uint16_t *)p, val);
     eac:	66 e0       	ldi	r22, 0x06	; 6
     eae:	79 e1       	ldi	r23, 0x19	; 25
     eb0:	8c e4       	ldi	r24, 0x4C	; 76
     eb2:	92 e0       	ldi	r25, 0x02	; 2
     eb4:	40 d7       	rcall	.+3712   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     eb6:	e1 99       	sbic	0x1c, 1	; 28
     eb8:	fe cf       	rjmp	.-4      	; 0xeb6 <set_default_para+0xfe>
	SREG = m_sreg;
     eba:	1f bf       	out	0x3f, r17	; 63
     ebc:	21 97       	sbiw	r28, 0x01	; 1
	//参数设置标志
	eeprom_write_word_user((uint16_t *)&m_para[0].e_para_seted_flag,PARA_SETED_FLAG);
	#if 1
	{
		int i;
		for(i=5; i>0; i--)
     ebe:	20 97       	sbiw	r28, 0x00	; 0
     ec0:	09 f0       	breq	.+2      	; 0xec4 <set_default_para+0x10c>
     ec2:	a5 cf       	rjmp	.-182    	; 0xe0e <set_default_para+0x56>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	91 ee       	ldi	r25, 0xE1	; 225
     ec8:	24 e0       	ldi	r18, 0x04	; 4
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	90 40       	sbci	r25, 0x00	; 0
     ece:	20 40       	sbci	r18, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <set_default_para+0x112>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <set_default_para+0x11c>
     ed4:	00 00       	nop
		}	
	}
	#endif
	//
	_delay_ms(100);
	wdt_reset_mcu();//重启
     ed6:	f6 dc       	rcall	.-1556   	; 0x8c4 <wdt_reset_mcu>

00000ed8 <read_para>:
    UDR = uart_tx_buf[0];
    uart_tx_addr = 1;
}
////////////////////////////////////////////////////////////////
void read_para()
{
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	c5 e0       	ldi	r28, 0x05	; 5
     ede:	d0 e0       	ldi	r29, 0x00	; 0
	#if 1
	{
		int i;
		for(i=5; i>0; i--)
		{
			if(PARA_SETED_FLAG == eeprom_read_word_user((const uint16_t *)&m_para[0].e_para_seted_flag))
     ee0:	84 ec       	ldi	r24, 0xC4	; 196
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	1a dd       	rcall	.-1484   	; 0x91a <eeprom_read_word_user>
     ee6:	86 30       	cpi	r24, 0x06	; 6
     ee8:	99 41       	sbci	r25, 0x19	; 25
     eea:	69 f0       	breq	.+26     	; 0xf06 <read_para+0x2e>
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	99 ef       	ldi	r25, 0xF9	; 249
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	81 50       	subi	r24, 0x01	; 1
     ef4:	90 40       	sbci	r25, 0x00	; 0
     ef6:	20 40       	sbci	r18, 0x00	; 0
     ef8:	e1 f7       	brne	.-8      	; 0xef2 <read_para+0x1a>
     efa:	00 c0       	rjmp	.+0      	; 0xefc <read_para+0x24>
     efc:	00 00       	nop
     efe:	21 97       	sbiw	r28, 0x01	; 1
void read_para()
{
	#if 1
	{
		int i;
		for(i=5; i>0; i--)
     f00:	20 97       	sbiw	r28, 0x00	; 0
     f02:	71 f7       	brne	.-36     	; 0xee0 <read_para+0x8>
			}
		}
		if(0 == i)
		{
			//如果标志不正常，设置默认参数
			set_default_para();
     f04:	59 df       	rcall	.-334    	; 0xdb8 <set_default_para>
		}		
	}
	#endif
	//
	//版本号
	if(version_h!=eeprom_read_word_user((const uint16_t *)(&m_para[0].e_version_h)))
     f06:	8c eb       	ldi	r24, 0xBC	; 188
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	07 dd       	rcall	.-1522   	; 0x91a <eeprom_read_word_user>
     f0c:	89 31       	cpi	r24, 0x19	; 25
     f0e:	96 40       	sbci	r25, 0x06	; 6
     f10:	09 f4       	brne	.+2      	; 0xf14 <read_para+0x3c>
     f12:	41 c0       	rjmp	.+130    	; 0xf96 <read_para+0xbe>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     f14:	cf b7       	in	r28, 0x3f	; 63
	cli();
     f16:	f8 94       	cli
	wdt_reset();
     f18:	a8 95       	wdr
	eeprom_busy_wait();
     f1a:	e1 99       	sbic	0x1c, 1	; 28
     f1c:	fe cf       	rjmp	.-4      	; 0xf1a <read_para+0x42>
	eeprom_write_word((uint16_t *)p, val);
     f1e:	69 e1       	ldi	r22, 0x19	; 25
     f20:	76 e0       	ldi	r23, 0x06	; 6
     f22:	8c eb       	ldi	r24, 0xBC	; 188
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	07 d7       	rcall	.+3598   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     f28:	e1 99       	sbic	0x1c, 1	; 28
     f2a:	fe cf       	rjmp	.-4      	; 0xf28 <read_para+0x50>
	SREG = m_sreg;
     f2c:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     f2e:	cf b7       	in	r28, 0x3f	; 63
	cli();
     f30:	f8 94       	cli
	wdt_reset();
     f32:	a8 95       	wdr
	eeprom_busy_wait();
     f34:	e1 99       	sbic	0x1c, 1	; 28
     f36:	fe cf       	rjmp	.-4      	; 0xf34 <read_para+0x5c>
	eeprom_write_word((uint16_t *)p, val);
     f38:	69 e1       	ldi	r22, 0x19	; 25
     f3a:	76 e0       	ldi	r23, 0x06	; 6
     f3c:	8e e1       	ldi	r24, 0x1E	; 30
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	fa d6       	rcall	.+3572   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     f42:	e1 99       	sbic	0x1c, 1	; 28
     f44:	fe cf       	rjmp	.-4      	; 0xf42 <read_para+0x6a>
	SREG = m_sreg;
     f46:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     f48:	cf b7       	in	r28, 0x3f	; 63
	cli();
     f4a:	f8 94       	cli
	wdt_reset();
     f4c:	a8 95       	wdr
	eeprom_busy_wait();
     f4e:	e1 99       	sbic	0x1c, 1	; 28
     f50:	fe cf       	rjmp	.-4      	; 0xf4e <read_para+0x76>
	eeprom_write_word((uint16_t *)p, val);
     f52:	69 e1       	ldi	r22, 0x19	; 25
     f54:	76 e0       	ldi	r23, 0x06	; 6
     f56:	80 e8       	ldi	r24, 0x80	; 128
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	ed d6       	rcall	.+3546   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     f5c:	e1 99       	sbic	0x1c, 1	; 28
     f5e:	fe cf       	rjmp	.-4      	; 0xf5c <read_para+0x84>
	SREG = m_sreg;
     f60:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     f62:	cf b7       	in	r28, 0x3f	; 63
	cli();
     f64:	f8 94       	cli
	wdt_reset();
     f66:	a8 95       	wdr
	eeprom_busy_wait();
     f68:	e1 99       	sbic	0x1c, 1	; 28
     f6a:	fe cf       	rjmp	.-4      	; 0xf68 <read_para+0x90>
	eeprom_write_word((uint16_t *)p, val);
     f6c:	69 e1       	ldi	r22, 0x19	; 25
     f6e:	76 e0       	ldi	r23, 0x06	; 6
     f70:	82 ee       	ldi	r24, 0xE2	; 226
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	e0 d6       	rcall	.+3520   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     f76:	e1 99       	sbic	0x1c, 1	; 28
     f78:	fe cf       	rjmp	.-4      	; 0xf76 <read_para+0x9e>
	SREG = m_sreg;
     f7a:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     f7c:	cf b7       	in	r28, 0x3f	; 63
	cli();
     f7e:	f8 94       	cli
	wdt_reset();
     f80:	a8 95       	wdr
	eeprom_busy_wait();
     f82:	e1 99       	sbic	0x1c, 1	; 28
     f84:	fe cf       	rjmp	.-4      	; 0xf82 <read_para+0xaa>
	eeprom_write_word((uint16_t *)p, val);
     f86:	69 e1       	ldi	r22, 0x19	; 25
     f88:	76 e0       	ldi	r23, 0x06	; 6
     f8a:	84 e4       	ldi	r24, 0x44	; 68
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	d3 d6       	rcall	.+3494   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     f90:	e1 99       	sbic	0x1c, 1	; 28
     f92:	fe cf       	rjmp	.-4      	; 0xf90 <read_para+0xb8>
	SREG = m_sreg;
     f94:	cf bf       	out	0x3f, r28	; 63
	//版本号
	if(version_h!=eeprom_read_word_user((const uint16_t *)(&m_para[0].e_version_h)))
	{
		eeprom_write_word_user((uint16_t *)(&m_para[0].e_version_h),version_h);
	}
	if(version_l!=eeprom_read_word_user((const uint16_t *)(&m_para[0].e_version_l)))
     f96:	8e eb       	ldi	r24, 0xBE	; 190
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	bf dc       	rcall	.-1666   	; 0x91a <eeprom_read_word_user>
     f9c:	85 30       	cpi	r24, 0x05	; 5
     f9e:	99 40       	sbci	r25, 0x09	; 9
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <read_para+0xcc>
     fa2:	41 c0       	rjmp	.+130    	; 0x1026 <read_para+0x14e>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     fa4:	cf b7       	in	r28, 0x3f	; 63
	cli();
     fa6:	f8 94       	cli
	wdt_reset();
     fa8:	a8 95       	wdr
	eeprom_busy_wait();
     faa:	e1 99       	sbic	0x1c, 1	; 28
     fac:	fe cf       	rjmp	.-4      	; 0xfaa <read_para+0xd2>
	eeprom_write_word((uint16_t *)p, val);
     fae:	65 e0       	ldi	r22, 0x05	; 5
     fb0:	79 e0       	ldi	r23, 0x09	; 9
     fb2:	8e eb       	ldi	r24, 0xBE	; 190
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	bf d6       	rcall	.+3454   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     fb8:	e1 99       	sbic	0x1c, 1	; 28
     fba:	fe cf       	rjmp	.-4      	; 0xfb8 <read_para+0xe0>
	SREG = m_sreg;
     fbc:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     fbe:	cf b7       	in	r28, 0x3f	; 63
	cli();
     fc0:	f8 94       	cli
	wdt_reset();
     fc2:	a8 95       	wdr
	eeprom_busy_wait();
     fc4:	e1 99       	sbic	0x1c, 1	; 28
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <read_para+0xec>
	eeprom_write_word((uint16_t *)p, val);
     fc8:	65 e0       	ldi	r22, 0x05	; 5
     fca:	79 e0       	ldi	r23, 0x09	; 9
     fcc:	80 e2       	ldi	r24, 0x20	; 32
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	b2 d6       	rcall	.+3428   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     fd2:	e1 99       	sbic	0x1c, 1	; 28
     fd4:	fe cf       	rjmp	.-4      	; 0xfd2 <read_para+0xfa>
	SREG = m_sreg;
     fd6:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     fd8:	cf b7       	in	r28, 0x3f	; 63
	cli();
     fda:	f8 94       	cli
	wdt_reset();
     fdc:	a8 95       	wdr
	eeprom_busy_wait();
     fde:	e1 99       	sbic	0x1c, 1	; 28
     fe0:	fe cf       	rjmp	.-4      	; 0xfde <read_para+0x106>
	eeprom_write_word((uint16_t *)p, val);
     fe2:	65 e0       	ldi	r22, 0x05	; 5
     fe4:	79 e0       	ldi	r23, 0x09	; 9
     fe6:	82 e8       	ldi	r24, 0x82	; 130
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	a5 d6       	rcall	.+3402   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
     fec:	e1 99       	sbic	0x1c, 1	; 28
     fee:	fe cf       	rjmp	.-4      	; 0xfec <read_para+0x114>
	SREG = m_sreg;
     ff0:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     ff2:	cf b7       	in	r28, 0x3f	; 63
	cli();
     ff4:	f8 94       	cli
	wdt_reset();
     ff6:	a8 95       	wdr
	eeprom_busy_wait();
     ff8:	e1 99       	sbic	0x1c, 1	; 28
     ffa:	fe cf       	rjmp	.-4      	; 0xff8 <read_para+0x120>
	eeprom_write_word((uint16_t *)p, val);
     ffc:	65 e0       	ldi	r22, 0x05	; 5
     ffe:	79 e0       	ldi	r23, 0x09	; 9
    1000:	84 ee       	ldi	r24, 0xE4	; 228
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	98 d6       	rcall	.+3376   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    1006:	e1 99       	sbic	0x1c, 1	; 28
    1008:	fe cf       	rjmp	.-4      	; 0x1006 <read_para+0x12e>
	SREG = m_sreg;
    100a:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    100c:	cf b7       	in	r28, 0x3f	; 63
	cli();
    100e:	f8 94       	cli
	wdt_reset();
    1010:	a8 95       	wdr
	eeprom_busy_wait();
    1012:	e1 99       	sbic	0x1c, 1	; 28
    1014:	fe cf       	rjmp	.-4      	; 0x1012 <read_para+0x13a>
	eeprom_write_word((uint16_t *)p, val);
    1016:	65 e0       	ldi	r22, 0x05	; 5
    1018:	79 e0       	ldi	r23, 0x09	; 9
    101a:	86 e4       	ldi	r24, 0x46	; 70
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	8b d6       	rcall	.+3350   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    1020:	e1 99       	sbic	0x1c, 1	; 28
    1022:	fe cf       	rjmp	.-4      	; 0x1020 <read_para+0x148>
	SREG = m_sreg;
    1024:	cf bf       	out	0x3f, r28	; 63
	{
		eeprom_write_word_user((uint16_t *)(&m_para[0].e_version_l),version_l);
	}
	//
    //读非易失参数,高低料位设置值
    m_mh_set = eeprom_read_word_user((const uint16_t *)&m_para[0].e_mh);
    1026:	80 ec       	ldi	r24, 0xC0	; 192
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	77 dc       	rcall	.-1810   	; 0x91a <eeprom_read_word_user>
    102c:	90 93 73 01 	sts	0x0173, r25
    1030:	80 93 72 01 	sts	0x0172, r24
    if(m_mh_set > PULSE_TOP)//输出5v
    1034:	80 91 72 01 	lds	r24, 0x0172
    1038:	90 91 73 01 	lds	r25, 0x0173
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	96 49       	sbci	r25, 0x96	; 150
    1040:	b8 f1       	brcs	.+110    	; 0x10b0 <read_para+0x1d8>
	{
        m_mh_set = PULSE_TOP;
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	96 e9       	ldi	r25, 0x96	; 150
    1046:	90 93 73 01 	sts	0x0173, r25
    104a:	80 93 72 01 	sts	0x0172, r24
    else if(m_mh_set < PULSE_BOTTOM)
	{
        m_mh_set = PULSE_BOTTOM+3000;
	}

    smoothingDate = eeprom_read_word_user((const uint16_t *)&m_para[0].smoothingDate);
    104e:	86 ec       	ldi	r24, 0xC6	; 198
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	63 dc       	rcall	.-1850   	; 0x91a <eeprom_read_word_user>
    if(smoothingDate >= 10)//输出5v
    1054:	8a 30       	cpi	r24, 0x0A	; 10
    1056:	91 05       	cpc	r25, r1
    1058:	30 f5       	brcc	.+76     	; 0x10a6 <read_para+0x1ce>
    else if(m_mh_set < PULSE_BOTTOM)
	{
        m_mh_set = PULSE_BOTTOM+3000;
	}

    smoothingDate = eeprom_read_word_user((const uint16_t *)&m_para[0].smoothingDate);
    105a:	90 93 61 00 	sts	0x0061, r25
    105e:	80 93 60 00 	sts	0x0060, r24
	{
        smoothingDate = 0;
	}
	
  	//
    m_ml_set = eeprom_read_word_user((const uint16_t *)&m_para[0].e_ml);
    1062:	82 ec       	ldi	r24, 0xC2	; 194
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	59 dc       	rcall	.-1870   	; 0x91a <eeprom_read_word_user>
    1068:	90 93 75 01 	sts	0x0175, r25
    106c:	80 93 74 01 	sts	0x0174, r24
    if(m_ml_set > m_mh_set)
    1070:	20 91 74 01 	lds	r18, 0x0174
    1074:	30 91 75 01 	lds	r19, 0x0175
    1078:	80 91 72 01 	lds	r24, 0x0172
    107c:	90 91 73 01 	lds	r25, 0x0173
    1080:	82 17       	cp	r24, r18
    1082:	93 07       	cpc	r25, r19
    1084:	18 f1       	brcs	.+70     	; 0x10cc <read_para+0x1f4>
	{
        m_ml_set = m_mh_set-3000;
	}
    else if(m_ml_set < PULSE_BOTTOM)
    1086:	80 91 74 01 	lds	r24, 0x0174
    108a:	90 91 75 01 	lds	r25, 0x0175
    108e:	81 15       	cp	r24, r1
    1090:	99 41       	sbci	r25, 0x19	; 25
    1092:	30 f4       	brcc	.+12     	; 0x10a0 <read_para+0x1c8>
	{
        m_ml_set = PULSE_BOTTOM;
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	99 e1       	ldi	r25, 0x19	; 25
    1098:	90 93 75 01 	sts	0x0175, r25
    109c:	80 93 74 01 	sts	0x0174, r24
	}
}
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret
	}

    smoothingDate = eeprom_read_word_user((const uint16_t *)&m_para[0].smoothingDate);
    if(smoothingDate >= 10)//输出5v
	{
        smoothingDate = 0;
    10a6:	10 92 61 00 	sts	0x0061, r1
    10aa:	10 92 60 00 	sts	0x0060, r1
    10ae:	d9 cf       	rjmp	.-78     	; 0x1062 <read_para+0x18a>
    m_mh_set = eeprom_read_word_user((const uint16_t *)&m_para[0].e_mh);
    if(m_mh_set > PULSE_TOP)//输出5v
	{
        m_mh_set = PULSE_TOP;
	}
    else if(m_mh_set < PULSE_BOTTOM)
    10b0:	80 91 72 01 	lds	r24, 0x0172
    10b4:	90 91 73 01 	lds	r25, 0x0173
    10b8:	81 15       	cp	r24, r1
    10ba:	99 41       	sbci	r25, 0x19	; 25
    10bc:	40 f6       	brcc	.-112    	; 0x104e <read_para+0x176>
	{
        m_mh_set = PULSE_BOTTOM+3000;
    10be:	88 eb       	ldi	r24, 0xB8	; 184
    10c0:	94 e2       	ldi	r25, 0x24	; 36
    10c2:	90 93 73 01 	sts	0x0173, r25
    10c6:	80 93 72 01 	sts	0x0172, r24
    10ca:	c1 cf       	rjmp	.-126    	; 0x104e <read_para+0x176>
	
  	//
    m_ml_set = eeprom_read_word_user((const uint16_t *)&m_para[0].e_ml);
    if(m_ml_set > m_mh_set)
	{
        m_ml_set = m_mh_set-3000;
    10cc:	80 91 72 01 	lds	r24, 0x0172
    10d0:	90 91 73 01 	lds	r25, 0x0173
    10d4:	88 5b       	subi	r24, 0xB8	; 184
    10d6:	9b 40       	sbci	r25, 0x0B	; 11
    10d8:	90 93 75 01 	sts	0x0175, r25
    10dc:	80 93 74 01 	sts	0x0174, r24
	}
    else if(m_ml_set < PULSE_BOTTOM)
	{
        m_ml_set = PULSE_BOTTOM;
	}
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <scan_key>:
////////////////////////////////////////////////////////////////
void scan_key(void)
{
#ifndef __TEST__
	int i;
    if(0 == bkmh)
    10e6:	9a 99       	sbic	0x13, 2	; 19
    10e8:	2f c0       	rjmp	.+94     	; 0x1148 <scan_key+0x62>
    10ea:	8c e2       	ldi	r24, 0x2C	; 44
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <scan_key+0x12>
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    {
        //检测到高料位按键操作
		for(i=300; i>0; i--)
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <scan_key+0x12>
    10f6:	ba c0       	rjmp	.+372    	; 0x126c <scan_key+0x186>
    10f8:	ef e3       	ldi	r30, 0x3F	; 63
    10fa:	ff e1       	ldi	r31, 0x1F	; 31
    10fc:	31 97       	sbiw	r30, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <scan_key+0x16>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <scan_key+0x1c>
    1102:	00 00       	nop
		{
        	_delay_ms(2);
			if(0 != bkmh)
    1104:	9a 9b       	sbis	0x13, 2	; 19
    1106:	f4 cf       	rjmp	.-24     	; 0x10f0 <scan_key+0xa>
        }
    }
#endif

#if IS_MMR_USED == TRUE
	if (send_time_count < 20)
    1108:	20 91 62 00 	lds	r18, 0x0062
    110c:	30 91 63 00 	lds	r19, 0x0063
    1110:	24 31       	cpi	r18, 0x14	; 20
    1112:	31 05       	cpc	r19, r1
    1114:	c0 f4       	brcc	.+48     	; 0x1146 <scan_key+0x60>
	{ 	    
		send_time_count ++; //50ms
    1116:	a9 01       	movw	r20, r18
    1118:	4f 5f       	subi	r20, 0xFF	; 255
    111a:	5f 4f       	sbci	r21, 0xFF	; 255
    111c:	50 93 63 00 	sts	0x0063, r21
    1120:	40 93 62 00 	sts	0x0062, r20
		if (send_time_count >3 && send_time_count%3 ==0)
    1124:	44 30       	cpi	r20, 0x04	; 4
    1126:	51 05       	cpc	r21, r1
    1128:	70 f0       	brcs	.+28     	; 0x1146 <scan_key+0x60>
    112a:	9a 01       	movw	r18, r20
    112c:	ab ea       	ldi	r26, 0xAB	; 171
    112e:	ba ea       	ldi	r27, 0xAA	; 170
    1130:	d8 d5       	rcall	.+2992   	; 0x1ce2 <__umulhisi3>
    1132:	96 95       	lsr	r25
    1134:	87 95       	ror	r24
    1136:	9c 01       	movw	r18, r24
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	28 0f       	add	r18, r24
    113e:	39 1f       	adc	r19, r25
    1140:	42 17       	cp	r20, r18
    1142:	53 07       	cpc	r21, r19
    1144:	d9 f1       	breq	.+118    	; 0x11bc <scan_key+0xd6>
    1146:	08 95       	ret
				_delay_ms(20);
	        }
	        //sei();
		}
    }
    else if(0 == bkml)
    1148:	9b 99       	sbic	0x13, 3	; 19
    114a:	10 c0       	rjmp	.+32     	; 0x116c <scan_key+0x86>
    114c:	8c e2       	ldi	r24, 0x2C	; 44
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	04 c0       	rjmp	.+8      	; 0x115a <scan_key+0x74>
    1152:	01 97       	sbiw	r24, 0x01	; 1
    {
        //检测到低料位按键操作
		for(i=300; i>0; i--)
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	09 f4       	brne	.+2      	; 0x115a <scan_key+0x74>
    1158:	cb c0       	rjmp	.+406    	; 0x12f0 <scan_key+0x20a>
    115a:	ef e3       	ldi	r30, 0x3F	; 63
    115c:	ff e1       	ldi	r31, 0x1F	; 31
    115e:	31 97       	sbiw	r30, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <scan_key+0x78>
    1162:	00 c0       	rjmp	.+0      	; 0x1164 <scan_key+0x7e>
    1164:	00 00       	nop
		{
        	_delay_ms(2);
			if(0 != bkml)
    1166:	9b 9b       	sbis	0x13, 3	; 19
    1168:	f4 cf       	rjmp	.-24     	; 0x1152 <scan_key+0x6c>
    116a:	ce cf       	rjmp	.-100    	; 0x1108 <scan_key+0x22>
	            _delay_ms(20);
	        }
	        //sei();
		}
    }
    else if(1 == command_gaoliaowei)
    116c:	80 91 65 01 	lds	r24, 0x0165
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	09 f4       	brne	.+2      	; 0x1176 <scan_key+0x90>
    1174:	04 c1       	rjmp	.+520    	; 0x137e <scan_key+0x298>
		{
			SetTimer(MT_GAOLIAOWEI_SAVE, 2000, 0);
		}
		#endif		
    }
    else if(1 == command_diliaowei)
    1176:	80 91 66 01 	lds	r24, 0x0166
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	29 f6       	brne	.-118    	; 0x1108 <scan_key+0x22>
    {
        command_diliaowei = 0;
    117e:	10 92 66 01 	sts	0x0166, r1
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    1182:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	44 ec       	ldi	r20, 0xC4	; 196
    1188:	59 e0       	ldi	r21, 0x09	; 9
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	87 eb       	ldi	r24, 0xB7	; 183
    1190:	94 e0       	ldi	r25, 0x04	; 4
    1192:	65 d7       	rcall	.+3786   	; 0x205e <_etext+0x2e4>
		#else
		{
			turn_on_led_ms(2000);
		}
		#endif
        m_ml_set = m_mcur.ms;//标定起作用，延时记录
    1194:	80 91 80 01 	lds	r24, 0x0180
    1198:	90 91 81 01 	lds	r25, 0x0181
    119c:	90 93 75 01 	sts	0x0175, r25
    11a0:	80 93 74 01 	sts	0x0174, r24
        //
        m_cgq_ack=DILIAOWEI;
    11a4:	85 e3       	ldi	r24, 0x35	; 53
    11a6:	80 93 67 01 	sts	0x0167, r24
		//
		#if USED_SMOOTHING == TRUE
		{
			SetTimer(MT_DILIAOWEI_SAVE, 2500, 0);
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	44 ec       	ldi	r20, 0xC4	; 196
    11ae:	59 e0       	ldi	r21, 0x09	; 9
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	85 eb       	ldi	r24, 0xB5	; 181
    11b6:	94 e0       	ldi	r25, 0x04	; 4
    11b8:	52 d7       	rcall	.+3748   	; 0x205e <_etext+0x2e4>
    11ba:	a6 cf       	rjmp	.-180    	; 0x1108 <scan_key+0x22>

void uart_tx_zan(void)
{  
    //中断方式发生串口数据 
    //
    uart_tx_buf[0] = 0xaa;
    11bc:	8a ea       	ldi	r24, 0xAA	; 170
    11be:	80 93 d4 00 	sts	0x00D4, r24

	uart_tx_buf[5] = (zan_m_temp.ms[0] >> 8)&0xff ;
	uart_tx_buf[6] = (zan_m_temp.ms[0] >> 0)&0xff ;
	*/

	uart_tx_buf[1]  = 3;  //地址
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	80 93 d5 00 	sts	0x00D5, r24
	uart_tx_buf[6] =0;
	uart_tx_buf[7] =0;
	uart_tx_buf[8] =0;
	*/

	unsigned m_sreg = SREG;
    11c8:	ff b7       	in	r31, 0x3f	; 63
	cli();
    11ca:	f8 94       	cli
	if (uart_tx_buf[2] ==SMOOTHING_SET)
    11cc:	e0 91 d6 00 	lds	r30, 0x00D6
    11d0:	ea 33       	cpi	r30, 0x3A	; 58
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <scan_key+0xf0>
    11d4:	cf c0       	rjmp	.+414    	; 0x1374 <scan_key+0x28e>
		//uart_tx_buf[4] = m_ml_set & 0xff;

	}
	else
	{		
		uart_tx_buf[3] = m_ml_set >> 8;
    11d6:	80 91 74 01 	lds	r24, 0x0174
    11da:	90 91 75 01 	lds	r25, 0x0175
    11de:	90 93 d7 00 	sts	0x00D7, r25
		uart_tx_buf[4] = m_ml_set & 0xff;
    11e2:	80 91 74 01 	lds	r24, 0x0174
    11e6:	90 91 75 01 	lds	r25, 0x0175
    11ea:	80 93 d8 00 	sts	0x00D8, r24
	}


    uart_tx_buf[5] = m_mh_set >> 8;
    11ee:	60 91 72 01 	lds	r22, 0x0172
    11f2:	70 91 73 01 	lds	r23, 0x0173
    11f6:	70 93 d9 00 	sts	0x00D9, r23
    uart_tx_buf[6] = m_mh_set & 0xff;
    11fa:	40 91 72 01 	lds	r20, 0x0172
    11fe:	50 91 73 01 	lds	r21, 0x0173
    1202:	40 93 da 00 	sts	0x00DA, r20

    uart_tx_buf[7] = m_mcur.ms >> 8;
    1206:	20 91 80 01 	lds	r18, 0x0180
    120a:	30 91 81 01 	lds	r19, 0x0181
    120e:	30 93 db 00 	sts	0x00DB, r19
	uart_tx_buf[8] = m_mcur.ms & 0xff;
    1212:	80 91 80 01 	lds	r24, 0x0180
    1216:	90 91 81 01 	lds	r25, 0x0181
    121a:	80 93 dc 00 	sts	0x00DC, r24
	SREG = m_sreg;
    121e:	ff bf       	out	0x3f, r31	; 63
		unsigned char i;
		//
		uart_tx_buf[9] = 0;
		for(i=0; i<9; i++)
		{
			uart_tx_buf[9] += uart_tx_buf[i];//sum    
    1220:	90 91 d5 00 	lds	r25, 0x00D5
    1224:	20 91 d4 00 	lds	r18, 0x00D4
    1228:	92 0f       	add	r25, r18
    122a:	9e 0f       	add	r25, r30
    122c:	20 91 d7 00 	lds	r18, 0x00D7
    1230:	92 0f       	add	r25, r18
    1232:	20 91 d8 00 	lds	r18, 0x00D8
    1236:	92 0f       	add	r25, r18
    1238:	97 0f       	add	r25, r23
    123a:	94 0f       	add	r25, r20
    123c:	93 0f       	add	r25, r19
    123e:	98 0f       	add	r25, r24
    1240:	90 93 dd 00 	sts	0x00DD, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1244:	ef e1       	ldi	r30, 0x1F	; 31
    1246:	f3 e0       	ldi	r31, 0x03	; 3
    1248:	31 97       	sbiw	r30, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <scan_key+0x162>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <scan_key+0x168>
    124e:	00 00       	nop
	}
    //
    //开始发送数据
    //_delay_us(400);
	_delay_us(200);
    b485en = 1;//发送使能
    1250:	97 9a       	sbi	0x12, 7	; 18
    1252:	8f e8       	ldi	r24, 0x8F	; 143
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <scan_key+0x170>
    125a:	00 c0       	rjmp	.+0      	; 0x125c <scan_key+0x176>
    125c:	00 00       	nop
    _delay_us(100);
    UDR = uart_tx_buf[0];
    125e:	80 91 d4 00 	lds	r24, 0x00D4
    1262:	8c b9       	out	0x0c, r24	; 12
    uart_tx_addr = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	80 93 e0 00 	sts	0x00E0, r24
    126a:	08 95       	ret
			}
		}
		if(0 == i)
		{
	        //cli();
	        if(0 == bkmh)
    126c:	9a 99       	sbic	0x13, 2	; 19
    126e:	4c cf       	rjmp	.-360    	; 0x1108 <scan_key+0x22>
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    1270:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	40 ed       	ldi	r20, 0xD0	; 208
    1276:	57 e0       	ldi	r21, 0x07	; 7
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	87 eb       	ldi	r24, 0xB7	; 183
    127e:	94 e0       	ldi	r25, 0x04	; 4
    1280:	ee d6       	rcall	.+3548   	; 0x205e <_etext+0x2e4>
    1282:	8e e1       	ldi	r24, 0x1E	; 30
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0a c0       	rjmp	.+20     	; 0x129c <scan_key+0x1b6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1288:	ef e3       	ldi	r30, 0x3F	; 63
    128a:	ff e1       	ldi	r31, 0x1F	; 31
    128c:	31 97       	sbiw	r30, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <scan_key+0x1a6>
    1290:	00 c0       	rjmp	.+0      	; 0x1292 <scan_key+0x1ac>
    1292:	00 00       	nop
					if(1==bkmh)
					{
						break;
					}
	                _delay_ms(2);
	                wdt_reset();
    1294:	a8 95       	wdr
    1296:	01 97       	sbiw	r24, 0x01	; 1
				#else
				{
					turn_on_led_ms(2000);
				}
				#endif
	            for(i=30; i>0; i--)
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	11 f0       	breq	.+4      	; 0x12a0 <scan_key+0x1ba>
	            {
					if(1==bkmh)
    129c:	9a 9b       	sbis	0x13, 2	; 19
    129e:	f4 cf       	rjmp	.-24     	; 0x1288 <scan_key+0x1a2>
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    12a0:	8e e1       	ldi	r24, 0x1E	; 30
    12a2:	90 e0       	ldi	r25, 0x00	; 0
	            }
				#if USED_SMOOTHING == TRUE
				{
					for(i=30; i>0; i--)
					{
						wdt_reset();
    12a4:	a8 95       	wdr
    12a6:	ff ef       	ldi	r31, 0xFF	; 255
    12a8:	20 e7       	ldi	r18, 0x70	; 112
    12aa:	32 e0       	ldi	r19, 0x02	; 2
    12ac:	f1 50       	subi	r31, 0x01	; 1
    12ae:	20 40       	sbci	r18, 0x00	; 0
    12b0:	30 40       	sbci	r19, 0x00	; 0
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <scan_key+0x1c6>
    12b4:	00 c0       	rjmp	.+0      	; 0x12b6 <scan_key+0x1d0>
    12b6:	00 00       	nop
    12b8:	01 97       	sbiw	r24, 0x01	; 1
	                _delay_ms(2);
	                wdt_reset();
	            }
				#if USED_SMOOTHING == TRUE
				{
					for(i=30; i>0; i--)
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	99 f7       	brne	.-26     	; 0x12a4 <scan_key+0x1be>
						//m_mh_set = m_mcur.ms; //标定起作用，延时记录
						_delay_ms(50);
					}
				}
				#endif
				m_mh_set = m_mcur.ms; //如果禁止中断，这个采样值不会更新
    12be:	80 91 80 01 	lds	r24, 0x0180
    12c2:	90 91 81 01 	lds	r25, 0x0181
    12c6:	90 93 73 01 	sts	0x0173, r25
    12ca:	80 93 72 01 	sts	0x0172, r24
	            eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
    12ce:	60 91 72 01 	lds	r22, 0x0172
    12d2:	70 91 73 01 	lds	r23, 0x0173
    12d6:	80 ec       	ldi	r24, 0xC0	; 192
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	22 dd       	rcall	.-1468   	; 0xd20 <eeprom_write_word_user>
    12dc:	4f ef       	ldi	r20, 0xFF	; 255
    12de:	89 ef       	ldi	r24, 0xF9	; 249
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	41 50       	subi	r20, 0x01	; 1
    12e4:	80 40       	sbci	r24, 0x00	; 0
    12e6:	90 40       	sbci	r25, 0x00	; 0
    12e8:	e1 f7       	brne	.-8      	; 0x12e2 <scan_key+0x1fc>
    12ea:	00 c0       	rjmp	.+0      	; 0x12ec <scan_key+0x206>
    12ec:	00 00       	nop
    12ee:	0c cf       	rjmp	.-488    	; 0x1108 <scan_key+0x22>
			}
		}
		if(0 == i)
		{
	        //cli();
	        if(0 == bkml)
    12f0:	9b 99       	sbic	0x13, 3	; 19
    12f2:	0a cf       	rjmp	.-492    	; 0x1108 <scan_key+0x22>
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    12f4:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	40 ed       	ldi	r20, 0xD0	; 208
    12fa:	57 e0       	ldi	r21, 0x07	; 7
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	87 eb       	ldi	r24, 0xB7	; 183
    1302:	94 e0       	ldi	r25, 0x04	; 4
    1304:	ac d6       	rcall	.+3416   	; 0x205e <_etext+0x2e4>
    1306:	8e e1       	ldi	r24, 0x1E	; 30
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0a c0       	rjmp	.+20     	; 0x1320 <scan_key+0x23a>
    130c:	ef e3       	ldi	r30, 0x3F	; 63
    130e:	ff e1       	ldi	r31, 0x1F	; 31
    1310:	31 97       	sbiw	r30, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <scan_key+0x22a>
    1314:	00 c0       	rjmp	.+0      	; 0x1316 <scan_key+0x230>
    1316:	00 00       	nop
		            if(1==bkml)
		            {
			            break;
		            }
		            _delay_ms(2);
		            wdt_reset();
    1318:	a8 95       	wdr
    131a:	01 97       	sbiw	r24, 0x01	; 1
		        #else
		        {
			        turn_on_led_ms(2000);
		        }
		        #endif
	            for(i=30; i>0; i--)
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	11 f0       	breq	.+4      	; 0x1324 <scan_key+0x23e>
	            {
		            if(1==bkml)
    1320:	9b 9b       	sbis	0x13, 3	; 19
    1322:	f4 cf       	rjmp	.-24     	; 0x130c <scan_key+0x226>
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1324:	8e e1       	ldi	r24, 0x1E	; 30
    1326:	90 e0       	ldi	r25, 0x00	; 0
	            }
				#if USED_SMOOTHING == TRUE
				{
					for(i=30; i>0; i--)
					{
						wdt_reset();
    1328:	a8 95       	wdr
    132a:	ff ef       	ldi	r31, 0xFF	; 255
    132c:	20 e7       	ldi	r18, 0x70	; 112
    132e:	32 e0       	ldi	r19, 0x02	; 2
    1330:	f1 50       	subi	r31, 0x01	; 1
    1332:	20 40       	sbci	r18, 0x00	; 0
    1334:	30 40       	sbci	r19, 0x00	; 0
    1336:	e1 f7       	brne	.-8      	; 0x1330 <scan_key+0x24a>
    1338:	00 c0       	rjmp	.+0      	; 0x133a <scan_key+0x254>
    133a:	00 00       	nop
    133c:	01 97       	sbiw	r24, 0x01	; 1
		            _delay_ms(2);
		            wdt_reset();
	            }
				#if USED_SMOOTHING == TRUE
				{
					for(i=30; i>0; i--)
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	99 f7       	brne	.-26     	; 0x1328 <scan_key+0x242>
						//m_ml_set = m_mcur.ms;//标定起作用，延时记录
						_delay_ms(50);
					}
				}
				#endif
				m_ml_set = m_mcur.ms; //如果禁止中断，这个采样值不会更新
    1342:	80 91 80 01 	lds	r24, 0x0180
    1346:	90 91 81 01 	lds	r25, 0x0181
    134a:	90 93 75 01 	sts	0x0175, r25
    134e:	80 93 74 01 	sts	0x0174, r24
	            eeprom_write_word_user((uint16_t *)&m_para[0].e_ml, m_ml_set);
    1352:	60 91 74 01 	lds	r22, 0x0174
    1356:	70 91 75 01 	lds	r23, 0x0175
    135a:	82 ec       	ldi	r24, 0xC2	; 194
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	e0 dc       	rcall	.-1600   	; 0xd20 <eeprom_write_word_user>
    1360:	4f ef       	ldi	r20, 0xFF	; 255
    1362:	89 ef       	ldi	r24, 0xF9	; 249
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	41 50       	subi	r20, 0x01	; 1
    1368:	80 40       	sbci	r24, 0x00	; 0
    136a:	90 40       	sbci	r25, 0x00	; 0
    136c:	e1 f7       	brne	.-8      	; 0x1366 <scan_key+0x280>
    136e:	00 c0       	rjmp	.+0      	; 0x1370 <scan_key+0x28a>
    1370:	00 00       	nop
    1372:	ca ce       	rjmp	.-620    	; 0x1108 <scan_key+0x22>

	unsigned m_sreg = SREG;
	cli();
	if (uart_tx_buf[2] ==SMOOTHING_SET)
	{
		uart_tx_buf[3] = smoothingDate;
    1374:	80 91 60 00 	lds	r24, 0x0060
    1378:	80 93 d7 00 	sts	0x00D7, r24
    137c:	38 cf       	rjmp	.-400    	; 0x11ee <scan_key+0x108>
	        //sei();
		}
    }
    else if(1 == command_gaoliaowei)
    {
        command_gaoliaowei = 0;
    137e:	10 92 65 01 	sts	0x0165, r1
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    1382:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	48 eb       	ldi	r20, 0xB8	; 184
    1388:	5b e0       	ldi	r21, 0x0B	; 11
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	87 eb       	ldi	r24, 0xB7	; 183
    1390:	94 e0       	ldi	r25, 0x04	; 4
    1392:	65 d6       	rcall	.+3274   	; 0x205e <_etext+0x2e4>
		#else
		{
			turn_on_led_ms(2000);
		}
		#endif
        m_mh_set = m_mcur.ms;//标定起作用，延时记录
    1394:	80 91 80 01 	lds	r24, 0x0180
    1398:	90 91 81 01 	lds	r25, 0x0181
    139c:	90 93 73 01 	sts	0x0173, r25
    13a0:	80 93 72 01 	sts	0x0172, r24
        //
        m_cgq_ack=GAOLIAOWEI;
    13a4:	84 e3       	ldi	r24, 0x34	; 52
    13a6:	80 93 67 01 	sts	0x0167, r24
		//
		#if USED_SMOOTHING == TRUE
		{
			SetTimer(MT_GAOLIAOWEI_SAVE, 2500, 0);
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	44 ec       	ldi	r20, 0xC4	; 196
    13ae:	59 e0       	ldi	r21, 0x09	; 9
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	84 eb       	ldi	r24, 0xB4	; 180
    13b6:	94 e0       	ldi	r25, 0x04	; 4
    13b8:	52 d6       	rcall	.+3236   	; 0x205e <_etext+0x2e4>
    13ba:	a6 ce       	rjmp	.-692    	; 0x1108 <scan_key+0x22>

000013bc <OnTimer>:
	#endif
}
#endif
/////////////////////////////////////////////////////////////////
void OnTimer(unsigned short id)
{
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
	switch(id)
    13c2:	86 3b       	cpi	r24, 0xB6	; 182
    13c4:	24 e0       	ldi	r18, 0x04	; 4
    13c6:	92 07       	cpc	r25, r18
    13c8:	09 f4       	brne	.+2      	; 0x13cc <OnTimer+0x10>
    13ca:	d1 c0       	rjmp	.+418    	; 0x156e <OnTimer+0x1b2>
    13cc:	08 f0       	brcs	.+2      	; 0x13d0 <OnTimer+0x14>
    13ce:	5e c0       	rjmp	.+188    	; 0x148c <OnTimer+0xd0>
    13d0:	84 3b       	cpi	r24, 0xB4	; 180
    13d2:	24 e0       	ldi	r18, 0x04	; 4
    13d4:	92 07       	cpc	r25, r18
    13d6:	09 f4       	brne	.+2      	; 0x13da <OnTimer+0x1e>
    13d8:	75 c0       	rjmp	.+234    	; 0x14c4 <OnTimer+0x108>
    13da:	85 3b       	cpi	r24, 0xB5	; 181
    13dc:	94 40       	sbci	r25, 0x04	; 4
    13de:	09 f0       	breq	.+2      	; 0x13e2 <OnTimer+0x26>
    13e0:	51 c0       	rjmp	.+162    	; 0x1484 <OnTimer+0xc8>
			m_cgq_ack=GAOLIAOWEI;
		}
		break;
		case MT_DILIAOWEI_SAVE:
		{
			m_ml_set = m_mcur.ms;
    13e2:	80 91 80 01 	lds	r24, 0x0180
    13e6:	90 91 81 01 	lds	r25, 0x0181
    13ea:	90 93 75 01 	sts	0x0175, r25
    13ee:	80 93 74 01 	sts	0x0174, r24
			eeprom_write_word_user((uint16_t *)&m_para[0].e_ml,m_ml_set);
    13f2:	c0 91 74 01 	lds	r28, 0x0174
    13f6:	d0 91 75 01 	lds	r29, 0x0175
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    13fa:	1f b7       	in	r17, 0x3f	; 63
	cli();
    13fc:	f8 94       	cli
	wdt_reset();
    13fe:	a8 95       	wdr
	eeprom_busy_wait();
    1400:	e1 99       	sbic	0x1c, 1	; 28
    1402:	fe cf       	rjmp	.-4      	; 0x1400 <OnTimer+0x44>
	eeprom_write_word((uint16_t *)p, val);
    1404:	be 01       	movw	r22, r28
    1406:	82 ec       	ldi	r24, 0xC2	; 194
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	95 d4       	rcall	.+2346   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    140c:	e1 99       	sbic	0x1c, 1	; 28
    140e:	fe cf       	rjmp	.-4      	; 0x140c <OnTimer+0x50>
	SREG = m_sreg;
    1410:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1412:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1414:	f8 94       	cli
	wdt_reset();
    1416:	a8 95       	wdr
	eeprom_busy_wait();
    1418:	e1 99       	sbic	0x1c, 1	; 28
    141a:	fe cf       	rjmp	.-4      	; 0x1418 <OnTimer+0x5c>
	eeprom_write_word((uint16_t *)p, val);
    141c:	be 01       	movw	r22, r28
    141e:	84 e2       	ldi	r24, 0x24	; 36
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	89 d4       	rcall	.+2322   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    1424:	e1 99       	sbic	0x1c, 1	; 28
    1426:	fe cf       	rjmp	.-4      	; 0x1424 <OnTimer+0x68>
	SREG = m_sreg;
    1428:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    142a:	1f b7       	in	r17, 0x3f	; 63
	cli();
    142c:	f8 94       	cli
	wdt_reset();
    142e:	a8 95       	wdr
	eeprom_busy_wait();
    1430:	e1 99       	sbic	0x1c, 1	; 28
    1432:	fe cf       	rjmp	.-4      	; 0x1430 <OnTimer+0x74>
	eeprom_write_word((uint16_t *)p, val);
    1434:	be 01       	movw	r22, r28
    1436:	86 e8       	ldi	r24, 0x86	; 134
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	7d d4       	rcall	.+2298   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    143c:	e1 99       	sbic	0x1c, 1	; 28
    143e:	fe cf       	rjmp	.-4      	; 0x143c <OnTimer+0x80>
	SREG = m_sreg;
    1440:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1442:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1444:	f8 94       	cli
	wdt_reset();
    1446:	a8 95       	wdr
	eeprom_busy_wait();
    1448:	e1 99       	sbic	0x1c, 1	; 28
    144a:	fe cf       	rjmp	.-4      	; 0x1448 <OnTimer+0x8c>
	eeprom_write_word((uint16_t *)p, val);
    144c:	be 01       	movw	r22, r28
    144e:	88 ee       	ldi	r24, 0xE8	; 232
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	71 d4       	rcall	.+2274   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    1454:	e1 99       	sbic	0x1c, 1	; 28
    1456:	fe cf       	rjmp	.-4      	; 0x1454 <OnTimer+0x98>
	SREG = m_sreg;
    1458:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    145a:	1f b7       	in	r17, 0x3f	; 63
	cli();
    145c:	f8 94       	cli
	wdt_reset();
    145e:	a8 95       	wdr
	eeprom_busy_wait();
    1460:	e1 99       	sbic	0x1c, 1	; 28
    1462:	fe cf       	rjmp	.-4      	; 0x1460 <OnTimer+0xa4>
	eeprom_write_word((uint16_t *)p, val);
    1464:	be 01       	movw	r22, r28
    1466:	8a e4       	ldi	r24, 0x4A	; 74
    1468:	92 e0       	ldi	r25, 0x02	; 2
    146a:	65 d4       	rcall	.+2250   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    146c:	e1 99       	sbic	0x1c, 1	; 28
    146e:	fe cf       	rjmp	.-4      	; 0x146c <OnTimer+0xb0>
	SREG = m_sreg;
    1470:	1f bf       	out	0x3f, r17	; 63
    1472:	8f e3       	ldi	r24, 0x3F	; 63
    1474:	9f e1       	ldi	r25, 0x1F	; 31
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <OnTimer+0xba>
    147a:	00 c0       	rjmp	.+0      	; 0x147c <OnTimer+0xc0>
    147c:	00 00       	nop
		{
			m_ml_set = m_mcur.ms;
			eeprom_write_word_user((uint16_t *)&m_para[0].e_ml,m_ml_set);
			_delay_ms(2);
			//
			m_cgq_ack=DILIAOWEI;
    147e:	85 e3       	ldi	r24, 0x35	; 53
    1480:	80 93 67 01 	sts	0x0167, r24
		}
		break;
	}
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	08 95       	ret
}
#endif
/////////////////////////////////////////////////////////////////
void OnTimer(unsigned short id)
{
	switch(id)
    148c:	87 3b       	cpi	r24, 0xB7	; 183
    148e:	24 e0       	ldi	r18, 0x04	; 4
    1490:	92 07       	cpc	r25, r18
    1492:	89 f0       	breq	.+34     	; 0x14b6 <OnTimer+0xfa>
    1494:	88 3b       	cpi	r24, 0xB8	; 184
    1496:	94 40       	sbci	r25, 0x04	; 4
    1498:	a9 f7       	brne	.-22     	; 0x1484 <OnTimer+0xc8>
		}
		break;
		case MT_LED_RUN:
		{
			//运行灯闪烁
			bled_run = !bled_run;
    149a:	85 b3       	in	r24, 0x15	; 21
    149c:	85 fb       	bst	r24, 5
    149e:	88 27       	eor	r24, r24
    14a0:	80 f9       	bld	r24, 0
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	89 27       	eor	r24, r25
    14a6:	80 fd       	sbrc	r24, 0
    14a8:	ad 9a       	sbi	0x15, 5	; 21
    14aa:	80 ff       	sbrs	r24, 0
    14ac:	ad 98       	cbi	0x15, 5	; 21
			//
			m_cgq_ack=DILIAOWEI;
		}
		break;
	}
}
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	08 95       	ret
	{
		case MT_TEST:
		break;
		case MT_TURN_OFF_LED:
		{
			bled = 0;
    14b6:	ac 98       	cbi	0x15, 4	; 21
			m_cgq_ack=0;//清除应答命令
    14b8:	10 92 67 01 	sts	0x0167, r1
			//
			m_cgq_ack=DILIAOWEI;
		}
		break;
	}
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	08 95       	ret
			scan_key();
		}
		break;
		case MT_GAOLIAOWEI_SAVE:
		{
			m_mh_set = m_mcur.ms;
    14c4:	80 91 80 01 	lds	r24, 0x0180
    14c8:	90 91 81 01 	lds	r25, 0x0181
    14cc:	90 93 73 01 	sts	0x0173, r25
    14d0:	80 93 72 01 	sts	0x0172, r24
			eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
    14d4:	c0 91 72 01 	lds	r28, 0x0172
    14d8:	d0 91 73 01 	lds	r29, 0x0173
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    14dc:	1f b7       	in	r17, 0x3f	; 63
	cli();
    14de:	f8 94       	cli
	wdt_reset();
    14e0:	a8 95       	wdr
	eeprom_busy_wait();
    14e2:	e1 99       	sbic	0x1c, 1	; 28
    14e4:	fe cf       	rjmp	.-4      	; 0x14e2 <OnTimer+0x126>
	eeprom_write_word((uint16_t *)p, val);
    14e6:	be 01       	movw	r22, r28
    14e8:	80 ec       	ldi	r24, 0xC0	; 192
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	24 d4       	rcall	.+2120   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    14ee:	e1 99       	sbic	0x1c, 1	; 28
    14f0:	fe cf       	rjmp	.-4      	; 0x14ee <OnTimer+0x132>
	SREG = m_sreg;
    14f2:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    14f4:	1f b7       	in	r17, 0x3f	; 63
	cli();
    14f6:	f8 94       	cli
	wdt_reset();
    14f8:	a8 95       	wdr
	eeprom_busy_wait();
    14fa:	e1 99       	sbic	0x1c, 1	; 28
    14fc:	fe cf       	rjmp	.-4      	; 0x14fa <OnTimer+0x13e>
	eeprom_write_word((uint16_t *)p, val);
    14fe:	be 01       	movw	r22, r28
    1500:	82 e2       	ldi	r24, 0x22	; 34
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	18 d4       	rcall	.+2096   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    1506:	e1 99       	sbic	0x1c, 1	; 28
    1508:	fe cf       	rjmp	.-4      	; 0x1506 <OnTimer+0x14a>
	SREG = m_sreg;
    150a:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    150c:	1f b7       	in	r17, 0x3f	; 63
	cli();
    150e:	f8 94       	cli
	wdt_reset();
    1510:	a8 95       	wdr
	eeprom_busy_wait();
    1512:	e1 99       	sbic	0x1c, 1	; 28
    1514:	fe cf       	rjmp	.-4      	; 0x1512 <OnTimer+0x156>
	eeprom_write_word((uint16_t *)p, val);
    1516:	be 01       	movw	r22, r28
    1518:	84 e8       	ldi	r24, 0x84	; 132
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	0c d4       	rcall	.+2072   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    151e:	e1 99       	sbic	0x1c, 1	; 28
    1520:	fe cf       	rjmp	.-4      	; 0x151e <OnTimer+0x162>
	SREG = m_sreg;
    1522:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1524:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1526:	f8 94       	cli
	wdt_reset();
    1528:	a8 95       	wdr
	eeprom_busy_wait();
    152a:	e1 99       	sbic	0x1c, 1	; 28
    152c:	fe cf       	rjmp	.-4      	; 0x152a <OnTimer+0x16e>
	eeprom_write_word((uint16_t *)p, val);
    152e:	be 01       	movw	r22, r28
    1530:	86 ee       	ldi	r24, 0xE6	; 230
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	00 d4       	rcall	.+2048   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    1536:	e1 99       	sbic	0x1c, 1	; 28
    1538:	fe cf       	rjmp	.-4      	; 0x1536 <OnTimer+0x17a>
	SREG = m_sreg;
    153a:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    153c:	1f b7       	in	r17, 0x3f	; 63
	cli();
    153e:	f8 94       	cli
	wdt_reset();
    1540:	a8 95       	wdr
	eeprom_busy_wait();
    1542:	e1 99       	sbic	0x1c, 1	; 28
    1544:	fe cf       	rjmp	.-4      	; 0x1542 <OnTimer+0x186>
	eeprom_write_word((uint16_t *)p, val);
    1546:	be 01       	movw	r22, r28
    1548:	88 e4       	ldi	r24, 0x48	; 72
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	f4 d3       	rcall	.+2024   	; 0x1d36 <__eewr_word_m8a>
	eeprom_busy_wait();
    154e:	e1 99       	sbic	0x1c, 1	; 28
    1550:	fe cf       	rjmp	.-4      	; 0x154e <OnTimer+0x192>
	SREG = m_sreg;
    1552:	1f bf       	out	0x3f, r17	; 63
    1554:	8f e3       	ldi	r24, 0x3F	; 63
    1556:	9f e1       	ldi	r25, 0x1F	; 31
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <OnTimer+0x19c>
    155c:	00 c0       	rjmp	.+0      	; 0x155e <OnTimer+0x1a2>
    155e:	00 00       	nop
		{
			m_mh_set = m_mcur.ms;
			eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
			_delay_ms(2);
			//
			m_cgq_ack=GAOLIAOWEI;
    1560:	84 e3       	ldi	r24, 0x34	; 52
    1562:	80 93 67 01 	sts	0x0167, r24
			//
			m_cgq_ack=DILIAOWEI;
		}
		break;
	}
}
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	08 95       	ret
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
			bled_run = !bled_run;
		}
		break;
		case MT_SCAN_KEY:
		{
			scan_key();
    1574:	b8 cd       	rjmp	.-1168   	; 0x10e6 <scan_key>

00001576 <liaowei_sample_ok_handling>:
		break;
	}
}
/////////////////////////////////////////////////////////////////
void liaowei_sample_ok_handling(void)
{
    1576:	0f 93       	push	r16
	UCHAR4 m_temp;
	//
	m_mcur.ms = pulse_value_handling(m_mcur.ms);//平滑处理
    1578:	e0 91 80 01 	lds	r30, 0x0180
    157c:	f0 91 81 01 	lds	r31, 0x0181
	//
	#if USED_SMOOTHING == TRUE
	{
		unsigned short tmp;
		//
		m_pulse_value_bak.mll <<= 16;
    1580:	20 91 c8 00 	lds	r18, 0x00C8
    1584:	30 91 c9 00 	lds	r19, 0x00C9
    1588:	40 91 ca 00 	lds	r20, 0x00CA
    158c:	50 91 cb 00 	lds	r21, 0x00CB
    1590:	60 91 cc 00 	lds	r22, 0x00CC
    1594:	70 91 cd 00 	lds	r23, 0x00CD
    1598:	80 91 ce 00 	lds	r24, 0x00CE
    159c:	90 91 cf 00 	lds	r25, 0x00CF
    15a0:	00 e1       	ldi	r16, 0x10	; 16
    15a2:	ab d3       	rcall	.+1878   	; 0x1cfa <__ashldi3>
    15a4:	40 93 ca 00 	sts	0x00CA, r20
    15a8:	50 93 cb 00 	sts	0x00CB, r21
    15ac:	60 93 cc 00 	sts	0x00CC, r22
    15b0:	70 93 cd 00 	sts	0x00CD, r23
    15b4:	80 93 ce 00 	sts	0x00CE, r24
    15b8:	90 93 cf 00 	sts	0x00CF, r25
		m_pulse_value_bak.ms[0] = val;
    15bc:	f0 93 c9 00 	sts	0x00C9, r31
    15c0:	e0 93 c8 00 	sts	0x00C8, r30
		//
		/*tmp = (unsigned short)(m_pulse_value_bak.ms[0]/8);
		tmp += (unsigned short)(m_pulse_value_bak.ms[1]/2);
		tmp += (unsigned short)(m_pulse_value_bak.ms[2]/4);*/
		if (smoothingDate !=0)
    15c4:	80 91 60 00 	lds	r24, 0x0060
    15c8:	90 91 61 00 	lds	r25, 0x0061
    15cc:	89 2b       	or	r24, r25
    15ce:	c1 f0       	breq	.+48     	; 0x1600 <liaowei_sample_ok_handling+0x8a>
		{
			tmp = ((unsigned short)(m_pulse_value_bak.ms[1])/10*smoothingDate)
    15d0:	20 91 ca 00 	lds	r18, 0x00CA
    15d4:	30 91 cb 00 	lds	r19, 0x00CB
    15d8:	ad ec       	ldi	r26, 0xCD	; 205
    15da:	bc ec       	ldi	r27, 0xCC	; 204
    15dc:	82 d3       	rcall	.+1796   	; 0x1ce2 <__umulhisi3>
    15de:	96 95       	lsr	r25
    15e0:	87 95       	ror	r24
    15e2:	96 95       	lsr	r25
    15e4:	87 95       	ror	r24
    15e6:	96 95       	lsr	r25
    15e8:	87 95       	ror	r24
    15ea:	fc 01       	movw	r30, r24
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	e8 0f       	add	r30, r24
    15fe:	f9 1f       	adc	r31, r25
/////////////////////////////////////////////////////////////////
void liaowei_sample_ok_handling(void)
{
	UCHAR4 m_temp;
	//
	m_mcur.ms = pulse_value_handling(m_mcur.ms);//平滑处理
    1600:	f0 93 81 01 	sts	0x0181, r31
    1604:	e0 93 80 01 	sts	0x0180, r30
	//
	if(m_mcur.ms > PULSE_TOP)
    1608:	80 91 80 01 	lds	r24, 0x0180
    160c:	90 91 81 01 	lds	r25, 0x0181
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	96 49       	sbci	r25, 0x96	; 150
    1614:	30 f0       	brcs	.+12     	; 0x1622 <liaowei_sample_ok_handling+0xac>
	{
		m_mcur.ms = PULSE_TOP;
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	96 e9       	ldi	r25, 0x96	; 150
    161a:	90 93 81 01 	sts	0x0181, r25
    161e:	80 93 80 01 	sts	0x0180, r24
	//OCR1A = PWM_TOP/2; //for test
	//return;
	//
	//计算pwm电压输出
	#ifndef __TEST__
	if(m_mcur.ms <= (m_ml_set+3))
    1622:	20 91 80 01 	lds	r18, 0x0180
    1626:	30 91 81 01 	lds	r19, 0x0181
    162a:	80 91 74 01 	lds	r24, 0x0174
    162e:	90 91 75 01 	lds	r25, 0x0175
    1632:	03 96       	adiw	r24, 0x03	; 3
    1634:	82 17       	cp	r24, r18
    1636:	93 07       	cpc	r25, r19
    1638:	08 f0       	brcs	.+2      	; 0x163c <liaowei_sample_ok_handling+0xc6>
    163a:	56 c0       	rjmp	.+172    	; 0x16e8 <liaowei_sample_ok_handling+0x172>
	{
		m_cur_pwm.ms = (PWM_TOP/5)-3;//150//200
		OCR1A = (unsigned short)PWM_TOP-m_cur_pwm.ms;//800,1v
	}
	else if(m_mcur.ms >= (m_mh_set-4))
    163c:	20 91 80 01 	lds	r18, 0x0180
    1640:	30 91 81 01 	lds	r19, 0x0181
    1644:	80 91 72 01 	lds	r24, 0x0172
    1648:	90 91 73 01 	lds	r25, 0x0173
    164c:	04 97       	sbiw	r24, 0x04	; 4
    164e:	28 17       	cp	r18, r24
    1650:	39 07       	cpc	r19, r25
    1652:	c0 f5       	brcc	.+112    	; 0x16c4 <liaowei_sample_ok_handling+0x14e>
	}
	else
	{
		//1v <= out <= 5v
		unsigned short m_offset;
		m_offset = m_mcur.ms-m_ml_set;//当前测得的值减去低位设置值
    1654:	20 91 80 01 	lds	r18, 0x0180
    1658:	30 91 81 01 	lds	r19, 0x0181
    165c:	80 91 74 01 	lds	r24, 0x0174
    1660:	90 91 75 01 	lds	r25, 0x0175
    1664:	28 1b       	sub	r18, r24
    1666:	39 0b       	sbc	r19, r25
		m_temp.ml = m_offset;
		m_temp.ml *= (unsigned short)((PWM_TOP/5)*4);//等距的平分1v到5v
		m_offset = m_mh_set-m_ml_set;//高位设置值减去低位设置值
    1668:	40 91 72 01 	lds	r20, 0x0172
    166c:	50 91 73 01 	lds	r21, 0x0173
    1670:	80 91 74 01 	lds	r24, 0x0174
    1674:	90 91 75 01 	lds	r25, 0x0175
    1678:	48 1b       	sub	r20, r24
    167a:	59 0b       	sbc	r21, r25
		m_temp.ml += m_offset>>1;//四舍五入
    167c:	fa 01       	movw	r30, r20
    167e:	f6 95       	lsr	r31
    1680:	e7 95       	ror	r30
	{
		//1v <= out <= 5v
		unsigned short m_offset;
		m_offset = m_mcur.ms-m_ml_set;//当前测得的值减去低位设置值
		m_temp.ml = m_offset;
		m_temp.ml *= (unsigned short)((PWM_TOP/5)*4);//等距的平分1v到5v
    1682:	a0 e4       	ldi	r26, 0x40	; 64
    1684:	b1 e0       	ldi	r27, 0x01	; 1
    1686:	2d d3       	rcall	.+1626   	; 0x1ce2 <__umulhisi3>
		m_offset = m_mh_set-m_ml_set;//高位设置值减去低位设置值
		m_temp.ml += m_offset>>1;//四舍五入
    1688:	6e 0f       	add	r22, r30
    168a:	7f 1f       	adc	r23, r31
    168c:	81 1d       	adc	r24, r1
    168e:	91 1d       	adc	r25, r1
		m_temp.ml /= m_offset;
    1690:	9a 01       	movw	r18, r20
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	03 d3       	rcall	.+1542   	; 0x1c9e <__udivmodsi4>
		m_temp.ms[0] += (PWM_TOP/5);//加入最低的1v
    1698:	20 5b       	subi	r18, 0xB0	; 176
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	20 39       	cpi	r18, 0x90	; 144
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	38 07       	cpc	r19, r24
    16a2:	28 f5       	brcc	.+74     	; 0x16ee <liaowei_sample_ok_handling+0x178>
				OCR1A=(unsigned short)PWM_TOP-m_cur_pwm.ms;
			}
		}
		#else
		{
			m_cur_pwm.ms = m_temp.ms[0];
    16a4:	30 93 71 01 	sts	0x0171, r19
    16a8:	20 93 70 01 	sts	0x0170, r18
			OCR1A=(unsigned short)PWM_TOP-m_cur_pwm.ms;
    16ac:	20 91 70 01 	lds	r18, 0x0170
    16b0:	30 91 71 01 	lds	r19, 0x0171
    16b4:	80 e9       	ldi	r24, 0x90	; 144
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	82 1b       	sub	r24, r18
    16ba:	93 0b       	sbc	r25, r19
    16bc:	9b bd       	out	0x2b, r25	; 43
    16be:	8a bd       	out	0x2a, r24	; 42
	#if USART_TEST == TRUE
	{
		uart_send_enable=1;//串口发送使能
	}
	#endif	
}
    16c0:	0f 91       	pop	r16
    16c2:	08 95       	ret
		m_cur_pwm.ms = (PWM_TOP/5)-3;//150//200
		OCR1A = (unsigned short)PWM_TOP-m_cur_pwm.ms;//800,1v
	}
	else if(m_mcur.ms >= (m_mh_set-4))
	{
		m_cur_pwm.ms = PWM_TOP-1;
    16c4:	8f e8       	ldi	r24, 0x8F	; 143
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	90 93 71 01 	sts	0x0171, r25
    16cc:	80 93 70 01 	sts	0x0170, r24
		OCR1A = (unsigned short)PWM_TOP-m_cur_pwm.ms;//1,5v
    16d0:	20 91 70 01 	lds	r18, 0x0170
    16d4:	30 91 71 01 	lds	r19, 0x0171
    16d8:	80 e9       	ldi	r24, 0x90	; 144
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	82 1b       	sub	r24, r18
    16de:	93 0b       	sbc	r25, r19
    16e0:	9b bd       	out	0x2b, r25	; 43
    16e2:	8a bd       	out	0x2a, r24	; 42
	#if USART_TEST == TRUE
	{
		uart_send_enable=1;//串口发送使能
	}
	#endif	
}
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret
	//
	//计算pwm电压输出
	#ifndef __TEST__
	if(m_mcur.ms <= (m_ml_set+3))
	{
		m_cur_pwm.ms = (PWM_TOP/5)-3;//150//200
    16e8:	8d e4       	ldi	r24, 0x4D	; 77
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	ed cf       	rjmp	.-38     	; 0x16c8 <liaowei_sample_ok_handling+0x152>
    16ee:	2f e8       	ldi	r18, 0x8F	; 143
    16f0:	31 e0       	ldi	r19, 0x01	; 1
    16f2:	d8 cf       	rjmp	.-80     	; 0x16a4 <liaowei_sample_ok_handling+0x12e>

000016f4 <main>:
unsigned int send_time_count = 0;
unsigned int smoothingDate =0;
//
int main()
{    
    cli();
    16f4:	f8 94       	cli
    16f6:	2f ef       	ldi	r18, 0xFF	; 255
    16f8:	80 e7       	ldi	r24, 0x70	; 112
    16fa:	92 e0       	ldi	r25, 0x02	; 2
    16fc:	21 50       	subi	r18, 0x01	; 1
    16fe:	80 40       	sbci	r24, 0x00	; 0
    1700:	90 40       	sbci	r25, 0x00	; 0
    1702:	e1 f7       	brne	.-8      	; 0x16fc <main+0x8>
    1704:	00 c0       	rjmp	.+0      	; 0x1706 <main+0x12>
    1706:	00 00       	nop
    _delay_ms(50);
    hardward_init();
    1708:	41 d8       	rcall	.-3966   	; 0x78c <hardward_init>
    softward_init();
    170a:	86 d8       	rcall	.-3828   	; 0x818 <softward_init>
    170c:	2f ef       	ldi	r18, 0xFF	; 255
    170e:	81 ee       	ldi	r24, 0xE1	; 225
    1710:	94 e0       	ldi	r25, 0x04	; 4
    1712:	21 50       	subi	r18, 0x01	; 1
    1714:	80 40       	sbci	r24, 0x00	; 0
    1716:	90 40       	sbci	r25, 0x00	; 0
    1718:	e1 f7       	brne	.-8      	; 0x1712 <main+0x1e>
    171a:	00 c0       	rjmp	.+0      	; 0x171c <main+0x28>
    171c:	00 00       	nop
    _delay_ms(100);
    read_para();
    171e:	dc db       	rcall	.-2120   	; 0xed8 <read_para>
    sei();//启动全局中断
    1720:	78 94       	sei
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    1722:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	4c ed       	ldi	r20, 0xDC	; 220
    1728:	55 e0       	ldi	r21, 0x05	; 5
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	87 eb       	ldi	r24, 0xB7	; 183
    1730:	94 e0       	ldi	r25, 0x04	; 4
    1732:	95 d4       	rcall	.+2346   	; 0x205e <_etext+0x2e4>
	}
	#endif
	//
	turn_on_led_ms(1500);
    //
	SetTimer(MT_SCAN_KEY, 50, -1); //按键扫描
    1734:	2f ef       	ldi	r18, 0xFF	; 255
    1736:	42 e3       	ldi	r20, 0x32	; 50
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	86 eb       	ldi	r24, 0xB6	; 182
    1740:	94 e0       	ldi	r25, 0x04	; 4
    1742:	8d d4       	rcall	.+2330   	; 0x205e <_etext+0x2e4>
	SetTimer(MT_LED_RUN, 1000, -1); //运行灯闪烁
    1744:	2f ef       	ldi	r18, 0xFF	; 255
    1746:	48 ee       	ldi	r20, 0xE8	; 232
    1748:	53 e0       	ldi	r21, 0x03	; 3
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	88 eb       	ldi	r24, 0xB8	; 184
    1750:	94 e0       	ldi	r25, 0x04	; 4
    1752:	85 d4       	rcall	.+2314   	; 0x205e <_etext+0x2e4>
	//	
	wdt_enable(WDTO_2S);//启动看门狗定时器
    1754:	2f e0       	ldi	r18, 0x0F	; 15
    1756:	88 e1       	ldi	r24, 0x18	; 24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	a8 95       	wdr
    1760:	80 93 41 00 	sts	0x0041, r24
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	20 93 41 00 	sts	0x0041, r18
		{
			if(comm_error_delay > 200)//2秒
			{
				#if USART_TEST == FALSE
				{
					bled = !bled;
    176a:	c1 e0       	ldi	r28, 0x01	; 1
	//	
	wdt_enable(WDTO_2S);//启动看门狗定时器
	//
    for(;;)
    {
        wdt_reset();//喂狗
    176c:	a8 95       	wdr
        //
        //接收到了正确的数据后,发送应答帧
        if(1 == uart_send_enable)
    176e:	80 91 87 01 	lds	r24, 0x0187
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	d9 f1       	breq	.+118    	; 0x17ec <main+0xf8>
#if IS_MMR_USED == FALSE
            uart_tx();
#endif
        }
		//
		if(pulse_value_counter > 0)
    1776:	80 91 8a 01 	lds	r24, 0x018A
    177a:	81 11       	cpse	r24, r1
    177c:	3d c0       	rjmp	.+122    	; 0x17f8 <main+0x104>
			pulse_value_read_id++;
			pulse_value_read_id %= PULSE_VALUE_NUM;
		}
		//
		//避免boot_time读取过程中值被中断更新
		if(boot_time_sub > 0)
    177e:	80 91 89 01 	lds	r24, 0x0189
    1782:	88 23       	and	r24, r24
    1784:	c1 f0       	breq	.+48     	; 0x17b6 <main+0xc2>
		{
			boot_time += boot_time_sub;
    1786:	20 91 89 01 	lds	r18, 0x0189
    178a:	80 91 82 01 	lds	r24, 0x0182
    178e:	90 91 83 01 	lds	r25, 0x0183
    1792:	a0 91 84 01 	lds	r26, 0x0184
    1796:	b0 91 85 01 	lds	r27, 0x0185
    179a:	82 0f       	add	r24, r18
    179c:	91 1d       	adc	r25, r1
    179e:	a1 1d       	adc	r26, r1
    17a0:	b1 1d       	adc	r27, r1
    17a2:	80 93 82 01 	sts	0x0182, r24
    17a6:	90 93 83 01 	sts	0x0183, r25
    17aa:	a0 93 84 01 	sts	0x0184, r26
    17ae:	b0 93 85 01 	sts	0x0185, r27
			boot_time_sub = 0;
    17b2:	10 92 89 01 	sts	0x0189, r1
		#if 1
		{
			//单位：分钟
			#define UPDATE_EEPROM_DATA_INTERVAL	60
			//
			if(m_minute > UPDATE_EEPROM_DATA_INTERVAL)
    17b6:	80 91 6a 01 	lds	r24, 0x016A
    17ba:	90 91 6b 01 	lds	r25, 0x016B
    17be:	cd 97       	sbiw	r24, 0x3d	; 61
    17c0:	08 f0       	brcs	.+2      	; 0x17c4 <main+0xd0>
    17c2:	d6 c0       	rjmp	.+428    	; 0x1970 <main+0x27c>
		#endif
		//
        //485通信中断的时候红灯常亮
		#if 1
		{
			if(comm_error_delay > 200)//2秒
    17c4:	80 91 6f 01 	lds	r24, 0x016F
    17c8:	89 3c       	cpi	r24, 0xC9	; 201
    17ca:	50 f0       	brcs	.+20     	; 0x17e0 <main+0xec>
			{
				#if USART_TEST == FALSE
				{
					bled = !bled;
    17cc:	85 b3       	in	r24, 0x15	; 21
    17ce:	82 95       	swap	r24
    17d0:	81 70       	andi	r24, 0x01	; 1
    17d2:	8c 27       	eor	r24, r28
    17d4:	80 fd       	sbrc	r24, 0
    17d6:	ac 9a       	sbi	0x15, 4	; 21
    17d8:	80 ff       	sbrs	r24, 0
    17da:	ac 98       	cbi	0x15, 4	; 21
					comm_error_delay = 0;
    17dc:	10 92 6f 01 	sts	0x016F, r1
				#endif
			}
		}
		#endif
		//
		timer_run();
    17e0:	1c d5       	rcall	.+2616   	; 0x221a <_etext+0x4a0>
	//	
	wdt_enable(WDTO_2S);//启动看门狗定时器
	//
    for(;;)
    {
        wdt_reset();//喂狗
    17e2:	a8 95       	wdr
        //
        //接收到了正确的数据后,发送应答帧
        if(1 == uart_send_enable)
    17e4:	80 91 87 01 	lds	r24, 0x0187
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	29 f6       	brne	.-118    	; 0x1776 <main+0x82>
        {
            uart_send_enable = 0;
    17ec:	10 92 87 01 	sts	0x0187, r1
#if IS_MMR_USED == FALSE
            uart_tx();
#endif
        }
		//
		if(pulse_value_counter > 0)
    17f0:	80 91 8a 01 	lds	r24, 0x018A
    17f4:	88 23       	and	r24, r24
    17f6:	19 f2       	breq	.-122    	; 0x177e <main+0x8a>
		{
			pulse_value_counter--;
    17f8:	80 91 8a 01 	lds	r24, 0x018A
    17fc:	81 50       	subi	r24, 0x01	; 1
    17fe:	80 93 8a 01 	sts	0x018A, r24
			//
			int1_handling(pulse_value[pulse_value_read_id]);
    1802:	e0 91 df 00 	lds	r30, 0x00DF
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	ef 51       	subi	r30, 0x1F	; 31
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
/////////////////////////////////////////////////////////////////
void int1_handling(unsigned char val)
{
	UCHAR4 m_temp;
	//
	m_temp.ms[0] = val;
    1814:	99 27       	eor	r25, r25
		m_pulse_value_rc = ((m_pulse_value_rc*10+5)/11) + ((m_temp.ms[0]+5)/11);
		m_temp.ms[0] = m_pulse_value_rc;
	}
	#else
	{
		m_pulse_value_rc = ((m_pulse_value_rc<<5)-(m_pulse_value_rc<<1))>>5;
    1816:	60 91 c6 00 	lds	r22, 0x00C6
    181a:	70 91 c7 00 	lds	r23, 0x00C7
		m_temp.ms[0] = ((m_temp.ms[0]<<1)+m_temp.ms[0])>>5;
    181e:	9c 01       	movw	r18, r24
    1820:	22 0f       	add	r18, r18
    1822:	33 1f       	adc	r19, r19
    1824:	28 0f       	add	r18, r24
    1826:	39 1f       	adc	r19, r25
    1828:	36 95       	lsr	r19
    182a:	27 95       	ror	r18
    182c:	32 95       	swap	r19
    182e:	22 95       	swap	r18
    1830:	2f 70       	andi	r18, 0x0F	; 15
    1832:	23 27       	eor	r18, r19
    1834:	3f 70       	andi	r19, 0x0F	; 15
    1836:	23 27       	eor	r18, r19
		m_pulse_value_rc = ((m_pulse_value_rc*10+5)/11) + ((m_temp.ms[0]+5)/11);
		m_temp.ms[0] = m_pulse_value_rc;
	}
	#else
	{
		m_pulse_value_rc = ((m_pulse_value_rc<<5)-(m_pulse_value_rc<<1))>>5;
    1838:	4e e1       	ldi	r20, 0x1E	; 30
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	64 9f       	mul	r22, r20
    183e:	c0 01       	movw	r24, r0
    1840:	65 9f       	mul	r22, r21
    1842:	90 0d       	add	r25, r0
    1844:	74 9f       	mul	r23, r20
    1846:	90 0d       	add	r25, r0
    1848:	11 24       	eor	r1, r1
    184a:	96 95       	lsr	r25
    184c:	87 95       	ror	r24
    184e:	92 95       	swap	r25
    1850:	82 95       	swap	r24
    1852:	8f 70       	andi	r24, 0x0F	; 15
    1854:	89 27       	eor	r24, r25
    1856:	9f 70       	andi	r25, 0x0F	; 15
    1858:	89 27       	eor	r24, r25
		m_temp.ms[0] = ((m_temp.ms[0]<<1)+m_temp.ms[0])>>5;
		m_pulse_value_rc += m_temp.ms[0];
    185a:	28 0f       	add	r18, r24
    185c:	39 1f       	adc	r19, r25
    185e:	30 93 c7 00 	sts	0x00C7, r19
    1862:	20 93 c6 00 	sts	0x00C6, r18
		m_temp.ms[0] = m_pulse_value_rc;
	}
	#endif
	//
	m_pulse_value.ml += m_temp.ms[0];
    1866:	80 91 d0 00 	lds	r24, 0x00D0
    186a:	90 91 d1 00 	lds	r25, 0x00D1
    186e:	a0 91 d2 00 	lds	r26, 0x00D2
    1872:	b0 91 d3 00 	lds	r27, 0x00D3
    1876:	82 0f       	add	r24, r18
    1878:	93 1f       	adc	r25, r19
    187a:	a1 1d       	adc	r26, r1
    187c:	b1 1d       	adc	r27, r1
    187e:	80 93 d0 00 	sts	0x00D0, r24
    1882:	90 93 d1 00 	sts	0x00D1, r25
    1886:	a0 93 d2 00 	sts	0x00D2, r26
    188a:	b0 93 d3 00 	sts	0x00D3, r27
	m_pulse_counter++;
    188e:	80 91 8b 01 	lds	r24, 0x018B
    1892:	90 91 8c 01 	lds	r25, 0x018C
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	90 93 8c 01 	sts	0x018C, r25
    189c:	80 93 8b 01 	sts	0x018B, r24
	//
	//软件中用的采样率是10KHz
	if(m_pulse_counter > ((unsigned short)32*1024))//采集刷新时间约2秒      //32 //16 //8        //4096=2^12  //2048=2^11  //1024=2^10  //512=2^9  //256=2^8
    18a0:	80 91 8b 01 	lds	r24, 0x018B
    18a4:	90 91 8c 01 	lds	r25, 0x018C
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	90 48       	sbci	r25, 0x80	; 128
    18ac:	08 f4       	brcc	.+2      	; 0x18b0 <main+0x1bc>
    18ae:	55 c0       	rjmp	.+170    	; 0x195a <main+0x266>
	{
		m_pulse_value.ml <<= (6-5);                       //5   //4  //3       //16-12      //16-11      //16-10      //16-9     //16-8
    18b0:	80 91 d0 00 	lds	r24, 0x00D0
    18b4:	90 91 d1 00 	lds	r25, 0x00D1
    18b8:	a0 91 d2 00 	lds	r26, 0x00D2
    18bc:	b0 91 d3 00 	lds	r27, 0x00D3
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	aa 1f       	adc	r26, r26
    18c6:	bb 1f       	adc	r27, r27
    18c8:	80 93 d0 00 	sts	0x00D0, r24
    18cc:	90 93 d1 00 	sts	0x00D1, r25
    18d0:	a0 93 d2 00 	sts	0x00D2, r26
    18d4:	b0 93 d3 00 	sts	0x00D3, r27
		m_pulse_value.ml <<= SAMPLE_SHIFT_BIT_NUM;
    18d8:	80 91 d0 00 	lds	r24, 0x00D0
    18dc:	90 91 d1 00 	lds	r25, 0x00D1
    18e0:	a0 91 d2 00 	lds	r26, 0x00D2
    18e4:	b0 91 d3 00 	lds	r27, 0x00D3
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	aa 1f       	adc	r26, r26
    18ee:	bb 1f       	adc	r27, r27
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	aa 1f       	adc	r26, r26
    18f6:	bb 1f       	adc	r27, r27
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	aa 1f       	adc	r26, r26
    18fe:	bb 1f       	adc	r27, r27
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	aa 1f       	adc	r26, r26
    1906:	bb 1f       	adc	r27, r27
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	aa 1f       	adc	r26, r26
    190e:	bb 1f       	adc	r27, r27
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	aa 1f       	adc	r26, r26
    1916:	bb 1f       	adc	r27, r27
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	aa 1f       	adc	r26, r26
    191e:	bb 1f       	adc	r27, r27
    1920:	80 93 d0 00 	sts	0x00D0, r24
    1924:	90 93 d1 00 	sts	0x00D1, r25
    1928:	a0 93 d2 00 	sts	0x00D2, r26
    192c:	b0 93 d3 00 	sts	0x00D3, r27
		m_mcur.ms = m_pulse_value.ms[1];//丢弃低16位,相当于除以2^16
    1930:	80 91 d2 00 	lds	r24, 0x00D2
    1934:	90 91 d3 00 	lds	r25, 0x00D3
    1938:	90 93 81 01 	sts	0x0181, r25
    193c:	80 93 80 01 	sts	0x0180, r24
		//
		m_pulse_counter = 0;
    1940:	10 92 8c 01 	sts	0x018C, r1
    1944:	10 92 8b 01 	sts	0x018B, r1
		m_pulse_value.ml = 0;
    1948:	10 92 d0 00 	sts	0x00D0, r1
    194c:	10 92 d1 00 	sts	0x00D1, r1
    1950:	10 92 d2 00 	sts	0x00D2, r1
    1954:	10 92 d3 00 	sts	0x00D3, r1
		//
		liaowei_sample_ok_handling();
    1958:	0e de       	rcall	.-996    	; 0x1576 <liaowei_sample_ok_handling>
		if(pulse_value_counter > 0)
		{
			pulse_value_counter--;
			//
			int1_handling(pulse_value[pulse_value_read_id]);
			pulse_value_read_id++;
    195a:	80 91 df 00 	lds	r24, 0x00DF
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	80 93 df 00 	sts	0x00DF, r24
			pulse_value_read_id %= PULSE_VALUE_NUM;
    1964:	80 91 df 00 	lds	r24, 0x00DF
    1968:	8f 73       	andi	r24, 0x3F	; 63
    196a:	80 93 df 00 	sts	0x00DF, r24
    196e:	07 cf       	rjmp	.-498    	; 0x177e <main+0x8a>
			//
			if(m_minute > UPDATE_EEPROM_DATA_INTERVAL)
			{
				//刷新一下内存里的参数，同时也会更新eeprom里的错误参数（如果出现错误的话）
				//
				read_para();
    1970:	b3 da       	rcall	.-2714   	; 0xed8 <read_para>
				//
				m_minute = 0;
    1972:	10 92 6b 01 	sts	0x016B, r1
    1976:	10 92 6a 01 	sts	0x016A, r1
    197a:	24 cf       	rjmp	.-440    	; 0x17c4 <main+0xd0>

0000197c <__vector_9>:
/////////////////////////////////////////////////////////////////
//
//定时器0作为全局定时器,用来管理所有任务的调度
//
ISR(TIMER0_OVF_vect/*,ISR_NOBLOCK*/)//加入ISR_NOBLOCK属性,在中断服务程序中允许中断套嵌
{	
    197c:	1f 92       	push	r1
    197e:	0f 92       	push	r0
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	0f 92       	push	r0
    1984:	11 24       	eor	r1, r1
    1986:	8f 93       	push	r24
    1988:	9f 93       	push	r25
	{
		TCNT0 = 255-62;//4MHz时钟,64分频,计数62次,定时约1毫秒
	}
	#elif F_CPU == F_16M
	{
		TCNT0 = 255-250;//16MHz时钟,64分频,计数62次,定时约1毫秒
    198a:	85 e0       	ldi	r24, 0x05	; 5
    198c:	82 bf       	out	0x32, r24	; 50
		adsc = 1;
	}
	#endif
	///////////////
	//1ms
	ms1_counter++;
    198e:	80 91 61 01 	lds	r24, 0x0161
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 93 61 01 	sts	0x0161, r24
    boot_time_sub++;
    1998:	90 91 89 01 	lds	r25, 0x0189
    199c:	9f 5f       	subi	r25, 0xFF	; 255
    199e:	90 93 89 01 	sts	0x0189, r25
    //
    if(ms1_counter > 9)
    19a2:	8a 30       	cpi	r24, 0x0A	; 10
    19a4:	90 f1       	brcs	.+100    	; 0x1a0a <__vector_9+0x8e>
    {
        ms1_counter = 0;
    19a6:	10 92 61 01 	sts	0x0161, r1
		//
        //10ms
        comm_error_delay++;
    19aa:	80 91 6f 01 	lds	r24, 0x016F
    19ae:	8f 5f       	subi	r24, 0xFF	; 255
    19b0:	80 93 6f 01 	sts	0x016F, r24
        if(comm_error_delay > 250)
    19b4:	80 91 6f 01 	lds	r24, 0x016F
    19b8:	8b 3f       	cpi	r24, 0xFB	; 251
    19ba:	18 f0       	brcs	.+6      	; 0x19c2 <__vector_9+0x46>
		{
            comm_error_delay = 250;
    19bc:	8a ef       	ldi	r24, 0xFA	; 250
    19be:	80 93 6f 01 	sts	0x016F, r24
		}
        //
        ms10_counter++;
    19c2:	80 91 62 01 	lds	r24, 0x0162
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	80 93 62 01 	sts	0x0162, r24
        if(ms10_counter > 9)
    19cc:	8a 30       	cpi	r24, 0x0A	; 10
    19ce:	e8 f0       	brcs	.+58     	; 0x1a0a <__vector_9+0x8e>
        {
            ms10_counter = 0;
    19d0:	10 92 62 01 	sts	0x0162, r1
            //100ms
            ms100_counter++;
    19d4:	80 91 88 01 	lds	r24, 0x0188
    19d8:	8f 5f       	subi	r24, 0xFF	; 255
    19da:	80 93 88 01 	sts	0x0188, r24
            if(ms100_counter > 9)
    19de:	8a 30       	cpi	r24, 0x0A	; 10
    19e0:	a0 f0       	brcs	.+40     	; 0x1a0a <__vector_9+0x8e>
            {
                ms100_counter = 0;
    19e2:	10 92 88 01 	sts	0x0188, r1
                //1s
                s1_counter++;
    19e6:	80 91 86 01 	lds	r24, 0x0186
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
    19ec:	80 93 86 01 	sts	0x0186, r24
                if(s1_counter > 59)
    19f0:	8c 33       	cpi	r24, 0x3C	; 60
    19f2:	58 f0       	brcs	.+22     	; 0x1a0a <__vector_9+0x8e>
                {
	                //60s
	                s1_counter = 0;
    19f4:	10 92 86 01 	sts	0x0186, r1
	                //
	                m_minute++;
    19f8:	80 91 6a 01 	lds	r24, 0x016A
    19fc:	90 91 6b 01 	lds	r25, 0x016B
    1a00:	01 96       	adiw	r24, 0x01	; 1
    1a02:	90 93 6b 01 	sts	0x016B, r25
    1a06:	80 93 6a 01 	sts	0x016A, r24
                }
            }
        }

    }
}
    1a0a:	9f 91       	pop	r25
    1a0c:	8f 91       	pop	r24
    1a0e:	0f 90       	pop	r0
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	0f 90       	pop	r0
    1a14:	1f 90       	pop	r1
    1a16:	18 95       	reti

00001a18 <__vector_2>:
//
//外中断1,下降沿触发中断,输出正脉冲的结束边沿
//
ISR(INT1_vect)
{
    1a18:	1f 92       	push	r1
    1a1a:	0f 92       	push	r0
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	0f 92       	push	r0
    1a20:	11 24       	eor	r1, r1
    1a22:	8f 93       	push	r24
    1a24:	9f 93       	push	r25
    1a26:	ef 93       	push	r30
    1a28:	ff 93       	push	r31
    pulse_value[pulse_value_write_id] = TCNT1;
    1a2a:	e0 91 69 01 	lds	r30, 0x0169
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	8c b5       	in	r24, 0x2c	; 44
    1a32:	9d b5       	in	r25, 0x2d	; 45
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	ef 51       	subi	r30, 0x1F	; 31
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
	pulse_value_write_id++;
    1a40:	80 91 69 01 	lds	r24, 0x0169
    1a44:	8f 5f       	subi	r24, 0xFF	; 255
    1a46:	80 93 69 01 	sts	0x0169, r24
	pulse_value_write_id %= PULSE_VALUE_NUM;
    1a4a:	80 91 69 01 	lds	r24, 0x0169
    1a4e:	8f 73       	andi	r24, 0x3F	; 63
    1a50:	80 93 69 01 	sts	0x0169, r24
	//
	pulse_value_counter++;
    1a54:	80 91 8a 01 	lds	r24, 0x018A
    1a58:	8f 5f       	subi	r24, 0xFF	; 255
    1a5a:	80 93 8a 01 	sts	0x018A, r24
}
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	9f 91       	pop	r25
    1a64:	8f 91       	pop	r24
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	0f 90       	pop	r0
    1a6c:	1f 90       	pop	r1
    1a6e:	18 95       	reti

00001a70 <__vector_13>:
//
//串口发送中断
//
#if USART_TEST == FALSE
ISR(USART_TXC_vect)
{
    1a70:	1f 92       	push	r1
    1a72:	0f 92       	push	r0
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	0f 92       	push	r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
    1a7e:	ef 93       	push	r30
    1a80:	ff 93       	push	r31
    if(uart_tx_addr < 10)
    1a82:	80 91 e0 00 	lds	r24, 0x00E0
    1a86:	8a 30       	cpi	r24, 0x0A	; 10
    1a88:	a0 f4       	brcc	.+40     	; 0x1ab2 <__vector_13+0x42>
    {
        UDR = uart_tx_buf[uart_tx_addr++];
    1a8a:	e0 91 e0 00 	lds	r30, 0x00E0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	8e 0f       	add	r24, r30
    1a92:	80 93 e0 00 	sts	0x00E0, r24
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	ec 52       	subi	r30, 0x2C	; 44
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	8c b9       	out	0x0c, r24	; 12
    else
    {
        _delay_us(100);
        b485en = 0;
    }
}
    1aa0:	ff 91       	pop	r31
    1aa2:	ef 91       	pop	r30
    1aa4:	9f 91       	pop	r25
    1aa6:	8f 91       	pop	r24
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ab2:	8f e8       	ldi	r24, 0x8F	; 143
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <__vector_13+0x46>
    1aba:	00 c0       	rjmp	.+0      	; 0x1abc <__vector_13+0x4c>
    1abc:	00 00       	nop
        UDR = uart_tx_buf[uart_tx_addr++];
    }
    else
    {
        _delay_us(100);
        b485en = 0;
    1abe:	97 98       	cbi	0x12, 7	; 18
    1ac0:	ef cf       	rjmp	.-34     	; 0x1aa0 <__vector_13+0x30>

00001ac2 <__vector_11>:
/////////////////////////////////////////////////////////////////
//
//串口接收中断
//
ISR(USART_RXC_vect)
{
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
    1aca:	11 24       	eor	r1, r1
    1acc:	2f 93       	push	r18
    1ace:	3f 93       	push	r19
    1ad0:	4f 93       	push	r20
    1ad2:	5f 93       	push	r21
    1ad4:	6f 93       	push	r22
    1ad6:	7f 93       	push	r23
    1ad8:	8f 93       	push	r24
    1ada:	9f 93       	push	r25
    1adc:	af 93       	push	r26
    1ade:	bf 93       	push	r27
    1ae0:	ef 93       	push	r30
    1ae2:	ff 93       	push	r31
	unsigned char uart_value,sum,i,temp;
    //
	if((UCSRA&0x1c) != 0)
    1ae4:	8b b1       	in	r24, 0x0b	; 11
    1ae6:	8c 71       	andi	r24, 0x1C	; 28
    1ae8:	d1 f0       	breq	.+52     	; 0x1b1e <__vector_11+0x5c>
	{
		//串口接收出现错误
		uart_rx_counter = 0;
    1aea:	10 92 de 00 	sts	0x00DE, r1
        uart_frame_head_ok = 0;
    1aee:	10 92 68 01 	sts	0x0168, r1
		while ( UCSRA & (1<<RXC) ) 
    1af2:	5f 9b       	sbis	0x0b, 7	; 11
    1af4:	03 c0       	rjmp	.+6      	; 0x1afc <__vector_11+0x3a>
		{
			uart_value = UDR;
    1af6:	8c b1       	in	r24, 0x0c	; 12
	if((UCSRA&0x1c) != 0)
	{
		//串口接收出现错误
		uart_rx_counter = 0;
        uart_frame_head_ok = 0;
		while ( UCSRA & (1<<RXC) ) 
    1af8:	5f 99       	sbic	0x0b, 7	; 11
    1afa:	fd cf       	rjmp	.-6      	; 0x1af6 <__vector_11+0x34>
		        uart_frame_head_ok = 1;
	        }
        }
#endif //IS_MMR_USED
	}
}
    1afc:	ff 91       	pop	r31
    1afe:	ef 91       	pop	r30
    1b00:	bf 91       	pop	r27
    1b02:	af 91       	pop	r26
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	7f 91       	pop	r23
    1b0a:	6f 91       	pop	r22
    1b0c:	5f 91       	pop	r21
    1b0e:	4f 91       	pop	r20
    1b10:	3f 91       	pop	r19
    1b12:	2f 91       	pop	r18
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	0f 90       	pop	r0
    1b1a:	1f 90       	pop	r1
    1b1c:	18 95       	reti
		}
	}
	else
	{
		//串口接收正常
		uart_value = UDR;
    1b1e:	9c b1       	in	r25, 0x0c	; 12
        //
#if IS_MMR_USED == TRUE
        if(1 == uart_frame_head_ok)
    1b20:	80 91 68 01 	lds	r24, 0x0168
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	51 f0       	breq	.+20     	; 0x1b3c <__vector_11+0x7a>
                }
            }
        }
        else
        {
            if(0xaa == uart_value)
    1b28:	9a 3a       	cpi	r25, 0xAA	; 170
    1b2a:	41 f7       	brne	.-48     	; 0x1afc <__vector_11+0x3a>
            {
				comm_error_delay = 0;
    1b2c:	10 92 6f 01 	sts	0x016F, r1

				uart_rx_counter = 0;
    1b30:	10 92 de 00 	sts	0x00DE, r1
                uart_frame_head_ok = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	80 93 68 01 	sts	0x0168, r24
    1b3a:	e0 cf       	rjmp	.-64     	; 0x1afc <__vector_11+0x3a>
		uart_value = UDR;
        //
#if IS_MMR_USED == TRUE
        if(1 == uart_frame_head_ok)
        {
            uart_rx_buf[uart_rx_counter++] = uart_value;
    1b3c:	e0 91 de 00 	lds	r30, 0x00DE
    1b40:	8e 0f       	add	r24, r30
    1b42:	80 93 de 00 	sts	0x00DE, r24
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	ea 58       	subi	r30, 0x8A	; 138
    1b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4c:	90 83       	st	Z, r25
            if(uart_rx_counter > 8)//接收6个字节有效参数和一个字节校验和
    1b4e:	89 30       	cpi	r24, 0x09	; 9
    1b50:	a8 f2       	brcs	.-86     	; 0x1afc <__vector_11+0x3a>
            {
                uart_rx_counter = 0;
    1b52:	10 92 de 00 	sts	0x00DE, r1
                uart_frame_head_ok = 0;
    1b56:	10 92 68 01 	sts	0x0168, r1
                //
                sum = 0xaa;
                for(i=0; i<8; i++)
				{
                    sum += uart_rx_buf[i];
    1b5a:	40 91 76 01 	lds	r20, 0x0176
    1b5e:	9a ea       	ldi	r25, 0xAA	; 170
    1b60:	94 0f       	add	r25, r20
    1b62:	30 91 77 01 	lds	r19, 0x0177
    1b66:	93 0f       	add	r25, r19
    1b68:	20 91 78 01 	lds	r18, 0x0178
    1b6c:	92 0f       	add	r25, r18
    1b6e:	80 91 79 01 	lds	r24, 0x0179
    1b72:	98 0f       	add	r25, r24
    1b74:	60 91 7a 01 	lds	r22, 0x017A
    1b78:	96 0f       	add	r25, r22
    1b7a:	50 91 7b 01 	lds	r21, 0x017B
    1b7e:	95 0f       	add	r25, r21
    1b80:	50 91 7c 01 	lds	r21, 0x017C
    1b84:	95 0f       	add	r25, r21
    1b86:	50 91 7d 01 	lds	r21, 0x017D
    1b8a:	95 0f       	add	r25, r21
				}
                if(sum == uart_rx_buf[8])
    1b8c:	50 91 7e 01 	lds	r21, 0x017E
    1b90:	95 13       	cpse	r25, r21
    1b92:	b4 cf       	rjmp	.-152    	; 0x1afc <__vector_11+0x3a>
                {
                    if(ADDR_CGQ == uart_rx_buf[0])
    1b94:	43 30       	cpi	r20, 0x03	; 3
    1b96:	19 f0       	breq	.+6      	; 0x1b9e <__vector_11+0xdc>
							send_time_count = 0;
						}
                        //
                        uart_send_enable = 1;//串口发送使能
                    }
					comm_error_delay = 0;
    1b98:	10 92 6f 01 	sts	0x016F, r1
    1b9c:	af cf       	rjmp	.-162    	; 0x1afc <__vector_11+0x3a>
				}
                if(sum == uart_rx_buf[8])
                {
                    if(ADDR_CGQ == uart_rx_buf[0])
                    {
                        comm_error_delay = 0;
    1b9e:	10 92 6f 01 	sts	0x016F, r1
                        //
                        command_gaoliaowei = 0;
    1ba2:	10 92 65 01 	sts	0x0165, r1
                        command_diliaowei = 0;
    1ba6:	10 92 66 01 	sts	0x0166, r1
                        if(GAOLIAOWEI == uart_rx_buf[1] || GAOLIAOWEI == uart_rx_buf[2])
    1baa:	34 33       	cpi	r19, 0x34	; 52
    1bac:	c1 f0       	breq	.+48     	; 0x1bde <__vector_11+0x11c>
    1bae:	24 33       	cpi	r18, 0x34	; 52
    1bb0:	b1 f0       	breq	.+44     	; 0x1bde <__vector_11+0x11c>
						{
                            command_gaoliaowei = 1;
							uart_tx_buf[2] = GAOLIAOWEI;
							send_time_count = 0;
						}
                        else if(DILIAOWEI == uart_rx_buf[1] || DILIAOWEI == uart_rx_buf[2])
    1bb2:	35 33       	cpi	r19, 0x35	; 53
    1bb4:	f9 f0       	breq	.+62     	; 0x1bf4 <__vector_11+0x132>
    1bb6:	25 33       	cpi	r18, 0x35	; 53
    1bb8:	e9 f0       	breq	.+58     	; 0x1bf4 <__vector_11+0x132>
						{
                            command_diliaowei = 1;
							uart_tx_buf[2] = DILIAOWEI;
							send_time_count = 0;
						}else if(SHUAXIANSHUJU == uart_rx_buf[1] || SHUAXIANSHUJU == uart_rx_buf[2])
    1bba:	36 33       	cpi	r19, 0x36	; 54
    1bbc:	31 f1       	breq	.+76     	; 0x1c0a <__vector_11+0x148>
    1bbe:	26 33       	cpi	r18, 0x36	; 54
    1bc0:	21 f1       	breq	.+72     	; 0x1c0a <__vector_11+0x148>
						{
							uart_tx_buf[2] = SHUAXIANSHUJU;
							send_time_count = 0;
						}
						else if(GAOLIAOWEI_SET == uart_rx_buf[1] && GAOLIAOWEI_SET == uart_rx_buf[2])
    1bc2:	39 33       	cpi	r19, 0x39	; 57
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <__vector_11+0x106>
    1bc6:	49 c0       	rjmp	.+146    	; 0x1c5a <__vector_11+0x198>
							m_mh_set = uart_rx_buf[3]* 256 +uart_rx_buf[4];
							eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
							_delay_ms(2);
							send_time_count = 0;
						}
						else if(DILIAOWEI_SET == uart_rx_buf[1] && DILIAOWEI_SET == uart_rx_buf[2])
    1bc8:	38 33       	cpi	r19, 0x38	; 56
    1bca:	39 f1       	breq	.+78     	; 0x1c1a <__vector_11+0x158>
							m_ml_set = uart_rx_buf[3]*256 +uart_rx_buf[4];
							eeprom_write_word_user((uint16_t *)&m_para[0].e_ml, m_ml_set);
							_delay_ms(2);
							send_time_count = 0;
						}
						else if(SMOOTHING_SET == uart_rx_buf[1] && SMOOTHING_SET == uart_rx_buf[2])
    1bcc:	3a 33       	cpi	r19, 0x3A	; 58
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <__vector_11+0x114>
    1bd0:	2a 33       	cpi	r18, 0x3A	; 58
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <__vector_11+0x114>
    1bd4:	58 c0       	rjmp	.+176    	; 0x1c86 <__vector_11+0x1c4>
								_delay_ms(2);
							}
							send_time_count = 0;
						}
                        //
                        uart_send_enable = 1;//串口发送使能
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	80 93 87 01 	sts	0x0187, r24
    1bdc:	dd cf       	rjmp	.-70     	; 0x1b98 <__vector_11+0xd6>
                        //
                        command_gaoliaowei = 0;
                        command_diliaowei = 0;
                        if(GAOLIAOWEI == uart_rx_buf[1] || GAOLIAOWEI == uart_rx_buf[2])
						{
                            command_gaoliaowei = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	80 93 65 01 	sts	0x0165, r24
							uart_tx_buf[2] = GAOLIAOWEI;
    1be4:	84 e3       	ldi	r24, 0x34	; 52
    1be6:	80 93 d6 00 	sts	0x00D6, r24
							send_time_count = 0;
    1bea:	10 92 63 00 	sts	0x0063, r1
    1bee:	10 92 62 00 	sts	0x0062, r1
    1bf2:	f1 cf       	rjmp	.-30     	; 0x1bd6 <__vector_11+0x114>
						}
                        else if(DILIAOWEI == uart_rx_buf[1] || DILIAOWEI == uart_rx_buf[2])
						{
                            command_diliaowei = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	80 93 66 01 	sts	0x0166, r24
							uart_tx_buf[2] = DILIAOWEI;
    1bfa:	85 e3       	ldi	r24, 0x35	; 53
    1bfc:	80 93 d6 00 	sts	0x00D6, r24
							send_time_count = 0;
    1c00:	10 92 63 00 	sts	0x0063, r1
    1c04:	10 92 62 00 	sts	0x0062, r1
    1c08:	e6 cf       	rjmp	.-52     	; 0x1bd6 <__vector_11+0x114>
						}else if(SHUAXIANSHUJU == uart_rx_buf[1] || SHUAXIANSHUJU == uart_rx_buf[2])
						{
							uart_tx_buf[2] = SHUAXIANSHUJU;
    1c0a:	86 e3       	ldi	r24, 0x36	; 54
    1c0c:	80 93 d6 00 	sts	0x00D6, r24
							send_time_count = 0;
    1c10:	10 92 63 00 	sts	0x0063, r1
    1c14:	10 92 62 00 	sts	0x0062, r1
    1c18:	de cf       	rjmp	.-68     	; 0x1bd6 <__vector_11+0x114>
							m_mh_set = uart_rx_buf[3]* 256 +uart_rx_buf[4];
							eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
							_delay_ms(2);
							send_time_count = 0;
						}
						else if(DILIAOWEI_SET == uart_rx_buf[1] && DILIAOWEI_SET == uart_rx_buf[2])
    1c1a:	28 33       	cpi	r18, 0x38	; 56
    1c1c:	e1 f6       	brne	.-72     	; 0x1bd6 <__vector_11+0x114>
						{

							uart_tx_buf[2] = SHUAXIANSHUJU;
    1c1e:	96 e3       	ldi	r25, 0x36	; 54
    1c20:	90 93 d6 00 	sts	0x00D6, r25
							m_ml_set = uart_rx_buf[3]*256 +uart_rx_buf[4];
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	98 2f       	mov	r25, r24
    1c28:	88 27       	eor	r24, r24
    1c2a:	86 0f       	add	r24, r22
    1c2c:	91 1d       	adc	r25, r1
    1c2e:	90 93 75 01 	sts	0x0175, r25
    1c32:	80 93 74 01 	sts	0x0174, r24
							eeprom_write_word_user((uint16_t *)&m_para[0].e_ml, m_ml_set);
    1c36:	60 91 74 01 	lds	r22, 0x0174
    1c3a:	70 91 75 01 	lds	r23, 0x0175
    1c3e:	82 ec       	ldi	r24, 0xC2	; 194
    1c40:	90 e0       	ldi	r25, 0x00	; 0
							uart_tx_buf[2] = SMOOTHING_SET;
							temp = uart_rx_buf[3]*256 +uart_rx_buf[4];
							if(temp < 10)
							{
							    smoothingDate = temp;
								eeprom_write_word_user((uint16_t *)&m_para[0].smoothingDate, smoothingDate);
    1c42:	6e d8       	rcall	.-3876   	; 0xd20 <eeprom_write_word_user>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c44:	8f e3       	ldi	r24, 0x3F	; 63
    1c46:	9f e1       	ldi	r25, 0x1F	; 31
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <__vector_11+0x186>
    1c4c:	00 c0       	rjmp	.+0      	; 0x1c4e <__vector_11+0x18c>
    1c4e:	00 00       	nop
								_delay_ms(2);
							}
							send_time_count = 0;
    1c50:	10 92 63 00 	sts	0x0063, r1
    1c54:	10 92 62 00 	sts	0x0062, r1
    1c58:	be cf       	rjmp	.-132    	; 0x1bd6 <__vector_11+0x114>
						}else if(SHUAXIANSHUJU == uart_rx_buf[1] || SHUAXIANSHUJU == uart_rx_buf[2])
						{
							uart_tx_buf[2] = SHUAXIANSHUJU;
							send_time_count = 0;
						}
						else if(GAOLIAOWEI_SET == uart_rx_buf[1] && GAOLIAOWEI_SET == uart_rx_buf[2])
    1c5a:	29 33       	cpi	r18, 0x39	; 57
    1c5c:	09 f0       	breq	.+2      	; 0x1c60 <__vector_11+0x19e>
    1c5e:	bb cf       	rjmp	.-138    	; 0x1bd6 <__vector_11+0x114>
						{

							uart_tx_buf[2] = SHUAXIANSHUJU;
    1c60:	96 e3       	ldi	r25, 0x36	; 54
    1c62:	90 93 d6 00 	sts	0x00D6, r25

							m_mh_set = uart_rx_buf[3]* 256 +uart_rx_buf[4];
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	98 2f       	mov	r25, r24
    1c6a:	88 27       	eor	r24, r24
    1c6c:	86 0f       	add	r24, r22
    1c6e:	91 1d       	adc	r25, r1
    1c70:	90 93 73 01 	sts	0x0173, r25
    1c74:	80 93 72 01 	sts	0x0172, r24
							eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
    1c78:	60 91 72 01 	lds	r22, 0x0172
    1c7c:	70 91 73 01 	lds	r23, 0x0173
    1c80:	80 ec       	ldi	r24, 0xC0	; 192
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	de cf       	rjmp	.-68     	; 0x1c42 <__vector_11+0x180>
							send_time_count = 0;
						}
						else if(SMOOTHING_SET == uart_rx_buf[1] && SMOOTHING_SET == uart_rx_buf[2])
						{

							uart_tx_buf[2] = SMOOTHING_SET;
    1c86:	20 93 d6 00 	sts	0x00D6, r18
							temp = uart_rx_buf[3]*256 +uart_rx_buf[4];
							if(temp < 10)
    1c8a:	6a 30       	cpi	r22, 0x0A	; 10
    1c8c:	08 f7       	brcc	.-62     	; 0x1c50 <__vector_11+0x18e>
							{
							    smoothingDate = temp;
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	70 93 61 00 	sts	0x0061, r23
    1c94:	60 93 60 00 	sts	0x0060, r22
								eeprom_write_word_user((uint16_t *)&m_para[0].smoothingDate, smoothingDate);
    1c98:	86 ec       	ldi	r24, 0xC6	; 198
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	d2 cf       	rjmp	.-92     	; 0x1c42 <__vector_11+0x180>

00001c9e <__udivmodsi4>:
    1c9e:	a1 e2       	ldi	r26, 0x21	; 33
    1ca0:	1a 2e       	mov	r1, r26
    1ca2:	aa 1b       	sub	r26, r26
    1ca4:	bb 1b       	sub	r27, r27
    1ca6:	fd 01       	movw	r30, r26
    1ca8:	0d c0       	rjmp	.+26     	; 0x1cc4 <__udivmodsi4_ep>

00001caa <__udivmodsi4_loop>:
    1caa:	aa 1f       	adc	r26, r26
    1cac:	bb 1f       	adc	r27, r27
    1cae:	ee 1f       	adc	r30, r30
    1cb0:	ff 1f       	adc	r31, r31
    1cb2:	a2 17       	cp	r26, r18
    1cb4:	b3 07       	cpc	r27, r19
    1cb6:	e4 07       	cpc	r30, r20
    1cb8:	f5 07       	cpc	r31, r21
    1cba:	20 f0       	brcs	.+8      	; 0x1cc4 <__udivmodsi4_ep>
    1cbc:	a2 1b       	sub	r26, r18
    1cbe:	b3 0b       	sbc	r27, r19
    1cc0:	e4 0b       	sbc	r30, r20
    1cc2:	f5 0b       	sbc	r31, r21

00001cc4 <__udivmodsi4_ep>:
    1cc4:	66 1f       	adc	r22, r22
    1cc6:	77 1f       	adc	r23, r23
    1cc8:	88 1f       	adc	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	1a 94       	dec	r1
    1cce:	69 f7       	brne	.-38     	; 0x1caa <__udivmodsi4_loop>
    1cd0:	60 95       	com	r22
    1cd2:	70 95       	com	r23
    1cd4:	80 95       	com	r24
    1cd6:	90 95       	com	r25
    1cd8:	9b 01       	movw	r18, r22
    1cda:	ac 01       	movw	r20, r24
    1cdc:	bd 01       	movw	r22, r26
    1cde:	cf 01       	movw	r24, r30
    1ce0:	08 95       	ret

00001ce2 <__umulhisi3>:
    1ce2:	a2 9f       	mul	r26, r18
    1ce4:	b0 01       	movw	r22, r0
    1ce6:	b3 9f       	mul	r27, r19
    1ce8:	c0 01       	movw	r24, r0
    1cea:	a3 9f       	mul	r26, r19
    1cec:	01 d0       	rcall	.+2      	; 0x1cf0 <__umulhisi3+0xe>
    1cee:	b2 9f       	mul	r27, r18
    1cf0:	70 0d       	add	r23, r0
    1cf2:	81 1d       	adc	r24, r1
    1cf4:	11 24       	eor	r1, r1
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	08 95       	ret

00001cfa <__ashldi3>:
    1cfa:	0f 93       	push	r16
    1cfc:	08 30       	cpi	r16, 0x08	; 8
    1cfe:	90 f0       	brcs	.+36     	; 0x1d24 <__ashldi3+0x2a>
    1d00:	98 2f       	mov	r25, r24
    1d02:	87 2f       	mov	r24, r23
    1d04:	76 2f       	mov	r23, r22
    1d06:	65 2f       	mov	r22, r21
    1d08:	54 2f       	mov	r21, r20
    1d0a:	43 2f       	mov	r20, r19
    1d0c:	32 2f       	mov	r19, r18
    1d0e:	22 27       	eor	r18, r18
    1d10:	08 50       	subi	r16, 0x08	; 8
    1d12:	f4 cf       	rjmp	.-24     	; 0x1cfc <__ashldi3+0x2>
    1d14:	22 0f       	add	r18, r18
    1d16:	33 1f       	adc	r19, r19
    1d18:	44 1f       	adc	r20, r20
    1d1a:	55 1f       	adc	r21, r21
    1d1c:	66 1f       	adc	r22, r22
    1d1e:	77 1f       	adc	r23, r23
    1d20:	88 1f       	adc	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	0a 95       	dec	r16
    1d26:	b2 f7       	brpl	.-20     	; 0x1d14 <__ashldi3+0x1a>
    1d28:	0f 91       	pop	r16
    1d2a:	08 95       	ret

00001d2c <__eerd_word_m8a>:
    1d2c:	a8 e1       	ldi	r26, 0x18	; 24
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	42 e0       	ldi	r20, 0x02	; 2
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	05 c0       	rjmp	.+10     	; 0x1d40 <__eerd_blraw_m8a>

00001d36 <__eewr_word_m8a>:
    1d36:	12 d0       	rcall	.+36     	; 0x1d5c <__eewr_byte_m8a>
    1d38:	27 2f       	mov	r18, r23
    1d3a:	11 c0       	rjmp	.+34     	; 0x1d5e <__eewr_r18_m8a>

00001d3c <__eerd_block_m8a>:
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22

00001d40 <__eerd_blraw_m8a>:
    1d40:	fc 01       	movw	r30, r24
    1d42:	e1 99       	sbic	0x1c, 1	; 28
    1d44:	fe cf       	rjmp	.-4      	; 0x1d42 <__eerd_blraw_m8a+0x2>
    1d46:	06 c0       	rjmp	.+12     	; 0x1d54 <__eerd_blraw_m8a+0x14>
    1d48:	ff bb       	out	0x1f, r31	; 31
    1d4a:	ee bb       	out	0x1e, r30	; 30
    1d4c:	e0 9a       	sbi	0x1c, 0	; 28
    1d4e:	31 96       	adiw	r30, 0x01	; 1
    1d50:	0d b2       	in	r0, 0x1d	; 29
    1d52:	0d 92       	st	X+, r0
    1d54:	41 50       	subi	r20, 0x01	; 1
    1d56:	50 40       	sbci	r21, 0x00	; 0
    1d58:	b8 f7       	brcc	.-18     	; 0x1d48 <__eerd_blraw_m8a+0x8>
    1d5a:	08 95       	ret

00001d5c <__eewr_byte_m8a>:
    1d5c:	26 2f       	mov	r18, r22

00001d5e <__eewr_r18_m8a>:
    1d5e:	e1 99       	sbic	0x1c, 1	; 28
    1d60:	fe cf       	rjmp	.-4      	; 0x1d5e <__eewr_r18_m8a>
    1d62:	9f bb       	out	0x1f, r25	; 31
    1d64:	8e bb       	out	0x1e, r24	; 30
    1d66:	2d bb       	out	0x1d, r18	; 29
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	e2 9a       	sbi	0x1c, 2	; 28
    1d6e:	e1 9a       	sbi	0x1c, 1	; 28
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	01 96       	adiw	r24, 0x01	; 1
    1d74:	08 95       	ret

00001d76 <_exit>:
    1d76:	f8 94       	cli

00001d78 <__stop_program>:
    1d78:	ff cf       	rjmp	.-2      	; 0x1d78 <__stop_program>
