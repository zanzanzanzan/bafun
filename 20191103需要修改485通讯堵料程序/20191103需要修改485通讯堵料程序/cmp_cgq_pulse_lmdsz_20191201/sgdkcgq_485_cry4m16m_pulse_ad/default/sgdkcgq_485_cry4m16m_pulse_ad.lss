
sgdkcgq_485_cry4m16m_pulse_ad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .eeprom       000001ea  00810080  00810080  00001f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ea0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00800060  00001ea0  00001f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000149  00800060  00800060  00001f54  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000213e  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000216e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ed7  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000541  00000000  00000000  0000515d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b19  00000000  00000000  0000569e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  000061b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000745  00000000  00000000  00006538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e32  00000000  00000000  00006c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00009aaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	35 cd       	rjmp	.-1430   	; 0xfffffa70 <__eeprom_end+0xff7ef806>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	df cc       	rjmp	.-1602   	; 0xfffff9d2 <__eeprom_end+0xff7ef768>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	e8 cd       	rjmp	.-1072   	; 0xfffffbe8 <__eeprom_end+0xff7ef97e>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	bd cd       	rjmp	.-1158   	; 0xfffffb96 <__eeprom_end+0xff7ef92c>
      1c:	55 cd       	rjmp	.-1366   	; 0xfffffac8 <__eeprom_end+0xff7ef85e>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 ea       	ldi	r30, 0xA0	; 160
      3a:	fe e1       	ldi	r31, 0x1E	; 30
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a0 36       	cpi	r26, 0x60	; 96
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	21 e0       	ldi	r18, 0x01	; 1
      4a:	a0 e6       	ldi	r26, 0x60	; 96
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a9 3a       	cpi	r26, 0xA9	; 169
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	2d db       	rcall	.-2470   	; 0xfffff6b4 <__eeprom_end+0xff7ef44a>
      5a:	20 cf       	rjmp	.-448    	; 0xfffffe9c <__eeprom_end+0xff7efc32>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <SetTimer>:
	}
	//
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		//搜索指定的定时器并关闭它
		if(soft_timer[i].id == id)
      5e:	0f 93       	push	r16
      60:	1f 93       	push	r17
      62:	a2 2f       	mov	r26, r18
      64:	00 97       	sbiw	r24, 0x00	; 0
      66:	09 f4       	brne	.+2      	; 0x6a <SetTimer+0xc>
      68:	6c c0       	rjmp	.+216    	; 0x142 <SetTimer+0xe4>
      6a:	41 15       	cp	r20, r1
      6c:	51 05       	cpc	r21, r1
      6e:	61 05       	cpc	r22, r1
      70:	71 05       	cpc	r23, r1
      72:	09 f4       	brne	.+2      	; 0x76 <SetTimer+0x18>
      74:	66 c0       	rjmp	.+204    	; 0x142 <SetTimer+0xe4>
      76:	e0 91 6c 00 	lds	r30, 0x006C
{
	unsigned char i;
	//
	if(SOFT_TIMER_ERROR == id)
	{
		return SOFT_TIMER_ERROR;
      7a:	f0 91 6d 00 	lds	r31, 0x006D
	}
	//
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		//搜索指定的定时器并关闭它
		if(soft_timer[i].id == id)
      7e:	e8 17       	cp	r30, r24
      80:	f9 07       	cpc	r31, r25
		{
			soft_timer[i].enable = FALSE;
      82:	09 f4       	brne	.+2      	; 0x86 <SetTimer+0x28>
      84:	93 c0       	rjmp	.+294    	; 0x1ac <SetTimer+0x14e>
      86:	20 91 78 00 	lds	r18, 0x0078
      8a:	30 91 79 00 	lds	r19, 0x0079
      8e:	28 17       	cp	r18, r24
      90:	39 07       	cpc	r19, r25
      92:	09 f4       	brne	.+2      	; 0x96 <SetTimer+0x38>
      94:	9b c0       	rjmp	.+310    	; 0x1cc <SetTimer+0x16e>
      96:	20 91 84 00 	lds	r18, 0x0084
			return id;
      9a:	30 91 85 00 	lds	r19, 0x0085
	}
	//
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		//搜索指定的定时器并关闭它
		if(soft_timer[i].id == id)
      9e:	28 17       	cp	r18, r24
      a0:	39 07       	cpc	r19, r25
      a2:	09 f4       	brne	.+2      	; 0xa6 <SetTimer+0x48>
      a4:	96 c0       	rjmp	.+300    	; 0x1d2 <SetTimer+0x174>
      a6:	20 91 90 00 	lds	r18, 0x0090
      aa:	30 91 91 00 	lds	r19, 0x0091
      ae:	28 17       	cp	r18, r24
      b0:	39 07       	cpc	r19, r25
      b2:	09 f4       	brne	.+2      	; 0xb6 <SetTimer+0x58>
      b4:	91 c0       	rjmp	.+290    	; 0x1d8 <SetTimer+0x17a>
      b6:	20 91 9c 00 	lds	r18, 0x009C
      ba:	30 91 9d 00 	lds	r19, 0x009D
      be:	28 17       	cp	r18, r24
      c0:	39 07       	cpc	r19, r25
      c2:	09 f4       	brne	.+2      	; 0xc6 <SetTimer+0x68>
      c4:	8c c0       	rjmp	.+280    	; 0x1de <SetTimer+0x180>
	}
	//
	//搜索id号匹配的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(soft_timer[i].id == id)
      c6:	20 91 a8 00 	lds	r18, 0x00A8
      ca:	30 91 a9 00 	lds	r19, 0x00A9
      ce:	28 17       	cp	r18, r24
      d0:	39 07       	cpc	r19, r25
      d2:	09 f4       	brne	.+2      	; 0xd6 <SetTimer+0x78>
      d4:	87 c0       	rjmp	.+270    	; 0x1e4 <SetTimer+0x186>
      d6:	20 91 b4 00 	lds	r18, 0x00B4
      da:	30 91 b5 00 	lds	r19, 0x00B5
      de:	28 17       	cp	r18, r24
      e0:	39 07       	cpc	r19, r25
      e2:	09 f4       	brne	.+2      	; 0xe6 <SetTimer+0x88>
      e4:	82 c0       	rjmp	.+260    	; 0x1ea <SetTimer+0x18c>
      e6:	20 91 c0 00 	lds	r18, 0x00C0
      ea:	30 91 c1 00 	lds	r19, 0x00C1
      ee:	28 17       	cp	r18, r24
      f0:	39 07       	cpc	r19, r25
      f2:	09 f4       	brne	.+2      	; 0xf6 <SetTimer+0x98>
      f4:	7d c0       	rjmp	.+250    	; 0x1f0 <SetTimer+0x192>
	}
	//
	//id号匹配的软件定时器没有找到，搜索空闲的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(FALSE == soft_timer[i].enable)
      f6:	20 91 77 00 	lds	r18, 0x0077
      fa:	22 23       	and	r18, r18
      fc:	09 f4       	brne	.+2      	; 0x100 <SetTimer+0xa2>
      fe:	7e c0       	rjmp	.+252    	; 0x1fc <SetTimer+0x19e>
     100:	20 91 83 00 	lds	r18, 0x0083
     104:	22 23       	and	r18, r18
     106:	09 f4       	brne	.+2      	; 0x10a <SetTimer+0xac>
     108:	76 c0       	rjmp	.+236    	; 0x1f6 <SetTimer+0x198>
     10a:	20 91 8f 00 	lds	r18, 0x008F
     10e:	22 23       	and	r18, r18
     110:	09 f4       	brne	.+2      	; 0x114 <SetTimer+0xb6>
     112:	77 c0       	rjmp	.+238    	; 0x202 <SetTimer+0x1a4>
     114:	20 91 9b 00 	lds	r18, 0x009B
     118:	22 23       	and	r18, r18
     11a:	09 f4       	brne	.+2      	; 0x11e <SetTimer+0xc0>
     11c:	75 c0       	rjmp	.+234    	; 0x208 <SetTimer+0x1aa>
     11e:	20 91 a7 00 	lds	r18, 0x00A7
     122:	22 23       	and	r18, r18
     124:	09 f4       	brne	.+2      	; 0x128 <SetTimer+0xca>
     126:	73 c0       	rjmp	.+230    	; 0x20e <SetTimer+0x1b0>
     128:	20 91 b3 00 	lds	r18, 0x00B3
     12c:	22 23       	and	r18, r18
     12e:	09 f4       	brne	.+2      	; 0x132 <SetTimer+0xd4>
     130:	71 c0       	rjmp	.+226    	; 0x214 <SetTimer+0x1b6>
     132:	20 91 bf 00 	lds	r18, 0x00BF
     136:	22 23       	and	r18, r18
     138:	49 f0       	breq	.+18     	; 0x14c <SetTimer+0xee>
     13a:	20 91 cb 00 	lds	r18, 0x00CB
     13e:	22 23       	and	r18, r18
     140:	91 f1       	breq	.+100    	; 0x1a6 <SetTimer+0x148>
	//中，软件定时器的定时时间一般不会比设置值多1ms。
	unsigned char i;
	//
	if(SOFT_TIMER_ERROR == id)
	{
		return SOFT_TIMER_ERROR;
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
			return id;			
		}
	}
	//
	return SOFT_TIMER_ERROR;
}
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret
	}
	//
	//id号匹配的软件定时器没有找到，搜索空闲的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(FALSE == soft_timer[i].enable)
     14c:	26 e0       	ldi	r18, 0x06	; 6
     14e:	30 e0       	ldi	r19, 0x00	; 0
		{
			soft_timer[i].enable = TRUE;
     150:	f9 01       	movw	r30, r18
     152:	ee 0f       	add	r30, r30
     154:	ff 1f       	adc	r31, r31
     156:	e2 0f       	add	r30, r18
     158:	f3 1f       	adc	r31, r19
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	e4 59       	subi	r30, 0x94	; 148
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	23 87       	std	Z+11, r18	; 0x0b
			soft_timer[i].id = id;
     16a:	91 83       	std	Z+1, r25	; 0x01
     16c:	80 83       	st	Z, r24
			soft_timer[i].ms = ms;
     16e:	42 83       	std	Z+2, r20	; 0x02
     170:	53 83       	std	Z+3, r21	; 0x03
     172:	64 83       	std	Z+4, r22	; 0x04
     174:	75 83       	std	Z+5, r23	; 0x05
			soft_timer[i].overtime = soft_timer[i].ms + boot_time;
     176:	42 81       	ldd	r20, Z+2	; 0x02
     178:	53 81       	ldd	r21, Z+3	; 0x03
     17a:	64 81       	ldd	r22, Z+4	; 0x04
     17c:	75 81       	ldd	r23, Z+5	; 0x05
     17e:	00 91 9e 01 	lds	r16, 0x019E
     182:	10 91 9f 01 	lds	r17, 0x019F
     186:	20 91 a0 01 	lds	r18, 0x01A0
     18a:	30 91 a1 01 	lds	r19, 0x01A1
     18e:	40 0f       	add	r20, r16
     190:	51 1f       	adc	r21, r17
     192:	62 1f       	adc	r22, r18
     194:	73 1f       	adc	r23, r19
     196:	46 83       	std	Z+6, r20	; 0x06
     198:	57 83       	std	Z+7, r21	; 0x07
     19a:	60 87       	std	Z+8, r22	; 0x08
     19c:	71 87       	std	Z+9, r23	; 0x09
			soft_timer[i].retry = retry;
     19e:	a2 87       	std	Z+10, r26	; 0x0a
			return id;			
		}
	}
	//
	return SOFT_TIMER_ERROR;
}
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	08 95       	ret
	}
	//
	//id号匹配的软件定时器没有找到，搜索空闲的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(FALSE == soft_timer[i].enable)
     1a6:	27 e0       	ldi	r18, 0x07	; 7
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	d2 cf       	rjmp	.-92     	; 0x150 <SetTimer+0xf2>
	}
	//
	//搜索id号匹配的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(soft_timer[i].id == id)
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
		{
			soft_timer[i].enable = TRUE;
     1b0:	f9 01       	movw	r30, r18
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	e2 0f       	add	r30, r18
     1b8:	f3 1f       	adc	r31, r19
     1ba:	ee 0f       	add	r30, r30
     1bc:	ff 1f       	adc	r31, r31
     1be:	ee 0f       	add	r30, r30
     1c0:	ff 1f       	adc	r31, r31
     1c2:	e4 59       	subi	r30, 0x94	; 148
     1c4:	ff 4f       	sbci	r31, 0xFF	; 255
     1c6:	21 e0       	ldi	r18, 0x01	; 1
     1c8:	23 87       	std	Z+11, r18	; 0x0b
     1ca:	d1 cf       	rjmp	.-94     	; 0x16e <SetTimer+0x110>
	}
	//
	//搜索id号匹配的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(soft_timer[i].id == id)
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	ef cf       	rjmp	.-34     	; 0x1b0 <SetTimer+0x152>
     1d2:	22 e0       	ldi	r18, 0x02	; 2
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	ec cf       	rjmp	.-40     	; 0x1b0 <SetTimer+0x152>
     1d8:	23 e0       	ldi	r18, 0x03	; 3
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	e9 cf       	rjmp	.-46     	; 0x1b0 <SetTimer+0x152>
     1de:	24 e0       	ldi	r18, 0x04	; 4
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	e6 cf       	rjmp	.-52     	; 0x1b0 <SetTimer+0x152>
     1e4:	25 e0       	ldi	r18, 0x05	; 5
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	e3 cf       	rjmp	.-58     	; 0x1b0 <SetTimer+0x152>
     1ea:	26 e0       	ldi	r18, 0x06	; 6
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	e0 cf       	rjmp	.-64     	; 0x1b0 <SetTimer+0x152>
     1f0:	27 e0       	ldi	r18, 0x07	; 7
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	dd cf       	rjmp	.-70     	; 0x1b0 <SetTimer+0x152>
	}
	//
	//id号匹配的软件定时器没有找到，搜索空闲的软件定时器
	for(i=0; i<SOFT_TIMER_NUM; i++)
	{
		if(FALSE == soft_timer[i].enable)
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	aa cf       	rjmp	.-172    	; 0x150 <SetTimer+0xf2>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	a7 cf       	rjmp	.-178    	; 0x150 <SetTimer+0xf2>
     202:	22 e0       	ldi	r18, 0x02	; 2
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	a4 cf       	rjmp	.-184    	; 0x150 <SetTimer+0xf2>
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	a1 cf       	rjmp	.-190    	; 0x150 <SetTimer+0xf2>
     20e:	24 e0       	ldi	r18, 0x04	; 4
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	9e cf       	rjmp	.-196    	; 0x150 <SetTimer+0xf2>
     214:	25 e0       	ldi	r18, 0x05	; 5
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	9b cf       	rjmp	.-202    	; 0x150 <SetTimer+0xf2>

0000021a <timer_run>:
void timer_run(void)
{
	unsigned char id;
	//
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
     21a:	80 91 6a 00 	lds	r24, 0x006A
     21e:	90 91 6b 00 	lds	r25, 0x006B
     222:	87 70       	andi	r24, 0x07	; 7
     224:	99 27       	eor	r25, r25
     226:	90 93 6b 00 	sts	0x006B, r25
     22a:	80 93 6a 00 	sts	0x006A, r24
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
		{
			if(boot_time >= soft_timer[soft_timer_id].overtime)
     22e:	80 91 9e 01 	lds	r24, 0x019E
     232:	90 91 9f 01 	lds	r25, 0x019F
     236:	a0 91 a0 01 	lds	r26, 0x01A0
     23a:	b0 91 a1 01 	lds	r27, 0x01A1
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     23e:	20 91 6a 00 	lds	r18, 0x006A
     242:	30 91 6b 00 	lds	r19, 0x006B
     246:	f9 01       	movw	r30, r18
     248:	ee 0f       	add	r30, r30
     24a:	ff 1f       	adc	r31, r31
     24c:	e2 0f       	add	r30, r18
     24e:	f3 1f       	adc	r31, r19
     250:	ee 0f       	add	r30, r30
     252:	ff 1f       	adc	r31, r31
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	e4 59       	subi	r30, 0x94	; 148
     25a:	ff 4f       	sbci	r31, 0xFF	; 255
     25c:	23 85       	ldd	r18, Z+11	; 0x0b
     25e:	21 30       	cpi	r18, 0x01	; 1
     260:	09 f4       	brne	.+2      	; 0x264 <timer_run+0x4a>
     262:	25 c1       	rjmp	.+586    	; 0x4ae <__stack+0x4f>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     264:	20 91 6a 00 	lds	r18, 0x006A
     268:	30 91 6b 00 	lds	r19, 0x006B
     26c:	2f 5f       	subi	r18, 0xFF	; 255
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	30 93 6b 00 	sts	0x006B, r19
     274:	20 93 6a 00 	sts	0x006A, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     278:	20 91 6a 00 	lds	r18, 0x006A
     27c:	30 91 6b 00 	lds	r19, 0x006B
     280:	27 70       	andi	r18, 0x07	; 7
     282:	33 27       	eor	r19, r19
     284:	30 93 6b 00 	sts	0x006B, r19
     288:	20 93 6a 00 	sts	0x006A, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     28c:	20 91 6a 00 	lds	r18, 0x006A
     290:	30 91 6b 00 	lds	r19, 0x006B
     294:	f9 01       	movw	r30, r18
     296:	ee 0f       	add	r30, r30
     298:	ff 1f       	adc	r31, r31
     29a:	e2 0f       	add	r30, r18
     29c:	f3 1f       	adc	r31, r19
     29e:	ee 0f       	add	r30, r30
     2a0:	ff 1f       	adc	r31, r31
     2a2:	ee 0f       	add	r30, r30
     2a4:	ff 1f       	adc	r31, r31
     2a6:	e4 59       	subi	r30, 0x94	; 148
     2a8:	ff 4f       	sbci	r31, 0xFF	; 255
     2aa:	23 85       	ldd	r18, Z+11	; 0x0b
     2ac:	21 30       	cpi	r18, 0x01	; 1
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <timer_run+0x98>
     2b0:	a6 c1       	rjmp	.+844    	; 0x5fe <__stack+0x19f>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     2b2:	20 91 6a 00 	lds	r18, 0x006A
     2b6:	30 91 6b 00 	lds	r19, 0x006B
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	30 93 6b 00 	sts	0x006B, r19
     2c2:	20 93 6a 00 	sts	0x006A, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     2c6:	20 91 6a 00 	lds	r18, 0x006A
     2ca:	30 91 6b 00 	lds	r19, 0x006B
     2ce:	27 70       	andi	r18, 0x07	; 7
     2d0:	33 27       	eor	r19, r19
     2d2:	30 93 6b 00 	sts	0x006B, r19
     2d6:	20 93 6a 00 	sts	0x006A, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     2da:	20 91 6a 00 	lds	r18, 0x006A
     2de:	30 91 6b 00 	lds	r19, 0x006B
     2e2:	f9 01       	movw	r30, r18
     2e4:	ee 0f       	add	r30, r30
     2e6:	ff 1f       	adc	r31, r31
     2e8:	e2 0f       	add	r30, r18
     2ea:	f3 1f       	adc	r31, r19
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	ee 0f       	add	r30, r30
     2f2:	ff 1f       	adc	r31, r31
     2f4:	e4 59       	subi	r30, 0x94	; 148
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	23 85       	ldd	r18, Z+11	; 0x0b
     2fa:	21 30       	cpi	r18, 0x01	; 1
     2fc:	09 f4       	brne	.+2      	; 0x300 <timer_run+0xe6>
     2fe:	99 c1       	rjmp	.+818    	; 0x632 <__stack+0x1d3>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     300:	20 91 6a 00 	lds	r18, 0x006A
     304:	30 91 6b 00 	lds	r19, 0x006B
     308:	2f 5f       	subi	r18, 0xFF	; 255
     30a:	3f 4f       	sbci	r19, 0xFF	; 255
     30c:	30 93 6b 00 	sts	0x006B, r19
     310:	20 93 6a 00 	sts	0x006A, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     314:	20 91 6a 00 	lds	r18, 0x006A
     318:	30 91 6b 00 	lds	r19, 0x006B
     31c:	27 70       	andi	r18, 0x07	; 7
     31e:	33 27       	eor	r19, r19
     320:	30 93 6b 00 	sts	0x006B, r19
     324:	20 93 6a 00 	sts	0x006A, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     328:	20 91 6a 00 	lds	r18, 0x006A
     32c:	30 91 6b 00 	lds	r19, 0x006B
     330:	f9 01       	movw	r30, r18
     332:	ee 0f       	add	r30, r30
     334:	ff 1f       	adc	r31, r31
     336:	e2 0f       	add	r30, r18
     338:	f3 1f       	adc	r31, r19
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	ee 0f       	add	r30, r30
     340:	ff 1f       	adc	r31, r31
     342:	e4 59       	subi	r30, 0x94	; 148
     344:	ff 4f       	sbci	r31, 0xFF	; 255
     346:	23 85       	ldd	r18, Z+11	; 0x0b
     348:	21 30       	cpi	r18, 0x01	; 1
     34a:	09 f4       	brne	.+2      	; 0x34e <timer_run+0x134>
     34c:	8c c1       	rjmp	.+792    	; 0x666 <__stack+0x207>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     34e:	20 91 6a 00 	lds	r18, 0x006A
     352:	30 91 6b 00 	lds	r19, 0x006B
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	30 93 6b 00 	sts	0x006B, r19
     35e:	20 93 6a 00 	sts	0x006A, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     362:	20 91 6a 00 	lds	r18, 0x006A
     366:	30 91 6b 00 	lds	r19, 0x006B
     36a:	27 70       	andi	r18, 0x07	; 7
     36c:	33 27       	eor	r19, r19
     36e:	30 93 6b 00 	sts	0x006B, r19
     372:	20 93 6a 00 	sts	0x006A, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     376:	20 91 6a 00 	lds	r18, 0x006A
     37a:	30 91 6b 00 	lds	r19, 0x006B
     37e:	f9 01       	movw	r30, r18
     380:	ee 0f       	add	r30, r30
     382:	ff 1f       	adc	r31, r31
     384:	e2 0f       	add	r30, r18
     386:	f3 1f       	adc	r31, r19
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	e4 59       	subi	r30, 0x94	; 148
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	23 85       	ldd	r18, Z+11	; 0x0b
     396:	21 30       	cpi	r18, 0x01	; 1
     398:	09 f4       	brne	.+2      	; 0x39c <timer_run+0x182>
     39a:	7f c1       	rjmp	.+766    	; 0x69a <__stack+0x23b>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     39c:	20 91 6a 00 	lds	r18, 0x006A
     3a0:	30 91 6b 00 	lds	r19, 0x006B
     3a4:	2f 5f       	subi	r18, 0xFF	; 255
     3a6:	3f 4f       	sbci	r19, 0xFF	; 255
     3a8:	30 93 6b 00 	sts	0x006B, r19
     3ac:	20 93 6a 00 	sts	0x006A, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     3b0:	20 91 6a 00 	lds	r18, 0x006A
     3b4:	30 91 6b 00 	lds	r19, 0x006B
     3b8:	27 70       	andi	r18, 0x07	; 7
     3ba:	33 27       	eor	r19, r19
     3bc:	30 93 6b 00 	sts	0x006B, r19
     3c0:	20 93 6a 00 	sts	0x006A, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     3c4:	20 91 6a 00 	lds	r18, 0x006A
     3c8:	30 91 6b 00 	lds	r19, 0x006B
     3cc:	f9 01       	movw	r30, r18
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e2 0f       	add	r30, r18
     3d4:	f3 1f       	adc	r31, r19
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	e4 59       	subi	r30, 0x94	; 148
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	23 85       	ldd	r18, Z+11	; 0x0b
     3e4:	21 30       	cpi	r18, 0x01	; 1
     3e6:	09 f4       	brne	.+2      	; 0x3ea <timer_run+0x1d0>
     3e8:	72 c1       	rjmp	.+740    	; 0x6ce <__stack+0x26f>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     3ea:	20 91 6a 00 	lds	r18, 0x006A
     3ee:	30 91 6b 00 	lds	r19, 0x006B
     3f2:	2f 5f       	subi	r18, 0xFF	; 255
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	30 93 6b 00 	sts	0x006B, r19
     3fa:	20 93 6a 00 	sts	0x006A, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     3fe:	20 91 6a 00 	lds	r18, 0x006A
     402:	30 91 6b 00 	lds	r19, 0x006B
     406:	27 70       	andi	r18, 0x07	; 7
     408:	33 27       	eor	r19, r19
     40a:	30 93 6b 00 	sts	0x006B, r19
     40e:	20 93 6a 00 	sts	0x006A, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     412:	20 91 6a 00 	lds	r18, 0x006A
     416:	30 91 6b 00 	lds	r19, 0x006B
     41a:	f9 01       	movw	r30, r18
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	e2 0f       	add	r30, r18
     422:	f3 1f       	adc	r31, r19
     424:	ee 0f       	add	r30, r30
     426:	ff 1f       	adc	r31, r31
     428:	ee 0f       	add	r30, r30
     42a:	ff 1f       	adc	r31, r31
     42c:	e4 59       	subi	r30, 0x94	; 148
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	23 85       	ldd	r18, Z+11	; 0x0b
     432:	21 30       	cpi	r18, 0x01	; 1
     434:	09 f4       	brne	.+2      	; 0x438 <timer_run+0x21e>
     436:	65 c1       	rjmp	.+714    	; 0x702 <__stack+0x2a3>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     438:	20 91 6a 00 	lds	r18, 0x006A
     43c:	30 91 6b 00 	lds	r19, 0x006B
     440:	2f 5f       	subi	r18, 0xFF	; 255
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	30 93 6b 00 	sts	0x006B, r19
     448:	20 93 6a 00 	sts	0x006A, r18
		soft_timer_id %= SOFT_TIMER_NUM;	
     44c:	20 91 6a 00 	lds	r18, 0x006A
     450:	30 91 6b 00 	lds	r19, 0x006B
     454:	27 70       	andi	r18, 0x07	; 7
     456:	33 27       	eor	r19, r19
     458:	30 93 6b 00 	sts	0x006B, r19
     45c:	20 93 6a 00 	sts	0x006A, r18
	//避免初始化异常
	soft_timer_id %= SOFT_TIMER_NUM;
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
     460:	20 91 6a 00 	lds	r18, 0x006A
     464:	30 91 6b 00 	lds	r19, 0x006B
     468:	f9 01       	movw	r30, r18
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	e2 0f       	add	r30, r18
     470:	f3 1f       	adc	r31, r19
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	ee 0f       	add	r30, r30
     478:	ff 1f       	adc	r31, r31
     47a:	e4 59       	subi	r30, 0x94	; 148
     47c:	ff 4f       	sbci	r31, 0xFF	; 255
     47e:	23 85       	ldd	r18, Z+11	; 0x0b
     480:	21 30       	cpi	r18, 0x01	; 1
     482:	09 f4       	brne	.+2      	; 0x486 <__stack+0x27>
     484:	58 c1       	rjmp	.+688    	; 0x736 <__stack+0x2d7>
				//
				return;//执行了一次有效的定时服务后退出，等待下次扫描
			}
		}
		//
		soft_timer_id++;
     486:	80 91 6a 00 	lds	r24, 0x006A
     48a:	90 91 6b 00 	lds	r25, 0x006B
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	90 93 6b 00 	sts	0x006B, r25
     494:	80 93 6a 00 	sts	0x006A, r24
		soft_timer_id %= SOFT_TIMER_NUM;	
     498:	80 91 6a 00 	lds	r24, 0x006A
     49c:	90 91 6b 00 	lds	r25, 0x006B
     4a0:	87 70       	andi	r24, 0x07	; 7
     4a2:	99 27       	eor	r25, r25
     4a4:	90 93 6b 00 	sts	0x006B, r25
     4a8:	80 93 6a 00 	sts	0x006A, r24
     4ac:	08 95       	ret
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
		{
			if(boot_time >= soft_timer[soft_timer_id].overtime)
     4ae:	20 91 6a 00 	lds	r18, 0x006A
     4b2:	30 91 6b 00 	lds	r19, 0x006B
     4b6:	f9 01       	movw	r30, r18
     4b8:	ee 0f       	add	r30, r30
     4ba:	ff 1f       	adc	r31, r31
     4bc:	e2 0f       	add	r30, r18
     4be:	f3 1f       	adc	r31, r19
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	e4 59       	subi	r30, 0x94	; 148
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	46 81       	ldd	r20, Z+6	; 0x06
     4ce:	57 81       	ldd	r21, Z+7	; 0x07
     4d0:	60 85       	ldd	r22, Z+8	; 0x08
     4d2:	71 85       	ldd	r23, Z+9	; 0x09
     4d4:	84 17       	cp	r24, r20
     4d6:	95 07       	cpc	r25, r21
     4d8:	a6 07       	cpc	r26, r22
     4da:	b7 07       	cpc	r27, r23
     4dc:	08 f4       	brcc	.+2      	; 0x4e0 <__stack+0x81>
     4de:	c2 ce       	rjmp	.-636    	; 0x264 <timer_run+0x4a>
			{
				//根据重试参数判断是否关闭定时器
				if(-1 != soft_timer[soft_timer_id].retry)
     4e0:	80 91 6a 00 	lds	r24, 0x006A
     4e4:	90 91 6b 00 	lds	r25, 0x006B
     4e8:	fc 01       	movw	r30, r24
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	e8 0f       	add	r30, r24
     4f0:	f9 1f       	adc	r31, r25
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	ee 0f       	add	r30, r30
     4f8:	ff 1f       	adc	r31, r31
     4fa:	e4 59       	subi	r30, 0x94	; 148
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	82 85       	ldd	r24, Z+10	; 0x0a
     500:	8f 3f       	cpi	r24, 0xFF	; 255
     502:	29 f1       	breq	.+74     	; 0x54e <__stack+0xef>
				{
					//重试次数为-1代表一直运行
					if(soft_timer[soft_timer_id].retry > 0)
     504:	80 91 6a 00 	lds	r24, 0x006A
     508:	90 91 6b 00 	lds	r25, 0x006B
     50c:	fc 01       	movw	r30, r24
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e8 0f       	add	r30, r24
     514:	f9 1f       	adc	r31, r25
     516:	ee 0f       	add	r30, r30
     518:	ff 1f       	adc	r31, r31
     51a:	ee 0f       	add	r30, r30
     51c:	ff 1f       	adc	r31, r31
     51e:	e4 59       	subi	r30, 0x94	; 148
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	82 85       	ldd	r24, Z+10	; 0x0a
     524:	18 16       	cp	r1, r24
     526:	0c f0       	brlt	.+2      	; 0x52a <__stack+0xcb>
     528:	20 c1       	rjmp	.+576    	; 0x76a <__stack+0x30b>
					{
						//减重试次数
						soft_timer[soft_timer_id].retry--;
     52a:	80 91 6a 00 	lds	r24, 0x006A
     52e:	90 91 6b 00 	lds	r25, 0x006B
     532:	fc 01       	movw	r30, r24
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	e8 0f       	add	r30, r24
     53a:	f9 1f       	adc	r31, r25
     53c:	ee 0f       	add	r30, r30
     53e:	ff 1f       	adc	r31, r31
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	e4 59       	subi	r30, 0x94	; 148
     546:	ff 4f       	sbci	r31, 0xFF	; 255
     548:	82 85       	ldd	r24, Z+10	; 0x0a
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	82 87       	std	Z+10, r24	; 0x0a
						soft_timer[soft_timer_id].enable = FALSE;
					}					
				}
				//
				//在执行定时器服务程序的过程中能够再次设置定时器				
				OnTimer(soft_timer[soft_timer_id].id);//定时器溢出处理
     54e:	80 91 6a 00 	lds	r24, 0x006A
     552:	90 91 6b 00 	lds	r25, 0x006B
     556:	fc 01       	movw	r30, r24
     558:	ee 0f       	add	r30, r30
     55a:	ff 1f       	adc	r31, r31
     55c:	e8 0f       	add	r30, r24
     55e:	f9 1f       	adc	r31, r25
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	e4 59       	subi	r30, 0x94	; 148
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	80 81       	ld	r24, Z
     56e:	91 81       	ldd	r25, Z+1	; 0x01
     570:	2e d7       	rcall	.+3676   	; 0x13ce <OnTimer>
				//
				//定时器服务程序运行时间不算在定时时间内
				if(TRUE == soft_timer[soft_timer_id].enable)
     572:	80 91 6a 00 	lds	r24, 0x006A
     576:	90 91 6b 00 	lds	r25, 0x006B
     57a:	fc 01       	movw	r30, r24
     57c:	ee 0f       	add	r30, r30
     57e:	ff 1f       	adc	r31, r31
     580:	e8 0f       	add	r30, r24
     582:	f9 1f       	adc	r31, r25
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	e4 59       	subi	r30, 0x94	; 148
     58e:	ff 4f       	sbci	r31, 0xFF	; 255
     590:	83 85       	ldd	r24, Z+11	; 0x0b
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	09 f0       	breq	.+2      	; 0x598 <__stack+0x139>
     596:	77 cf       	rjmp	.-274    	; 0x486 <__stack+0x27>
				{
					//定时继续运行，重置定时器时间
					soft_timer[soft_timer_id].overtime = soft_timer[soft_timer_id].ms + boot_time;
     598:	20 91 6a 00 	lds	r18, 0x006A
     59c:	30 91 6b 00 	lds	r19, 0x006B
     5a0:	80 91 6a 00 	lds	r24, 0x006A
     5a4:	90 91 6b 00 	lds	r25, 0x006B
     5a8:	fc 01       	movw	r30, r24
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	e8 0f       	add	r30, r24
     5b0:	f9 1f       	adc	r31, r25
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	e4 59       	subi	r30, 0x94	; 148
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	82 81       	ldd	r24, Z+2	; 0x02
     5c0:	93 81       	ldd	r25, Z+3	; 0x03
     5c2:	a4 81       	ldd	r26, Z+4	; 0x04
     5c4:	b5 81       	ldd	r27, Z+5	; 0x05
     5c6:	40 91 9e 01 	lds	r20, 0x019E
     5ca:	50 91 9f 01 	lds	r21, 0x019F
     5ce:	60 91 a0 01 	lds	r22, 0x01A0
     5d2:	70 91 a1 01 	lds	r23, 0x01A1
     5d6:	84 0f       	add	r24, r20
     5d8:	95 1f       	adc	r25, r21
     5da:	a6 1f       	adc	r26, r22
     5dc:	b7 1f       	adc	r27, r23
     5de:	f9 01       	movw	r30, r18
     5e0:	ee 0f       	add	r30, r30
     5e2:	ff 1f       	adc	r31, r31
     5e4:	e2 0f       	add	r30, r18
     5e6:	f3 1f       	adc	r31, r19
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	ee 0f       	add	r30, r30
     5ee:	ff 1f       	adc	r31, r31
     5f0:	e4 59       	subi	r30, 0x94	; 148
     5f2:	ff 4f       	sbci	r31, 0xFF	; 255
     5f4:	86 83       	std	Z+6, r24	; 0x06
     5f6:	97 83       	std	Z+7, r25	; 0x07
     5f8:	a0 87       	std	Z+8, r26	; 0x08
     5fa:	b1 87       	std	Z+9, r27	; 0x09
     5fc:	44 cf       	rjmp	.-376    	; 0x486 <__stack+0x27>
	//
	for(id=0; id<SOFT_TIMER_NUM; id++)
	{
		if(TRUE == soft_timer[soft_timer_id].enable)
		{
			if(boot_time >= soft_timer[soft_timer_id].overtime)
     5fe:	20 91 6a 00 	lds	r18, 0x006A
     602:	30 91 6b 00 	lds	r19, 0x006B
     606:	f9 01       	movw	r30, r18
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	e2 0f       	add	r30, r18
     60e:	f3 1f       	adc	r31, r19
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	e4 59       	subi	r30, 0x94	; 148
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	46 81       	ldd	r20, Z+6	; 0x06
     61e:	57 81       	ldd	r21, Z+7	; 0x07
     620:	60 85       	ldd	r22, Z+8	; 0x08
     622:	71 85       	ldd	r23, Z+9	; 0x09
     624:	84 17       	cp	r24, r20
     626:	95 07       	cpc	r25, r21
     628:	a6 07       	cpc	r26, r22
     62a:	b7 07       	cpc	r27, r23
     62c:	08 f4       	brcc	.+2      	; 0x630 <__stack+0x1d1>
     62e:	41 ce       	rjmp	.-894    	; 0x2b2 <timer_run+0x98>
     630:	57 cf       	rjmp	.-338    	; 0x4e0 <__stack+0x81>
     632:	20 91 6a 00 	lds	r18, 0x006A
     636:	30 91 6b 00 	lds	r19, 0x006B
     63a:	f9 01       	movw	r30, r18
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	e2 0f       	add	r30, r18
     642:	f3 1f       	adc	r31, r19
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	e4 59       	subi	r30, 0x94	; 148
     64e:	ff 4f       	sbci	r31, 0xFF	; 255
     650:	46 81       	ldd	r20, Z+6	; 0x06
     652:	57 81       	ldd	r21, Z+7	; 0x07
     654:	60 85       	ldd	r22, Z+8	; 0x08
     656:	71 85       	ldd	r23, Z+9	; 0x09
     658:	84 17       	cp	r24, r20
     65a:	95 07       	cpc	r25, r21
     65c:	a6 07       	cpc	r26, r22
     65e:	b7 07       	cpc	r27, r23
     660:	08 f4       	brcc	.+2      	; 0x664 <__stack+0x205>
     662:	4e ce       	rjmp	.-868    	; 0x300 <timer_run+0xe6>
     664:	3d cf       	rjmp	.-390    	; 0x4e0 <__stack+0x81>
     666:	20 91 6a 00 	lds	r18, 0x006A
     66a:	30 91 6b 00 	lds	r19, 0x006B
     66e:	f9 01       	movw	r30, r18
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	e2 0f       	add	r30, r18
     676:	f3 1f       	adc	r31, r19
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	e4 59       	subi	r30, 0x94	; 148
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	46 81       	ldd	r20, Z+6	; 0x06
     686:	57 81       	ldd	r21, Z+7	; 0x07
     688:	60 85       	ldd	r22, Z+8	; 0x08
     68a:	71 85       	ldd	r23, Z+9	; 0x09
     68c:	84 17       	cp	r24, r20
     68e:	95 07       	cpc	r25, r21
     690:	a6 07       	cpc	r26, r22
     692:	b7 07       	cpc	r27, r23
     694:	08 f4       	brcc	.+2      	; 0x698 <__stack+0x239>
     696:	5b ce       	rjmp	.-842    	; 0x34e <timer_run+0x134>
     698:	23 cf       	rjmp	.-442    	; 0x4e0 <__stack+0x81>
     69a:	20 91 6a 00 	lds	r18, 0x006A
     69e:	30 91 6b 00 	lds	r19, 0x006B
     6a2:	f9 01       	movw	r30, r18
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	e2 0f       	add	r30, r18
     6aa:	f3 1f       	adc	r31, r19
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	e4 59       	subi	r30, 0x94	; 148
     6b6:	ff 4f       	sbci	r31, 0xFF	; 255
     6b8:	46 81       	ldd	r20, Z+6	; 0x06
     6ba:	57 81       	ldd	r21, Z+7	; 0x07
     6bc:	60 85       	ldd	r22, Z+8	; 0x08
     6be:	71 85       	ldd	r23, Z+9	; 0x09
     6c0:	84 17       	cp	r24, r20
     6c2:	95 07       	cpc	r25, r21
     6c4:	a6 07       	cpc	r26, r22
     6c6:	b7 07       	cpc	r27, r23
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <__stack+0x26d>
     6ca:	68 ce       	rjmp	.-816    	; 0x39c <timer_run+0x182>
     6cc:	09 cf       	rjmp	.-494    	; 0x4e0 <__stack+0x81>
     6ce:	20 91 6a 00 	lds	r18, 0x006A
     6d2:	30 91 6b 00 	lds	r19, 0x006B
     6d6:	f9 01       	movw	r30, r18
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	e2 0f       	add	r30, r18
     6de:	f3 1f       	adc	r31, r19
     6e0:	ee 0f       	add	r30, r30
     6e2:	ff 1f       	adc	r31, r31
     6e4:	ee 0f       	add	r30, r30
     6e6:	ff 1f       	adc	r31, r31
     6e8:	e4 59       	subi	r30, 0x94	; 148
     6ea:	ff 4f       	sbci	r31, 0xFF	; 255
     6ec:	46 81       	ldd	r20, Z+6	; 0x06
     6ee:	57 81       	ldd	r21, Z+7	; 0x07
     6f0:	60 85       	ldd	r22, Z+8	; 0x08
     6f2:	71 85       	ldd	r23, Z+9	; 0x09
     6f4:	84 17       	cp	r24, r20
     6f6:	95 07       	cpc	r25, r21
     6f8:	a6 07       	cpc	r26, r22
     6fa:	b7 07       	cpc	r27, r23
     6fc:	08 f4       	brcc	.+2      	; 0x700 <__stack+0x2a1>
     6fe:	75 ce       	rjmp	.-790    	; 0x3ea <timer_run+0x1d0>
     700:	ef ce       	rjmp	.-546    	; 0x4e0 <__stack+0x81>
     702:	20 91 6a 00 	lds	r18, 0x006A
     706:	30 91 6b 00 	lds	r19, 0x006B
     70a:	f9 01       	movw	r30, r18
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	e2 0f       	add	r30, r18
     712:	f3 1f       	adc	r31, r19
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	ee 0f       	add	r30, r30
     71a:	ff 1f       	adc	r31, r31
     71c:	e4 59       	subi	r30, 0x94	; 148
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	46 81       	ldd	r20, Z+6	; 0x06
     722:	57 81       	ldd	r21, Z+7	; 0x07
     724:	60 85       	ldd	r22, Z+8	; 0x08
     726:	71 85       	ldd	r23, Z+9	; 0x09
     728:	84 17       	cp	r24, r20
     72a:	95 07       	cpc	r25, r21
     72c:	a6 07       	cpc	r26, r22
     72e:	b7 07       	cpc	r27, r23
     730:	08 f4       	brcc	.+2      	; 0x734 <__stack+0x2d5>
     732:	82 ce       	rjmp	.-764    	; 0x438 <timer_run+0x21e>
     734:	d5 ce       	rjmp	.-598    	; 0x4e0 <__stack+0x81>
     736:	20 91 6a 00 	lds	r18, 0x006A
     73a:	30 91 6b 00 	lds	r19, 0x006B
     73e:	f9 01       	movw	r30, r18
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	e2 0f       	add	r30, r18
     746:	f3 1f       	adc	r31, r19
     748:	ee 0f       	add	r30, r30
     74a:	ff 1f       	adc	r31, r31
     74c:	ee 0f       	add	r30, r30
     74e:	ff 1f       	adc	r31, r31
     750:	e4 59       	subi	r30, 0x94	; 148
     752:	ff 4f       	sbci	r31, 0xFF	; 255
     754:	46 81       	ldd	r20, Z+6	; 0x06
     756:	57 81       	ldd	r21, Z+7	; 0x07
     758:	60 85       	ldd	r22, Z+8	; 0x08
     75a:	71 85       	ldd	r23, Z+9	; 0x09
     75c:	84 17       	cp	r24, r20
     75e:	95 07       	cpc	r25, r21
     760:	a6 07       	cpc	r26, r22
     762:	b7 07       	cpc	r27, r23
     764:	08 f4       	brcc	.+2      	; 0x768 <__stack+0x309>
     766:	8f ce       	rjmp	.-738    	; 0x486 <__stack+0x27>
     768:	bb ce       	rjmp	.-650    	; 0x4e0 <__stack+0x81>
						soft_timer[soft_timer_id].retry--;
					}
					else
					{
						//关闭定时器
						soft_timer[soft_timer_id].enable = FALSE;
     76a:	80 91 6a 00 	lds	r24, 0x006A
     76e:	90 91 6b 00 	lds	r25, 0x006B
     772:	fc 01       	movw	r30, r24
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	e8 0f       	add	r30, r24
     77a:	f9 1f       	adc	r31, r25
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	e4 59       	subi	r30, 0x94	; 148
     786:	ff 4f       	sbci	r31, 0xFF	; 255
     788:	13 86       	std	Z+11, r1	; 0x0b
     78a:	e1 ce       	rjmp	.-574    	; 0x54e <__stack+0xef>

0000078c <hardward_init>:
}
/////////////////////////////////////////////////////////////
void hardward_init(void)
{
	//硬件初始化程序,设置固定的端口方向,串口属性,AD属性等
	wdt_disable();
     78c:	88 e1       	ldi	r24, 0x18	; 24
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	80 93 41 00 	sts	0x0041, r24
     796:	10 92 41 00 	sts	0x0041, r1
     79a:	0f be       	out	0x3f, r0	; 63
	//I/O设置
	PORTB=0;//先设置所有的口为高阻
     79c:	18 ba       	out	0x18, r1	; 24
	//
    DDRB = _BV(PB1)|_BV(PB2)|_BV(PB3);
     79e:	8e e0       	ldi	r24, 0x0E	; 14
     7a0:	87 bb       	out	0x17, r24	; 23

    PORTD = _BV(PD2)|_BV(PD3);
     7a2:	8c e0       	ldi	r24, 0x0C	; 12
     7a4:	82 bb       	out	0x12, r24	; 18
	DDRD = _BV(PD7);//根据需要设置输出口
     7a6:	20 e8       	ldi	r18, 0x80	; 128
     7a8:	21 bb       	out	0x11, r18	; 17
    PORTC = _BV(PC2)|_BV(PC3);
     7aa:	85 bb       	out	0x15, r24	; 21
    DDRC = _BV(PC4)|_BV(PC5);
     7ac:	80 e3       	ldi	r24, 0x30	; 48
     7ae:	84 bb       	out	0x14, r24	; 20
	//定时器0
	TCCR0 = 0x03;//64分频
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	83 bf       	out	0x33, r24	; 51
	{		
		TCNT0 = 255-62;//4MHz时钟,计数62次,约1毫秒
	}
	#elif F_CPU == F_16M
	{
		TCNT0 = 255-250;//16MHz时钟,计数250次,约1毫秒
     7b4:	85 e0       	ldi	r24, 0x05	; 5
     7b6:	82 bf       	out	0x32, r24	; 50
	#else
	{
		#error "F_CPU error"
	}
	#endif
	TIMSK |=_BV(TOIE0);//定时器0溢出中断使能
     7b8:	89 b7       	in	r24, 0x39	; 57
     7ba:	81 60       	ori	r24, 0x01	; 1
     7bc:	89 bf       	out	0x39, r24	; 57
	//定时器1
	TCCR1A = 0xf2;//oc1a,oc1b匹配时置1,达到TOP时清零
     7be:	82 ef       	ldi	r24, 0xF2	; 242
     7c0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x19;//时钟不分频
     7c2:	89 e1       	ldi	r24, 0x19	; 25
     7c4:	8e bd       	out	0x2e, r24	; 46
	ICR1 = PWM_TOP;//TOP//4kHz
     7c6:	88 ec       	ldi	r24, 0xC8	; 200
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	97 bd       	out	0x27, r25	; 39
     7cc:	86 bd       	out	0x26, r24	; 38

	//启用OCR2
	TCCR2 = 0b01111100;//oc1a,oc1b匹配时置1,达到TOP时清零
     7ce:	8c e7       	ldi	r24, 0x7C	; 124
     7d0:	85 bd       	out	0x25, r24	; 37
//	TCCR1B = 0x19;//时钟不分频
//	OC2 = PWM_TOP;//TOP//4kHz5 /400;
temp_for_400_255 = 200;
temp_for_400_255 = (temp_for_400_255 <<8) /400;
     7d2:	80 e8       	ldi	r24, 0x80	; 128
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	a0 e0       	ldi	r26, 0x00	; 0
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	80 93 62 00 	sts	0x0062, r24
     7de:	90 93 63 00 	sts	0x0063, r25
     7e2:	a0 93 64 00 	sts	0x0064, r26
     7e6:	b0 93 65 00 	sts	0x0065, r27
	OCR2 =temp_for_400_255 ;
     7ea:	23 bd       	out	0x23, r18	; 35

    OCR1A = PWM_TOP/2;//电压输出初始占空比50%,2.5v
     7ec:	84 e6       	ldi	r24, 0x64	; 100
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	9b bd       	out	0x2b, r25	; 43
     7f2:	8a bd       	out	0x2a, r24	; 42
    OCR2 =  PWM_TOP/2;
     7f4:	24 e6       	ldi	r18, 0x64	; 100
     7f6:	23 bd       	out	0x23, r18	; 35
   // OCR1B = PWM_LOW;//触发脉冲,占空比LOW_PULSE/PWM_TOP(低电平时间)
   OCR1B = PWM_TOP/2;
     7f8:	99 bd       	out	0x29, r25	; 41
     7fa:	88 bd       	out	0x28, r24	; 40
	//
	#if USED_AD == TRUE
	//AD
	//ADMUX = _BV(ADLAR);//0010 0000//AREF参考,高8位在ADCH
	ADMUX = 0;//0000 0000//AREF参考
     7fc:	17 b8       	out	0x07, r1	; 7
	ADMUX |= ICM7555_AD;
     7fe:	87 b1       	in	r24, 0x07	; 7
     800:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x8f;//1000 1111//允许ad转换,单次转换方式,允许中断,128分频
     802:	8f e8       	ldi	r24, 0x8F	; 143
     804:	86 b9       	out	0x06, r24	; 6
	#endif
	//
    //外中断
    MCUCR &= 0xf0;
     806:	85 b7       	in	r24, 0x35	; 53
     808:	80 7f       	andi	r24, 0xF0	; 240
     80a:	85 bf       	out	0x35, r24	; 53
    MCUCR |= 0x08;//外中断1下降沿触发
     80c:	85 b7       	in	r24, 0x35	; 53
     80e:	88 60       	ori	r24, 0x08	; 8
     810:	85 bf       	out	0x35, r24	; 53
    GICR &= 0x3f;
     812:	8b b7       	in	r24, 0x3b	; 59
     814:	8f 73       	andi	r24, 0x3F	; 63
     816:	8b bf       	out	0x3b, r24	; 59
    GICR |= _BV(INT1);//外中断1使能
     818:	8b b7       	in	r24, 0x3b	; 59
     81a:	80 68       	ori	r24, 0x80	; 128
     81c:	8b bf       	out	0x3b, r24	; 59
	//
	#if USART_TEST == FALSE
	{
		//38461.5 Bd //0.2%
		UBRRH = 0;
     81e:	10 bc       	out	0x20, r1	; 32
		{
			UBRRL = 12;
		}
		#elif F_CPU == F_16M
		{
			UBRRL = 51;
     820:	83 e3       	ldi	r24, 0x33	; 51
     822:	89 b9       	out	0x09, r24	; 9
		#else
		{
			#error "F_CPU error"
		}
		#endif
		UCSRA = (1<<U2X);//波特率分频因子从16降到8
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	8b b9       	out	0x0b, r24	; 11
		UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);//接收和发送中断使能
     828:	88 ed       	ldi	r24, 0xD8	; 216
     82a:	8a b9       	out	0x0a, r24	; 10
		UCSRC = (1<<URSEL)|(3<<UCSZ0);//8N1
     82c:	86 e8       	ldi	r24, 0x86	; 134
     82e:	80 bd       	out	0x20, r24	; 32
		b485en = 0;//接收使能,发送禁止
     830:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     832:	8f e1       	ldi	r24, 0x1F	; 31
     834:	9e e4       	ldi	r25, 0x4E	; 78
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <hardward_init+0xaa>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <hardward_init+0xb0>
     83c:	00 00       	nop
     83e:	08 95       	ret

00000840 <softward_init>:
	_delay_ms(5);
}
////////////////////////////////////////////////////////////////
void softward_init(void)
{	
    MCUCR &= 0x0f;//休眠禁止,空闲模式
     840:	85 b7       	in	r24, 0x35	; 53
     842:	8f 70       	andi	r24, 0x0F	; 15
     844:	85 bf       	out	0x35, r24	; 53
    //
    ms1_counter = 0;
     846:	10 92 6b 01 	sts	0x016B, r1
    ms10_counter = 0;
     84a:	10 92 6c 01 	sts	0x016C, r1
    ms100_counter = 0;
     84e:	10 92 a4 01 	sts	0x01A4, r1
    s1_counter = 0;
     852:	10 92 a2 01 	sts	0x01A2, r1
    m_ms = 0;
     856:	10 92 72 01 	sts	0x0172, r1
     85a:	10 92 71 01 	sts	0x0171, r1
    m_minute = 0;
     85e:	10 92 79 01 	sts	0x0179, r1
     862:	10 92 78 01 	sts	0x0178, r1
	//
    m_pulse_counter = 0;//检测脉冲个数
     866:	10 92 a8 01 	sts	0x01A8, r1
     86a:	10 92 a7 01 	sts	0x01A7, r1
    m_pulse_value.ml = 0;//检测脉冲宽度值
     86e:	10 92 d8 00 	sts	0x00D8, r1
     872:	10 92 d9 00 	sts	0x00D9, r1
     876:	10 92 da 00 	sts	0x00DA, r1
     87a:	10 92 db 00 	sts	0x00DB, r1
    //
	m_cgq_ack=0;
     87e:	10 92 75 01 	sts	0x0175, r1
    //
    m_pulse_value_bak.ms[0] = PULSE_TOP/2;
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	99 e1       	ldi	r25, 0x19	; 25
     886:	90 93 d1 00 	sts	0x00D1, r25
     88a:	80 93 d0 00 	sts	0x00D0, r24
    m_pulse_value_bak.ms[1] = PULSE_TOP/2;
     88e:	90 93 d3 00 	sts	0x00D3, r25
     892:	80 93 d2 00 	sts	0x00D2, r24
    m_pulse_value_bak.ms[2] = PULSE_TOP/2;
     896:	90 93 d5 00 	sts	0x00D5, r25
     89a:	80 93 d4 00 	sts	0x00D4, r24
    m_pulse_value_bak.ms[3] = PULSE_TOP/2;
     89e:	90 93 d7 00 	sts	0x00D7, r25
     8a2:	80 93 d6 00 	sts	0x00D6, r24
	//
	#if USED_AD == TRUE
    m_ad_value_bak.ms[0] = PULSE_TOP/2;
     8a6:	90 93 87 01 	sts	0x0187, r25
     8aa:	80 93 86 01 	sts	0x0186, r24
    m_ad_value_bak.ms[1] = PULSE_TOP/2;
     8ae:	90 93 89 01 	sts	0x0189, r25
     8b2:	80 93 88 01 	sts	0x0188, r24
    m_ad_value_bak.ms[2] = PULSE_TOP/2;
     8b6:	90 93 8b 01 	sts	0x018B, r25
     8ba:	80 93 8a 01 	sts	0x018A, r24
    m_ad_value_bak.ms[3] = PULSE_TOP/2;
     8be:	90 93 8d 01 	sts	0x018D, r25
     8c2:	80 93 8c 01 	sts	0x018C, r24
	#endif

	//
	m_pulse_value_rc = PULSE_BOTTOM;
     8c6:	84 e5       	ldi	r24, 0x54	; 84
     8c8:	98 e0       	ldi	r25, 0x08	; 8
     8ca:	90 93 cd 00 	sts	0x00CD, r25
     8ce:	80 93 cc 00 	sts	0x00CC, r24
	m_ad_value_rc = PULSE_BOTTOM;
     8d2:	90 93 7b 01 	sts	0x017B, r25
     8d6:	80 93 7a 01 	sts	0x017A, r24
	//
	uart_frame_head_ok = 0;
     8da:	10 92 76 01 	sts	0x0176, r1
	command_gaoliaowei = 0;
     8de:	10 92 73 01 	sts	0x0173, r1
	command_diliaowei = 0;
     8e2:	10 92 74 01 	sts	0x0174, r1
	uart_send_enable = 0;
     8e6:	10 92 a3 01 	sts	0x01A3, r1
	//
	pulse_value_counter=0;
     8ea:	10 92 a6 01 	sts	0x01A6, r1
	pulse_value_write_id=0;
     8ee:	10 92 77 01 	sts	0x0177, r1
	pulse_value_read_id=0;
     8f2:	10 92 e7 00 	sts	0x00E7, r1
	//
	boot_time = 0;
     8f6:	10 92 9e 01 	sts	0x019E, r1
     8fa:	10 92 9f 01 	sts	0x019F, r1
     8fe:	10 92 a0 01 	sts	0x01A0, r1
     902:	10 92 a1 01 	sts	0x01A1, r1
	boot_time_sub = 0;
     906:	10 92 a5 01 	sts	0x01A5, r1
     90a:	08 95       	ret

0000090c <wdt_reset_mcu>:
}
////////////////////////////////////////////////////////////////
void wdt_reset_mcu(void)
{
	//通过看门狗来复位单片机
	wdt_reset();
     90c:	a8 95       	wdr
	wdt_disable();
     90e:	88 e1       	ldi	r24, 0x18	; 24
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	80 93 41 00 	sts	0x0041, r24
     918:	10 92 41 00 	sts	0x0041, r1
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	2f ef       	ldi	r18, 0xFF	; 255
     920:	80 e7       	ldi	r24, 0x70	; 112
     922:	92 e0       	ldi	r25, 0x02	; 2
     924:	21 50       	subi	r18, 0x01	; 1
     926:	80 40       	sbci	r24, 0x00	; 0
     928:	90 40       	sbci	r25, 0x00	; 0
     92a:	e1 f7       	brne	.-8      	; 0x924 <wdt_reset_mcu+0x18>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <wdt_reset_mcu+0x22>
     92e:	00 00       	nop
	_delay_ms(50);
	cli();//看门狗复位单片机
     930:	f8 94       	cli
	wdt_enable(WDTO_120MS);
     932:	2b e0       	ldi	r18, 0x0B	; 11
     934:	88 e1       	ldi	r24, 0x18	; 24
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	a8 95       	wdr
     93e:	80 93 41 00 	sts	0x0041, r24
     942:	0f be       	out	0x3f, r0	; 63
     944:	20 93 41 00 	sts	0x0041, r18
     948:	ff cf       	rjmp	.-2      	; 0x948 <wdt_reset_mcu+0x3c>

0000094a <eeprom_write_word_2>:
	//
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
     94a:	cf 93       	push	r28
	unsigned m_sreg = SREG;
     94c:	cf b7       	in	r28, 0x3f	; 63
	cli();
     94e:	f8 94       	cli
	wdt_reset();
     950:	a8 95       	wdr
	eeprom_busy_wait();
     952:	e1 99       	sbic	0x1c, 1	; 28
     954:	fe cf       	rjmp	.-4      	; 0x952 <eeprom_write_word_2+0x8>
	eeprom_write_word((uint16_t *)p, val);
     956:	82 da       	rcall	.-2812   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     958:	e1 99       	sbic	0x1c, 1	; 28
     95a:	fe cf       	rjmp	.-4      	; 0x958 <eeprom_write_word_2+0xe>
	SREG = m_sreg;
     95c:	cf bf       	out	0x3f, r28	; 63
}
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <eeprom_read_word_user>:
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_user(const uint16_t *p1)
{
     962:	2f 92       	push	r2
     964:	3f 92       	push	r3
     966:	4f 92       	push	r4
     968:	5f 92       	push	r5
     96a:	6f 92       	push	r6
     96c:	7f 92       	push	r7
     96e:	8f 92       	push	r8
     970:	9f 92       	push	r9
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	00 d0       	rcall	.+0      	; 0x988 <eeprom_read_word_user+0x26>
     988:	00 d0       	rcall	.+0      	; 0x98a <eeprom_read_word_user+0x28>
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	8c 01       	movw	r16, r24
	unsigned short tmp,tmp1,tmp2,tmp3,tmp4,tmp5;
	//
	tmp = 0xff;
	//
	const uint16_t *p2 = (const uint16_t *)(p1+EEPROM_DATA_WORD_SIZE);
     990:	2c 01       	movw	r4, r24
     992:	82 e6       	ldi	r24, 0x62	; 98
     994:	48 0e       	add	r4, r24
     996:	51 1c       	adc	r5, r1
	const uint16_t *p3 = (const uint16_t *)(p1+2*EEPROM_DATA_WORD_SIZE);
     998:	38 01       	movw	r6, r16
     99a:	94 ec       	ldi	r25, 0xC4	; 196
     99c:	69 0e       	add	r6, r25
     99e:	71 1c       	adc	r7, r1
	const uint16_t *p4 = (const uint16_t *)(p1+3*EEPROM_DATA_WORD_SIZE);
     9a0:	58 01       	movw	r10, r16
     9a2:	ea ed       	ldi	r30, 0xDA	; 218
     9a4:	ae 1a       	sub	r10, r30
     9a6:	ee ef       	ldi	r30, 0xFE	; 254
     9a8:	be 0a       	sbc	r11, r30
	const uint16_t *p5 = (const uint16_t *)(p1+4*EEPROM_DATA_WORD_SIZE);
     9aa:	48 01       	movw	r8, r16
     9ac:	f8 e7       	ldi	r31, 0x78	; 120
     9ae:	8f 1a       	sub	r8, r31
     9b0:	fe ef       	ldi	r31, 0xFE	; 254
     9b2:	9f 0a       	sbc	r9, r31
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     9b4:	ff b6       	in	r15, 0x3f	; 63
	cli();
     9b6:	f8 94       	cli
	wdt_reset();
     9b8:	a8 95       	wdr
	eeprom_busy_wait();
     9ba:	e1 99       	sbic	0x1c, 1	; 28
     9bc:	fe cf       	rjmp	.-4      	; 0x9ba <eeprom_read_word_user+0x58>
	tmp = eeprom_read_word((uint16_t *)p);
     9be:	c8 01       	movw	r24, r16
     9c0:	48 da       	rcall	.-2928   	; 0xfffffe52 <__eeprom_end+0xff7efbe8>
     9c2:	9c 83       	std	Y+4, r25	; 0x04
     9c4:	8b 83       	std	Y+3, r24	; 0x03
	eeprom_busy_wait();
     9c6:	e1 99       	sbic	0x1c, 1	; 28
     9c8:	fe cf       	rjmp	.-4      	; 0x9c6 <eeprom_read_word_user+0x64>
	SREG = m_sreg;
     9ca:	ff be       	out	0x3f, r15	; 63
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     9cc:	df b6       	in	r13, 0x3f	; 63
	cli();
     9ce:	f8 94       	cli
	wdt_reset();
     9d0:	a8 95       	wdr
	eeprom_busy_wait();
     9d2:	e1 99       	sbic	0x1c, 1	; 28
     9d4:	fe cf       	rjmp	.-4      	; 0x9d2 <eeprom_read_word_user+0x70>
	tmp = eeprom_read_word((uint16_t *)p);
     9d6:	c2 01       	movw	r24, r4
     9d8:	3c da       	rcall	.-2952   	; 0xfffffe52 <__eeprom_end+0xff7efbe8>
     9da:	7c 01       	movw	r14, r24
	eeprom_busy_wait();
     9dc:	e1 99       	sbic	0x1c, 1	; 28
     9de:	fe cf       	rjmp	.-4      	; 0x9dc <eeprom_read_word_user+0x7a>
	SREG = m_sreg;
     9e0:	df be       	out	0x3f, r13	; 63
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     9e2:	3f b6       	in	r3, 0x3f	; 63
	cli();
     9e4:	f8 94       	cli
	wdt_reset();
     9e6:	a8 95       	wdr
	eeprom_busy_wait();
     9e8:	e1 99       	sbic	0x1c, 1	; 28
     9ea:	fe cf       	rjmp	.-4      	; 0x9e8 <eeprom_read_word_user+0x86>
	tmp = eeprom_read_word((uint16_t *)p);
     9ec:	c3 01       	movw	r24, r6
     9ee:	31 da       	rcall	.-2974   	; 0xfffffe52 <__eeprom_end+0xff7efbe8>
     9f0:	6c 01       	movw	r12, r24
	eeprom_busy_wait();
     9f2:	e1 99       	sbic	0x1c, 1	; 28
     9f4:	fe cf       	rjmp	.-4      	; 0x9f2 <eeprom_read_word_user+0x90>
	SREG = m_sreg;
     9f6:	3f be       	out	0x3f, r3	; 63
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     9f8:	2f b7       	in	r18, 0x3f	; 63
	cli();
     9fa:	f8 94       	cli
	wdt_reset();
     9fc:	a8 95       	wdr
	eeprom_busy_wait();
     9fe:	e1 99       	sbic	0x1c, 1	; 28
     a00:	fe cf       	rjmp	.-4      	; 0x9fe <eeprom_read_word_user+0x9c>
	tmp = eeprom_read_word((uint16_t *)p);
     a02:	c5 01       	movw	r24, r10
     a04:	2a 83       	std	Y+2, r18	; 0x02
     a06:	25 da       	rcall	.-2998   	; 0xfffffe52 <__eeprom_end+0xff7efbe8>
     a08:	1c 01       	movw	r2, r24
     a0a:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     a0c:	e1 99       	sbic	0x1c, 1	; 28
     a0e:	fe cf       	rjmp	.-4      	; 0xa0c <eeprom_read_word_user+0xaa>
	SREG = m_sreg;
     a10:	2f bf       	out	0x3f, r18	; 63
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_2(const uint16_t *p)
{
	unsigned short tmp;
	//
	unsigned m_sreg = SREG;
     a12:	4f b7       	in	r20, 0x3f	; 63
	cli();
     a14:	f8 94       	cli
	wdt_reset();
     a16:	a8 95       	wdr
	eeprom_busy_wait();
     a18:	e1 99       	sbic	0x1c, 1	; 28
     a1a:	fe cf       	rjmp	.-4      	; 0xa18 <eeprom_read_word_user+0xb6>
	tmp = eeprom_read_word((uint16_t *)p);
     a1c:	c4 01       	movw	r24, r8
     a1e:	49 83       	std	Y+1, r20	; 0x01
     a20:	18 da       	rcall	.-3024   	; 0xfffffe52 <__eeprom_end+0xff7efbe8>
     a22:	9c 01       	movw	r18, r24
     a24:	49 81       	ldd	r20, Y+1	; 0x01
	eeprom_busy_wait();
     a26:	e1 99       	sbic	0x1c, 1	; 28
     a28:	fe cf       	rjmp	.-4      	; 0xa26 <eeprom_read_word_user+0xc4>
	SREG = m_sreg;
     a2a:	4f bf       	out	0x3f, r20	; 63
	tmp2 = eeprom_read_word_2(p2);
	tmp3 = eeprom_read_word_2(p3);
	tmp4 = eeprom_read_word_2(p4);
	tmp5 = eeprom_read_word_2(p5);
	//
	if((tmp1==tmp2) && (tmp1==tmp3)) //123
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	8e 15       	cp	r24, r14
     a32:	9f 05       	cpc	r25, r15
     a34:	09 f4       	brne	.+2      	; 0xa38 <eeprom_read_word_user+0xd6>
     a36:	4c c0       	rjmp	.+152    	; 0xad0 <eeprom_read_word_user+0x16e>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp1==tmp3) && (tmp1==tmp4)) //134
     a38:	8c 15       	cp	r24, r12
     a3a:	9d 05       	cpc	r25, r13
     a3c:	39 f1       	breq	.+78     	; 0xa8c <eeprom_read_word_user+0x12a>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp1==tmp4) && (tmp1==tmp5)) //145
     a3e:	82 15       	cp	r24, r2
     a40:	93 05       	cpc	r25, r3
     a42:	09 f0       	breq	.+2      	; 0xa46 <eeprom_read_word_user+0xe4>
     a44:	53 c0       	rjmp	.+166    	; 0xaec <eeprom_read_word_user+0x18a>
     a46:	82 17       	cp	r24, r18
     a48:	93 07       	cpc	r25, r19
     a4a:	09 f0       	breq	.+2      	; 0xa4e <eeprom_read_word_user+0xec>
     a4c:	4f c0       	rjmp	.+158    	; 0xaec <eeprom_read_word_user+0x18a>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     a4e:	1f b7       	in	r17, 0x3f	; 63
	cli();
     a50:	f8 94       	cli
	wdt_reset();
     a52:	a8 95       	wdr
	eeprom_busy_wait();
     a54:	e1 99       	sbic	0x1c, 1	; 28
     a56:	fe cf       	rjmp	.-4      	; 0xa54 <eeprom_read_word_user+0xf2>
	eeprom_write_word((uint16_t *)p, val);
     a58:	6b 81       	ldd	r22, Y+3	; 0x03
     a5a:	7c 81       	ldd	r23, Y+4	; 0x04
     a5c:	c3 01       	movw	r24, r6
     a5e:	fe d9       	rcall	.-3076   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     a60:	e1 99       	sbic	0x1c, 1	; 28
     a62:	fe cf       	rjmp	.-4      	; 0xa60 <eeprom_read_word_user+0xfe>
	SREG = m_sreg;
     a64:	1f bf       	out	0x3f, r17	; 63
		if(tmp != tmp3)
		{
			eeprom_write_word_2(p3,tmp);
		}
		//
		if(tmp != tmp2)
     a66:	eb 81       	ldd	r30, Y+3	; 0x03
     a68:	fc 81       	ldd	r31, Y+4	; 0x04
     a6a:	ee 15       	cp	r30, r14
     a6c:	ff 05       	cpc	r31, r15
     a6e:	09 f4       	brne	.+2      	; 0xa72 <eeprom_read_word_user+0x110>
     a70:	4b c0       	rjmp	.+150    	; 0xb08 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     a72:	1f b7       	in	r17, 0x3f	; 63
	cli();
     a74:	f8 94       	cli
	wdt_reset();
     a76:	a8 95       	wdr
	eeprom_busy_wait();
     a78:	e1 99       	sbic	0x1c, 1	; 28
     a7a:	fe cf       	rjmp	.-4      	; 0xa78 <eeprom_read_word_user+0x116>
	eeprom_write_word((uint16_t *)p, val);
     a7c:	6b 81       	ldd	r22, Y+3	; 0x03
     a7e:	7c 81       	ldd	r23, Y+4	; 0x04
     a80:	c2 01       	movw	r24, r4
     a82:	ec d9       	rcall	.-3112   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     a84:	e1 99       	sbic	0x1c, 1	; 28
     a86:	fe cf       	rjmp	.-4      	; 0xa84 <eeprom_read_word_user+0x122>
	SREG = m_sreg;
     a88:	1f bf       	out	0x3f, r17	; 63
     a8a:	3e c0       	rjmp	.+124    	; 0xb08 <eeprom_read_word_user+0x1a6>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp1==tmp3) && (tmp1==tmp4)) //134
     a8c:	82 15       	cp	r24, r2
     a8e:	93 05       	cpc	r25, r3
     a90:	09 f4       	brne	.+2      	; 0xa94 <eeprom_read_word_user+0x132>
     a92:	01 c1       	rjmp	.+514    	; 0xc96 <eeprom_read_word_user+0x334>
		if(tmp != tmp5)
		{
			eeprom_write_word_2(p5,tmp);
		}
	}
	else if((tmp1==tmp3) && (tmp1==tmp5)) //135
     a94:	eb 81       	ldd	r30, Y+3	; 0x03
     a96:	fc 81       	ldd	r31, Y+4	; 0x04
     a98:	e2 17       	cp	r30, r18
     a9a:	f3 07       	cpc	r31, r19
     a9c:	51 f5       	brne	.+84     	; 0xaf2 <eeprom_read_word_user+0x190>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     a9e:	1f b7       	in	r17, 0x3f	; 63
	cli();
     aa0:	f8 94       	cli
	wdt_reset();
     aa2:	a8 95       	wdr
	eeprom_busy_wait();
     aa4:	e1 99       	sbic	0x1c, 1	; 28
     aa6:	fe cf       	rjmp	.-4      	; 0xaa4 <eeprom_read_word_user+0x142>
	eeprom_write_word((uint16_t *)p, val);
     aa8:	6b 81       	ldd	r22, Y+3	; 0x03
     aaa:	7c 81       	ldd	r23, Y+4	; 0x04
     aac:	c2 01       	movw	r24, r4
     aae:	d6 d9       	rcall	.-3156   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     ab0:	e1 99       	sbic	0x1c, 1	; 28
     ab2:	fe cf       	rjmp	.-4      	; 0xab0 <eeprom_read_word_user+0x14e>
	SREG = m_sreg;
     ab4:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     ab6:	1f b7       	in	r17, 0x3f	; 63
	cli();
     ab8:	f8 94       	cli
	wdt_reset();
     aba:	a8 95       	wdr
	eeprom_busy_wait();
     abc:	e1 99       	sbic	0x1c, 1	; 28
     abe:	fe cf       	rjmp	.-4      	; 0xabc <eeprom_read_word_user+0x15a>
	eeprom_write_word((uint16_t *)p, val);
     ac0:	6b 81       	ldd	r22, Y+3	; 0x03
     ac2:	7c 81       	ldd	r23, Y+4	; 0x04
     ac4:	c5 01       	movw	r24, r10
     ac6:	ca d9       	rcall	.-3180   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     ac8:	e1 99       	sbic	0x1c, 1	; 28
     aca:	fe cf       	rjmp	.-4      	; 0xac8 <eeprom_read_word_user+0x166>
	SREG = m_sreg;
     acc:	1f bf       	out	0x3f, r17	; 63
     ace:	1c c0       	rjmp	.+56     	; 0xb08 <eeprom_read_word_user+0x1a6>
	tmp2 = eeprom_read_word_2(p2);
	tmp3 = eeprom_read_word_2(p3);
	tmp4 = eeprom_read_word_2(p4);
	tmp5 = eeprom_read_word_2(p5);
	//
	if((tmp1==tmp2) && (tmp1==tmp3)) //123
     ad0:	8c 15       	cp	r24, r12
     ad2:	9d 05       	cpc	r25, r13
     ad4:	09 f4       	brne	.+2      	; 0xad8 <eeprom_read_word_user+0x176>
     ad6:	7d c0       	rjmp	.+250    	; 0xbd2 <eeprom_read_word_user+0x270>
		if(tmp != tmp5)
		{
			eeprom_write_word_2(p5,tmp);
		}
	}
	else if((tmp1==tmp2) && (tmp1==tmp4)) //124
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	82 15       	cp	r24, r2
     ade:	93 05       	cpc	r25, r3
     ae0:	09 f4       	brne	.+2      	; 0xae4 <eeprom_read_word_user+0x182>
     ae2:	9d c0       	rjmp	.+314    	; 0xc1e <eeprom_read_word_user+0x2bc>
		if(tmp != tmp5)
		{
			eeprom_write_word_2(p5,tmp);
		}
	}
	else if((tmp1==tmp2) && (tmp1==tmp5)) //125
     ae4:	82 17       	cp	r24, r18
     ae6:	93 07       	cpc	r25, r19
     ae8:	09 f4       	brne	.+2      	; 0xaec <eeprom_read_word_user+0x18a>
     aea:	bc c0       	rjmp	.+376    	; 0xc64 <eeprom_read_word_user+0x302>
		if(tmp != tmp2)
		{
			eeprom_write_word_2(p2,tmp);
		}
	}
	else if((tmp2==tmp3) && (tmp2==tmp4)) //234
     aec:	ec 14       	cp	r14, r12
     aee:	fd 04       	cpc	r15, r13
     af0:	69 f1       	breq	.+90     	; 0xb4c <eeprom_read_word_user+0x1ea>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp2==tmp4) && (tmp2==tmp5)) //245
     af2:	e2 14       	cp	r14, r2
     af4:	f3 04       	cpc	r15, r3
     af6:	09 f4       	brne	.+2      	; 0xafa <eeprom_read_word_user+0x198>
     af8:	4e c0       	rjmp	.+156    	; 0xb96 <eeprom_read_word_user+0x234>
		if(tmp != tmp3)
		{
			eeprom_write_word_2(p3,tmp);
		}
	}
	else if((tmp3==tmp4) && (tmp3==tmp5)) //345
     afa:	c2 14       	cp	r12, r2
     afc:	d3 04       	cpc	r13, r3
     afe:	e9 f0       	breq	.+58     	; 0xb3a <eeprom_read_word_user+0x1d8>
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_user(const uint16_t *p1)
{
	unsigned short tmp,tmp1,tmp2,tmp3,tmp4,tmp5;
	//
	tmp = 0xff;
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	8b 83       	std	Y+3, r24	; 0x03
			eeprom_write_word_2(p2,tmp);
		}
	}
	//
	return tmp;
}
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	9c 81       	ldd	r25, Y+4	; 0x04
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	cf 90       	pop	r12
     b24:	bf 90       	pop	r11
     b26:	af 90       	pop	r10
     b28:	9f 90       	pop	r9
     b2a:	8f 90       	pop	r8
     b2c:	7f 90       	pop	r7
     b2e:	6f 90       	pop	r6
     b30:	5f 90       	pop	r5
     b32:	4f 90       	pop	r4
     b34:	3f 90       	pop	r3
     b36:	2f 90       	pop	r2
     b38:	08 95       	ret
		if(tmp != tmp3)
		{
			eeprom_write_word_2(p3,tmp);
		}
	}
	else if((tmp3==tmp4) && (tmp3==tmp5)) //345
     b3a:	c2 16       	cp	r12, r18
     b3c:	d3 06       	cpc	r13, r19
     b3e:	09 f4       	brne	.+2      	; 0xb42 <eeprom_read_word_user+0x1e0>
     b40:	f2 c0       	rjmp	.+484    	; 0xd26 <eeprom_read_word_user+0x3c4>
////////////////////////////////////////////////////////////////
unsigned short eeprom_read_word_user(const uint16_t *p1)
{
	unsigned short tmp,tmp1,tmp2,tmp3,tmp4,tmp5;
	//
	tmp = 0xff;
     b42:	ef ef       	ldi	r30, 0xFF	; 255
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	fc 83       	std	Y+4, r31	; 0x04
     b48:	eb 83       	std	Y+3, r30	; 0x03
     b4a:	de cf       	rjmp	.-68     	; 0xb08 <eeprom_read_word_user+0x1a6>
		if(tmp != tmp2)
		{
			eeprom_write_word_2(p2,tmp);
		}
	}
	else if((tmp2==tmp3) && (tmp2==tmp4)) //234
     b4c:	e2 14       	cp	r14, r2
     b4e:	f3 04       	cpc	r15, r3
     b50:	09 f4       	brne	.+2      	; 0xb54 <eeprom_read_word_user+0x1f2>
     b52:	c4 c0       	rjmp	.+392    	; 0xcdc <eeprom_read_word_user+0x37a>
		if(tmp != tmp5)
		{
			eeprom_write_word_2(p5,tmp);
		}
	}
	else if((tmp2==tmp3) && (tmp2==tmp5)) //235
     b54:	e2 16       	cp	r14, r18
     b56:	f3 06       	cpc	r15, r19
     b58:	99 f6       	brne	.-90     	; 0xb00 <eeprom_read_word_user+0x19e>
	{
		tmp = tmp2;
		if(tmp != tmp1)
     b5a:	eb 81       	ldd	r30, Y+3	; 0x03
     b5c:	fc 81       	ldd	r31, Y+4	; 0x04
     b5e:	ee 15       	cp	r30, r14
     b60:	ff 05       	cpc	r31, r15
     b62:	59 f0       	breq	.+22     	; 0xb7a <eeprom_read_word_user+0x218>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     b64:	df b6       	in	r13, 0x3f	; 63
	cli();
     b66:	f8 94       	cli
	wdt_reset();
     b68:	a8 95       	wdr
	eeprom_busy_wait();
     b6a:	e1 99       	sbic	0x1c, 1	; 28
     b6c:	fe cf       	rjmp	.-4      	; 0xb6a <eeprom_read_word_user+0x208>
	eeprom_write_word((uint16_t *)p, val);
     b6e:	b7 01       	movw	r22, r14
     b70:	c8 01       	movw	r24, r16
     b72:	74 d9       	rcall	.-3352   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     b74:	e1 99       	sbic	0x1c, 1	; 28
     b76:	fe cf       	rjmp	.-4      	; 0xb74 <eeprom_read_word_user+0x212>
	SREG = m_sreg;
     b78:	df be       	out	0x3f, r13	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     b7a:	1f b7       	in	r17, 0x3f	; 63
	cli();
     b7c:	f8 94       	cli
	wdt_reset();
     b7e:	a8 95       	wdr
	eeprom_busy_wait();
     b80:	e1 99       	sbic	0x1c, 1	; 28
     b82:	fe cf       	rjmp	.-4      	; 0xb80 <eeprom_read_word_user+0x21e>
	eeprom_write_word((uint16_t *)p, val);
     b84:	b7 01       	movw	r22, r14
     b86:	c5 01       	movw	r24, r10
     b88:	69 d9       	rcall	.-3374   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     b8a:	e1 99       	sbic	0x1c, 1	; 28
     b8c:	fe cf       	rjmp	.-4      	; 0xb8a <eeprom_read_word_user+0x228>
	SREG = m_sreg;
     b8e:	1f bf       	out	0x3f, r17	; 63
     b90:	fc 82       	std	Y+4, r15	; 0x04
     b92:	eb 82       	std	Y+3, r14	; 0x03
     b94:	b9 cf       	rjmp	.-142    	; 0xb08 <eeprom_read_word_user+0x1a6>
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
	}
	else if((tmp2==tmp4) && (tmp2==tmp5)) //245
     b96:	e2 16       	cp	r14, r18
     b98:	f3 06       	cpc	r15, r19
     b9a:	99 f6       	brne	.-90     	; 0xb42 <eeprom_read_word_user+0x1e0>
	{
		tmp = tmp2;
		if(tmp != tmp1)
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ba0:	8e 15       	cp	r24, r14
     ba2:	9f 05       	cpc	r25, r15
     ba4:	59 f0       	breq	.+22     	; 0xbbc <eeprom_read_word_user+0x25a>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     ba6:	df b6       	in	r13, 0x3f	; 63
	cli();
     ba8:	f8 94       	cli
	wdt_reset();
     baa:	a8 95       	wdr
	eeprom_busy_wait();
     bac:	e1 99       	sbic	0x1c, 1	; 28
     bae:	fe cf       	rjmp	.-4      	; 0xbac <eeprom_read_word_user+0x24a>
	eeprom_write_word((uint16_t *)p, val);
     bb0:	b7 01       	movw	r22, r14
     bb2:	c8 01       	movw	r24, r16
     bb4:	53 d9       	rcall	.-3418   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     bb6:	e1 99       	sbic	0x1c, 1	; 28
     bb8:	fe cf       	rjmp	.-4      	; 0xbb6 <eeprom_read_word_user+0x254>
	SREG = m_sreg;
     bba:	df be       	out	0x3f, r13	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     bbc:	1f b7       	in	r17, 0x3f	; 63
	cli();
     bbe:	f8 94       	cli
	wdt_reset();
     bc0:	a8 95       	wdr
	eeprom_busy_wait();
     bc2:	e1 99       	sbic	0x1c, 1	; 28
     bc4:	fe cf       	rjmp	.-4      	; 0xbc2 <eeprom_read_word_user+0x260>
	eeprom_write_word((uint16_t *)p, val);
     bc6:	b7 01       	movw	r22, r14
     bc8:	c3 01       	movw	r24, r6
     bca:	48 d9       	rcall	.-3440   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     bcc:	e1 99       	sbic	0x1c, 1	; 28
     bce:	fe cf       	rjmp	.-4      	; 0xbcc <eeprom_read_word_user+0x26a>
     bd0:	de cf       	rjmp	.-68     	; 0xb8e <eeprom_read_word_user+0x22c>
	tmp5 = eeprom_read_word_2(p5);
	//
	if((tmp1==tmp2) && (tmp1==tmp3)) //123
	{
		tmp = tmp1;
		if(tmp != tmp4)
     bd2:	82 15       	cp	r24, r2
     bd4:	93 05       	cpc	r25, r3
     bd6:	81 f0       	breq	.+32     	; 0xbf8 <eeprom_read_word_user+0x296>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     bd8:	1f b7       	in	r17, 0x3f	; 63
	cli();
     bda:	f8 94       	cli
	wdt_reset();
     bdc:	a8 95       	wdr
	eeprom_busy_wait();
     bde:	e1 99       	sbic	0x1c, 1	; 28
     be0:	fe cf       	rjmp	.-4      	; 0xbde <eeprom_read_word_user+0x27c>
	eeprom_write_word((uint16_t *)p, val);
     be2:	6b 81       	ldd	r22, Y+3	; 0x03
     be4:	7c 81       	ldd	r23, Y+4	; 0x04
     be6:	c5 01       	movw	r24, r10
     be8:	2a 83       	std	Y+2, r18	; 0x02
     bea:	39 83       	std	Y+1, r19	; 0x01
     bec:	37 d9       	rcall	.-3474   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
     bee:	39 81       	ldd	r19, Y+1	; 0x01
     bf0:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     bf2:	e1 99       	sbic	0x1c, 1	; 28
     bf4:	fe cf       	rjmp	.-4      	; 0xbf2 <eeprom_read_word_user+0x290>
	SREG = m_sreg;
     bf6:	1f bf       	out	0x3f, r17	; 63
		if(tmp != tmp4)
		{
			eeprom_write_word_2(p4,tmp);
		}
		//
		if(tmp != tmp5)
     bf8:	eb 81       	ldd	r30, Y+3	; 0x03
     bfa:	fc 81       	ldd	r31, Y+4	; 0x04
     bfc:	e2 17       	cp	r30, r18
     bfe:	f3 07       	cpc	r31, r19
     c00:	09 f4       	brne	.+2      	; 0xc04 <eeprom_read_word_user+0x2a2>
     c02:	82 cf       	rjmp	.-252    	; 0xb08 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c04:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c06:	f8 94       	cli
	wdt_reset();
     c08:	a8 95       	wdr
	eeprom_busy_wait();
     c0a:	e1 99       	sbic	0x1c, 1	; 28
     c0c:	fe cf       	rjmp	.-4      	; 0xc0a <eeprom_read_word_user+0x2a8>
	eeprom_write_word((uint16_t *)p, val);
     c0e:	6b 81       	ldd	r22, Y+3	; 0x03
     c10:	7c 81       	ldd	r23, Y+4	; 0x04
     c12:	c4 01       	movw	r24, r8
     c14:	23 d9       	rcall	.-3514   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     c16:	e1 99       	sbic	0x1c, 1	; 28
     c18:	fe cf       	rjmp	.-4      	; 0xc16 <eeprom_read_word_user+0x2b4>
	SREG = m_sreg;
     c1a:	1f bf       	out	0x3f, r17	; 63
     c1c:	75 cf       	rjmp	.-278    	; 0xb08 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c1e:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c20:	f8 94       	cli
	wdt_reset();
     c22:	a8 95       	wdr
	eeprom_busy_wait();
     c24:	e1 99       	sbic	0x1c, 1	; 28
     c26:	fe cf       	rjmp	.-4      	; 0xc24 <eeprom_read_word_user+0x2c2>
	eeprom_write_word((uint16_t *)p, val);
     c28:	6b 81       	ldd	r22, Y+3	; 0x03
     c2a:	7c 81       	ldd	r23, Y+4	; 0x04
     c2c:	c3 01       	movw	r24, r6
     c2e:	2a 83       	std	Y+2, r18	; 0x02
     c30:	39 83       	std	Y+1, r19	; 0x01
     c32:	14 d9       	rcall	.-3544   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
     c34:	39 81       	ldd	r19, Y+1	; 0x01
     c36:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     c38:	e1 99       	sbic	0x1c, 1	; 28
     c3a:	fe cf       	rjmp	.-4      	; 0xc38 <eeprom_read_word_user+0x2d6>
	SREG = m_sreg;
     c3c:	1f bf       	out	0x3f, r17	; 63
		if(tmp != tmp3)
		{
			eeprom_write_word_2(p3,tmp);
		}
		//
		if(tmp != tmp5)
     c3e:	eb 81       	ldd	r30, Y+3	; 0x03
     c40:	fc 81       	ldd	r31, Y+4	; 0x04
     c42:	e2 17       	cp	r30, r18
     c44:	f3 07       	cpc	r31, r19
     c46:	09 f4       	brne	.+2      	; 0xc4a <eeprom_read_word_user+0x2e8>
     c48:	5f cf       	rjmp	.-322    	; 0xb08 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c4a:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c4c:	f8 94       	cli
	wdt_reset();
     c4e:	a8 95       	wdr
	eeprom_busy_wait();
     c50:	e1 99       	sbic	0x1c, 1	; 28
     c52:	fe cf       	rjmp	.-4      	; 0xc50 <eeprom_read_word_user+0x2ee>
	eeprom_write_word((uint16_t *)p, val);
     c54:	6b 81       	ldd	r22, Y+3	; 0x03
     c56:	7c 81       	ldd	r23, Y+4	; 0x04
     c58:	c4 01       	movw	r24, r8
     c5a:	00 d9       	rcall	.-3584   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     c5c:	e1 99       	sbic	0x1c, 1	; 28
     c5e:	fe cf       	rjmp	.-4      	; 0xc5c <eeprom_read_word_user+0x2fa>
	SREG = m_sreg;
     c60:	1f bf       	out	0x3f, r17	; 63
     c62:	52 cf       	rjmp	.-348    	; 0xb08 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c64:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c66:	f8 94       	cli
	wdt_reset();
     c68:	a8 95       	wdr
	eeprom_busy_wait();
     c6a:	e1 99       	sbic	0x1c, 1	; 28
     c6c:	fe cf       	rjmp	.-4      	; 0xc6a <eeprom_read_word_user+0x308>
	eeprom_write_word((uint16_t *)p, val);
     c6e:	6b 81       	ldd	r22, Y+3	; 0x03
     c70:	7c 81       	ldd	r23, Y+4	; 0x04
     c72:	c3 01       	movw	r24, r6
     c74:	f3 d8       	rcall	.-3610   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     c76:	e1 99       	sbic	0x1c, 1	; 28
     c78:	fe cf       	rjmp	.-4      	; 0xc76 <eeprom_read_word_user+0x314>
	SREG = m_sreg;
     c7a:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c7c:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c7e:	f8 94       	cli
	wdt_reset();
     c80:	a8 95       	wdr
	eeprom_busy_wait();
     c82:	e1 99       	sbic	0x1c, 1	; 28
     c84:	fe cf       	rjmp	.-4      	; 0xc82 <eeprom_read_word_user+0x320>
	eeprom_write_word((uint16_t *)p, val);
     c86:	6b 81       	ldd	r22, Y+3	; 0x03
     c88:	7c 81       	ldd	r23, Y+4	; 0x04
     c8a:	c5 01       	movw	r24, r10
     c8c:	e7 d8       	rcall	.-3634   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     c8e:	e1 99       	sbic	0x1c, 1	; 28
     c90:	fe cf       	rjmp	.-4      	; 0xc8e <eeprom_read_word_user+0x32c>
	SREG = m_sreg;
     c92:	1f bf       	out	0x3f, r17	; 63
     c94:	39 cf       	rjmp	.-398    	; 0xb08 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     c96:	1f b7       	in	r17, 0x3f	; 63
	cli();
     c98:	f8 94       	cli
	wdt_reset();
     c9a:	a8 95       	wdr
	eeprom_busy_wait();
     c9c:	e1 99       	sbic	0x1c, 1	; 28
     c9e:	fe cf       	rjmp	.-4      	; 0xc9c <eeprom_read_word_user+0x33a>
	eeprom_write_word((uint16_t *)p, val);
     ca0:	6b 81       	ldd	r22, Y+3	; 0x03
     ca2:	7c 81       	ldd	r23, Y+4	; 0x04
     ca4:	c2 01       	movw	r24, r4
     ca6:	2a 83       	std	Y+2, r18	; 0x02
     ca8:	39 83       	std	Y+1, r19	; 0x01
     caa:	d8 d8       	rcall	.-3664   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
     cac:	39 81       	ldd	r19, Y+1	; 0x01
     cae:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     cb0:	e1 99       	sbic	0x1c, 1	; 28
     cb2:	fe cf       	rjmp	.-4      	; 0xcb0 <eeprom_read_word_user+0x34e>
	SREG = m_sreg;
     cb4:	1f bf       	out	0x3f, r17	; 63
		if(tmp != tmp2)
		{
			eeprom_write_word_2(p2,tmp);
		}
		//
		if(tmp != tmp5)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9c 81       	ldd	r25, Y+4	; 0x04
     cba:	82 17       	cp	r24, r18
     cbc:	93 07       	cpc	r25, r19
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <eeprom_read_word_user+0x360>
     cc0:	23 cf       	rjmp	.-442    	; 0xb08 <eeprom_read_word_user+0x1a6>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     cc2:	1f b7       	in	r17, 0x3f	; 63
	cli();
     cc4:	f8 94       	cli
	wdt_reset();
     cc6:	a8 95       	wdr
	eeprom_busy_wait();
     cc8:	e1 99       	sbic	0x1c, 1	; 28
     cca:	fe cf       	rjmp	.-4      	; 0xcc8 <eeprom_read_word_user+0x366>
	eeprom_write_word((uint16_t *)p, val);
     ccc:	6b 81       	ldd	r22, Y+3	; 0x03
     cce:	7c 81       	ldd	r23, Y+4	; 0x04
     cd0:	c4 01       	movw	r24, r8
     cd2:	c4 d8       	rcall	.-3704   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     cd4:	e1 99       	sbic	0x1c, 1	; 28
     cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <eeprom_read_word_user+0x372>
	SREG = m_sreg;
     cd8:	1f bf       	out	0x3f, r17	; 63
     cda:	16 cf       	rjmp	.-468    	; 0xb08 <eeprom_read_word_user+0x1a6>
		}
	}
	else if((tmp2==tmp3) && (tmp2==tmp4)) //234
	{
		tmp = tmp2;
		if(tmp != tmp1)
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	8e 15       	cp	r24, r14
     ce2:	9f 05       	cpc	r25, r15
     ce4:	79 f0       	breq	.+30     	; 0xd04 <eeprom_read_word_user+0x3a2>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     ce6:	df b6       	in	r13, 0x3f	; 63
	cli();
     ce8:	f8 94       	cli
	wdt_reset();
     cea:	a8 95       	wdr
	eeprom_busy_wait();
     cec:	e1 99       	sbic	0x1c, 1	; 28
     cee:	fe cf       	rjmp	.-4      	; 0xcec <eeprom_read_word_user+0x38a>
	eeprom_write_word((uint16_t *)p, val);
     cf0:	b7 01       	movw	r22, r14
     cf2:	c8 01       	movw	r24, r16
     cf4:	2a 83       	std	Y+2, r18	; 0x02
     cf6:	39 83       	std	Y+1, r19	; 0x01
     cf8:	b1 d8       	rcall	.-3742   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
     cfa:	39 81       	ldd	r19, Y+1	; 0x01
     cfc:	2a 81       	ldd	r18, Y+2	; 0x02
	eeprom_busy_wait();
     cfe:	e1 99       	sbic	0x1c, 1	; 28
     d00:	fe cf       	rjmp	.-4      	; 0xcfe <eeprom_read_word_user+0x39c>
	SREG = m_sreg;
     d02:	df be       	out	0x3f, r13	; 63
		if(tmp != tmp1)
		{
			eeprom_write_word_2(p1,tmp);
		}
		//
		if(tmp != tmp5)
     d04:	e2 16       	cp	r14, r18
     d06:	f3 06       	cpc	r15, r19
     d08:	59 f0       	breq	.+22     	; 0xd20 <eeprom_read_word_user+0x3be>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d0a:	1f b7       	in	r17, 0x3f	; 63
	cli();
     d0c:	f8 94       	cli
	wdt_reset();
     d0e:	a8 95       	wdr
	eeprom_busy_wait();
     d10:	e1 99       	sbic	0x1c, 1	; 28
     d12:	fe cf       	rjmp	.-4      	; 0xd10 <eeprom_read_word_user+0x3ae>
	eeprom_write_word((uint16_t *)p, val);
     d14:	b7 01       	movw	r22, r14
     d16:	c4 01       	movw	r24, r8
     d18:	a1 d8       	rcall	.-3774   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     d1a:	e1 99       	sbic	0x1c, 1	; 28
     d1c:	fe cf       	rjmp	.-4      	; 0xd1a <eeprom_read_word_user+0x3b8>
     d1e:	37 cf       	rjmp	.-402    	; 0xb8e <eeprom_read_word_user+0x22c>
     d20:	fc 82       	std	Y+4, r15	; 0x04
     d22:	eb 82       	std	Y+3, r14	; 0x03
     d24:	f1 ce       	rjmp	.-542    	; 0xb08 <eeprom_read_word_user+0x1a6>
		}
	}
	else if((tmp3==tmp4) && (tmp3==tmp5)) //345
	{
		tmp = tmp3;
		if(tmp != tmp1)
     d26:	eb 81       	ldd	r30, Y+3	; 0x03
     d28:	fc 81       	ldd	r31, Y+4	; 0x04
     d2a:	ec 15       	cp	r30, r12
     d2c:	fd 05       	cpc	r31, r13
     d2e:	59 f0       	breq	.+22     	; 0xd46 <eeprom_read_word_user+0x3e4>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d30:	bf b6       	in	r11, 0x3f	; 63
	cli();
     d32:	f8 94       	cli
	wdt_reset();
     d34:	a8 95       	wdr
	eeprom_busy_wait();
     d36:	e1 99       	sbic	0x1c, 1	; 28
     d38:	fe cf       	rjmp	.-4      	; 0xd36 <eeprom_read_word_user+0x3d4>
	eeprom_write_word((uint16_t *)p, val);
     d3a:	b6 01       	movw	r22, r12
     d3c:	c8 01       	movw	r24, r16
     d3e:	8e d8       	rcall	.-3812   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     d40:	e1 99       	sbic	0x1c, 1	; 28
     d42:	fe cf       	rjmp	.-4      	; 0xd40 <eeprom_read_word_user+0x3de>
	SREG = m_sreg;
     d44:	bf be       	out	0x3f, r11	; 63
		if(tmp != tmp1)
		{
			eeprom_write_word_2(p1,tmp);
		}
		//
		if(tmp != tmp2)
     d46:	ec 14       	cp	r14, r12
     d48:	fd 04       	cpc	r15, r13
     d4a:	51 f3       	breq	.-44     	; 0xd20 <eeprom_read_word_user+0x3be>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d4c:	1f b7       	in	r17, 0x3f	; 63
	cli();
     d4e:	f8 94       	cli
	wdt_reset();
     d50:	a8 95       	wdr
	eeprom_busy_wait();
     d52:	e1 99       	sbic	0x1c, 1	; 28
     d54:	fe cf       	rjmp	.-4      	; 0xd52 <eeprom_read_word_user+0x3f0>
	eeprom_write_word((uint16_t *)p, val);
     d56:	b6 01       	movw	r22, r12
     d58:	c2 01       	movw	r24, r4
     d5a:	80 d8       	rcall	.-3840   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     d5c:	e1 99       	sbic	0x1c, 1	; 28
     d5e:	fe cf       	rjmp	.-4      	; 0xd5c <eeprom_read_word_user+0x3fa>
	SREG = m_sreg;
     d60:	1f bf       	out	0x3f, r17	; 63
     d62:	dc 82       	std	Y+4, r13	; 0x04
     d64:	cb 82       	std	Y+3, r12	; 0x03
     d66:	d0 ce       	rjmp	.-608    	; 0xb08 <eeprom_read_word_user+0x1a6>

00000d68 <eeprom_write_word_user>:
	//
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	8c 01       	movw	r16, r24
     d74:	eb 01       	movw	r28, r22
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d76:	ff b6       	in	r15, 0x3f	; 63
	cli();
     d78:	f8 94       	cli
	wdt_reset();
     d7a:	a8 95       	wdr
	eeprom_busy_wait();
     d7c:	e1 99       	sbic	0x1c, 1	; 28
     d7e:	fe cf       	rjmp	.-4      	; 0xd7c <eeprom_write_word_user+0x14>
	eeprom_write_word((uint16_t *)p, val);
     d80:	be 01       	movw	r22, r28
     d82:	c8 01       	movw	r24, r16
     d84:	6b d8       	rcall	.-3882   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     d86:	e1 99       	sbic	0x1c, 1	; 28
     d88:	fe cf       	rjmp	.-4      	; 0xd86 <eeprom_write_word_user+0x1e>
	SREG = m_sreg;
     d8a:	ff be       	out	0x3f, r15	; 63
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
     d8c:	c8 01       	movw	r24, r16
     d8e:	8e 59       	subi	r24, 0x9E	; 158
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     d92:	ff b6       	in	r15, 0x3f	; 63
	cli();
     d94:	f8 94       	cli
	wdt_reset();
     d96:	a8 95       	wdr
	eeprom_busy_wait();
     d98:	e1 99       	sbic	0x1c, 1	; 28
     d9a:	fe cf       	rjmp	.-4      	; 0xd98 <eeprom_write_word_user+0x30>
	eeprom_write_word((uint16_t *)p, val);
     d9c:	be 01       	movw	r22, r28
     d9e:	5e d8       	rcall	.-3908   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     da0:	e1 99       	sbic	0x1c, 1	; 28
     da2:	fe cf       	rjmp	.-4      	; 0xda0 <eeprom_write_word_user+0x38>
	SREG = m_sreg;
     da4:	ff be       	out	0x3f, r15	; 63
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
     da6:	c8 01       	movw	r24, r16
     da8:	8c 53       	subi	r24, 0x3C	; 60
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     dac:	ff b6       	in	r15, 0x3f	; 63
	cli();
     dae:	f8 94       	cli
	wdt_reset();
     db0:	a8 95       	wdr
	eeprom_busy_wait();
     db2:	e1 99       	sbic	0x1c, 1	; 28
     db4:	fe cf       	rjmp	.-4      	; 0xdb2 <eeprom_write_word_user+0x4a>
	eeprom_write_word((uint16_t *)p, val);
     db6:	be 01       	movw	r22, r28
     db8:	51 d8       	rcall	.-3934   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     dba:	e1 99       	sbic	0x1c, 1	; 28
     dbc:	fe cf       	rjmp	.-4      	; 0xdba <eeprom_write_word_user+0x52>
	SREG = m_sreg;
     dbe:	ff be       	out	0x3f, r15	; 63
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+3*EEPROM_DATA_WORD_SIZE),val);
     dc0:	c8 01       	movw	r24, r16
     dc2:	8a 5d       	subi	r24, 0xDA	; 218
     dc4:	9e 4f       	sbci	r25, 0xFE	; 254
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     dc6:	ff b6       	in	r15, 0x3f	; 63
	cli();
     dc8:	f8 94       	cli
	wdt_reset();
     dca:	a8 95       	wdr
	eeprom_busy_wait();
     dcc:	e1 99       	sbic	0x1c, 1	; 28
     dce:	fe cf       	rjmp	.-4      	; 0xdcc <eeprom_write_word_user+0x64>
	eeprom_write_word((uint16_t *)p, val);
     dd0:	be 01       	movw	r22, r28
     dd2:	44 d8       	rcall	.-3960   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     dd4:	e1 99       	sbic	0x1c, 1	; 28
     dd6:	fe cf       	rjmp	.-4      	; 0xdd4 <eeprom_write_word_user+0x6c>
	SREG = m_sreg;
     dd8:	ff be       	out	0x3f, r15	; 63
{
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+3*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+4*EEPROM_DATA_WORD_SIZE),val);
     dda:	c8 01       	movw	r24, r16
     ddc:	88 57       	subi	r24, 0x78	; 120
     dde:	9e 4f       	sbci	r25, 0xFE	; 254
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     de0:	1f b7       	in	r17, 0x3f	; 63
	cli();
     de2:	f8 94       	cli
	wdt_reset();
     de4:	a8 95       	wdr
	eeprom_busy_wait();
     de6:	e1 99       	sbic	0x1c, 1	; 28
     de8:	fe cf       	rjmp	.-4      	; 0xde6 <eeprom_write_word_user+0x7e>
	eeprom_write_word((uint16_t *)p, val);
     dea:	be 01       	movw	r22, r28
     dec:	37 d8       	rcall	.-3986   	; 0xfffffe5c <__eeprom_end+0xff7efbf2>
	eeprom_busy_wait();
     dee:	e1 99       	sbic	0x1c, 1	; 28
     df0:	fe cf       	rjmp	.-4      	; 0xdee <eeprom_write_word_user+0x86>
	SREG = m_sreg;
     df2:	1f bf       	out	0x3f, r17	; 63
	eeprom_write_word_2((uint16_t *)p,val);
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+3*EEPROM_DATA_WORD_SIZE),val);
	eeprom_write_word_2((uint16_t *)(p+4*EEPROM_DATA_WORD_SIZE),val);
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	08 95       	ret

00000e00 <set_default_para>:
////////////////////////////////////////////////////////////////
void set_default_para(void)
{
	//执行恢复出厂默认参数操作
	//
	cli();
     e00:	f8 94       	cli
	//
	//脉冲
	eeprom_write_word_user((uint16_t *)&m_para[0].e_mh,PULSE_TOP);
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	72 e3       	ldi	r23, 0x32	; 50
     e06:	80 ec       	ldi	r24, 0xC0	; 192
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	ae df       	rcall	.-164    	; 0xd68 <eeprom_write_word_user>
	eeprom_write_word_user((uint16_t *)&m_para[0].e_ml,PULSE_BOTTOM);
     e0c:	64 e5       	ldi	r22, 0x54	; 84
     e0e:	78 e0       	ldi	r23, 0x08	; 8
     e10:	82 ec       	ldi	r24, 0xC2	; 194
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	a9 df       	rcall	.-174    	; 0xd68 <eeprom_write_word_user>

	eeprom_write_word_user((uint16_t *)&m_para[0].smoothingDate,PARA_SETED_SMOOTHING);
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	86 ec       	ldi	r24, 0xC6	; 198
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	a4 df       	rcall	.-184    	; 0xd68 <eeprom_write_word_user>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_user(uint16_t *p,unsigned short val)
{
	eeprom_write_word_2((uint16_t *)p,val);
     e20:	66 e0       	ldi	r22, 0x06	; 6
     e22:	79 e1       	ldi	r23, 0x19	; 25
     e24:	84 ec       	ldi	r24, 0xC4	; 196
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	90 dd       	rcall	.-1248   	; 0x94a <eeprom_write_word_2>
	eeprom_write_word_2((uint16_t *)(p+EEPROM_DATA_WORD_SIZE),val);
     e2a:	66 e0       	ldi	r22, 0x06	; 6
     e2c:	79 e1       	ldi	r23, 0x19	; 25
     e2e:	86 e2       	ldi	r24, 0x26	; 38
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	8b dd       	rcall	.-1258   	; 0x94a <eeprom_write_word_2>
	eeprom_write_word_2((uint16_t *)(p+2*EEPROM_DATA_WORD_SIZE),val);
     e34:	66 e0       	ldi	r22, 0x06	; 6
     e36:	79 e1       	ldi	r23, 0x19	; 25
     e38:	88 e8       	ldi	r24, 0x88	; 136
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	86 dd       	rcall	.-1268   	; 0x94a <eeprom_write_word_2>
	eeprom_write_word_2((uint16_t *)(p+3*EEPROM_DATA_WORD_SIZE),val);
     e3e:	66 e0       	ldi	r22, 0x06	; 6
     e40:	79 e1       	ldi	r23, 0x19	; 25
     e42:	8a ee       	ldi	r24, 0xEA	; 234
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	81 dd       	rcall	.-1278   	; 0x94a <eeprom_write_word_2>
	eeprom_write_word_2((uint16_t *)(p+4*EEPROM_DATA_WORD_SIZE),val);
     e48:	66 e0       	ldi	r22, 0x06	; 6
     e4a:	79 e1       	ldi	r23, 0x19	; 25
     e4c:	8c e4       	ldi	r24, 0x4C	; 76
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	7c dd       	rcall	.-1288   	; 0x94a <eeprom_write_word_2>
     e52:	c5 e0       	ldi	r28, 0x05	; 5
     e54:	d0 e0       	ldi	r29, 0x00	; 0
     e56:	8f e3       	ldi	r24, 0x3F	; 63
     e58:	9c e9       	ldi	r25, 0x9C	; 156
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <set_default_para+0x5a>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <set_default_para+0x60>
     e60:	00 00       	nop
	{
		int i;
		for(i=5; i>0; i--)
		{
			_delay_ms(10);
			if(PARA_SETED_FLAG == eeprom_read_word_user((const uint16_t *)&m_para[0].e_para_seted_flag))
     e62:	84 ec       	ldi	r24, 0xC4	; 196
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	7d dd       	rcall	.-1286   	; 0x962 <eeprom_read_word_user>
     e68:	86 30       	cpi	r24, 0x06	; 6
     e6a:	99 41       	sbci	r25, 0x19	; 25
     e6c:	09 f4       	brne	.+2      	; 0xe70 <set_default_para+0x70>
     e6e:	4e c0       	rjmp	.+156    	; 0xf0c <set_default_para+0x10c>
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	99 ef       	ldi	r25, 0xF9	; 249
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	81 50       	subi	r24, 0x01	; 1
     e78:	90 40       	sbci	r25, 0x00	; 0
     e7a:	20 40       	sbci	r18, 0x00	; 0
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <set_default_para+0x76>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <set_default_para+0x80>
     e80:	00 00       	nop
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     e82:	1f b7       	in	r17, 0x3f	; 63
	cli();
     e84:	f8 94       	cli
	wdt_reset();
     e86:	a8 95       	wdr
	eeprom_busy_wait();
     e88:	e1 99       	sbic	0x1c, 1	; 28
     e8a:	fe cf       	rjmp	.-4      	; 0xe88 <set_default_para+0x88>
	eeprom_write_word((uint16_t *)p, val);
     e8c:	66 e0       	ldi	r22, 0x06	; 6
     e8e:	79 e1       	ldi	r23, 0x19	; 25
     e90:	84 ec       	ldi	r24, 0xC4	; 196
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	e3 d7       	rcall	.+4038   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     e96:	e1 99       	sbic	0x1c, 1	; 28
     e98:	fe cf       	rjmp	.-4      	; 0xe96 <set_default_para+0x96>
	SREG = m_sreg;
     e9a:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     e9c:	1f b7       	in	r17, 0x3f	; 63
	cli();
     e9e:	f8 94       	cli
	wdt_reset();
     ea0:	a8 95       	wdr
	eeprom_busy_wait();
     ea2:	e1 99       	sbic	0x1c, 1	; 28
     ea4:	fe cf       	rjmp	.-4      	; 0xea2 <set_default_para+0xa2>
	eeprom_write_word((uint16_t *)p, val);
     ea6:	66 e0       	ldi	r22, 0x06	; 6
     ea8:	79 e1       	ldi	r23, 0x19	; 25
     eaa:	86 e2       	ldi	r24, 0x26	; 38
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	d6 d7       	rcall	.+4012   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     eb0:	e1 99       	sbic	0x1c, 1	; 28
     eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <set_default_para+0xb0>
	SREG = m_sreg;
     eb4:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     eb6:	1f b7       	in	r17, 0x3f	; 63
	cli();
     eb8:	f8 94       	cli
	wdt_reset();
     eba:	a8 95       	wdr
	eeprom_busy_wait();
     ebc:	e1 99       	sbic	0x1c, 1	; 28
     ebe:	fe cf       	rjmp	.-4      	; 0xebc <set_default_para+0xbc>
	eeprom_write_word((uint16_t *)p, val);
     ec0:	66 e0       	ldi	r22, 0x06	; 6
     ec2:	79 e1       	ldi	r23, 0x19	; 25
     ec4:	88 e8       	ldi	r24, 0x88	; 136
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	c9 d7       	rcall	.+3986   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     eca:	e1 99       	sbic	0x1c, 1	; 28
     ecc:	fe cf       	rjmp	.-4      	; 0xeca <set_default_para+0xca>
	SREG = m_sreg;
     ece:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     ed0:	1f b7       	in	r17, 0x3f	; 63
	cli();
     ed2:	f8 94       	cli
	wdt_reset();
     ed4:	a8 95       	wdr
	eeprom_busy_wait();
     ed6:	e1 99       	sbic	0x1c, 1	; 28
     ed8:	fe cf       	rjmp	.-4      	; 0xed6 <set_default_para+0xd6>
	eeprom_write_word((uint16_t *)p, val);
     eda:	66 e0       	ldi	r22, 0x06	; 6
     edc:	79 e1       	ldi	r23, 0x19	; 25
     ede:	8a ee       	ldi	r24, 0xEA	; 234
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	bc d7       	rcall	.+3960   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     ee4:	e1 99       	sbic	0x1c, 1	; 28
     ee6:	fe cf       	rjmp	.-4      	; 0xee4 <set_default_para+0xe4>
	SREG = m_sreg;
     ee8:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     eea:	1f b7       	in	r17, 0x3f	; 63
	cli();
     eec:	f8 94       	cli
	wdt_reset();
     eee:	a8 95       	wdr
	eeprom_busy_wait();
     ef0:	e1 99       	sbic	0x1c, 1	; 28
     ef2:	fe cf       	rjmp	.-4      	; 0xef0 <set_default_para+0xf0>
	eeprom_write_word((uint16_t *)p, val);
     ef4:	66 e0       	ldi	r22, 0x06	; 6
     ef6:	79 e1       	ldi	r23, 0x19	; 25
     ef8:	8c e4       	ldi	r24, 0x4C	; 76
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	af d7       	rcall	.+3934   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     efe:	e1 99       	sbic	0x1c, 1	; 28
     f00:	fe cf       	rjmp	.-4      	; 0xefe <set_default_para+0xfe>
	SREG = m_sreg;
     f02:	1f bf       	out	0x3f, r17	; 63
     f04:	21 97       	sbiw	r28, 0x01	; 1
	//参数设置标志
	eeprom_write_word_user((uint16_t *)&m_para[0].e_para_seted_flag,PARA_SETED_FLAG);
	#if 1
	{
		int i;
		for(i=5; i>0; i--)
     f06:	20 97       	sbiw	r28, 0x00	; 0
     f08:	09 f0       	breq	.+2      	; 0xf0c <set_default_para+0x10c>
     f0a:	a5 cf       	rjmp	.-182    	; 0xe56 <set_default_para+0x56>
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
     f0e:	91 ee       	ldi	r25, 0xE1	; 225
     f10:	24 e0       	ldi	r18, 0x04	; 4
     f12:	81 50       	subi	r24, 0x01	; 1
     f14:	90 40       	sbci	r25, 0x00	; 0
     f16:	20 40       	sbci	r18, 0x00	; 0
     f18:	e1 f7       	brne	.-8      	; 0xf12 <set_default_para+0x112>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <set_default_para+0x11c>
     f1c:	00 00       	nop
		}	
	}
	#endif
	//
	_delay_ms(100);
	wdt_reset_mcu();//重启
     f1e:	f6 dc       	rcall	.-1556   	; 0x90c <wdt_reset_mcu>

00000f20 <read_para>:
    UDR = uart_tx_buf[0];
    uart_tx_addr = 1;
}
////////////////////////////////////////////////////////////////
void read_para()
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	c5 e0       	ldi	r28, 0x05	; 5
     f26:	d0 e0       	ldi	r29, 0x00	; 0
	#if 1
	{
		int i;
		for(i=5; i>0; i--)
		{
			if(PARA_SETED_FLAG == eeprom_read_word_user((const uint16_t *)&m_para[0].e_para_seted_flag))
     f28:	84 ec       	ldi	r24, 0xC4	; 196
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	1a dd       	rcall	.-1484   	; 0x962 <eeprom_read_word_user>
     f2e:	86 30       	cpi	r24, 0x06	; 6
     f30:	99 41       	sbci	r25, 0x19	; 25
     f32:	69 f0       	breq	.+26     	; 0xf4e <read_para+0x2e>
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	99 ef       	ldi	r25, 0xF9	; 249
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	81 50       	subi	r24, 0x01	; 1
     f3c:	90 40       	sbci	r25, 0x00	; 0
     f3e:	20 40       	sbci	r18, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <read_para+0x1a>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <read_para+0x24>
     f44:	00 00       	nop
     f46:	21 97       	sbiw	r28, 0x01	; 1
void read_para()
{
	#if 1
	{
		int i;
		for(i=5; i>0; i--)
     f48:	20 97       	sbiw	r28, 0x00	; 0
     f4a:	71 f7       	brne	.-36     	; 0xf28 <read_para+0x8>
			}
		}
		if(0 == i)
		{
			//如果标志不正常，设置默认参数
			set_default_para();
     f4c:	59 df       	rcall	.-334    	; 0xe00 <set_default_para>
		}		
	}
	#endif
	//
	//版本号
	if(version_h!=eeprom_read_word_user((const uint16_t *)(&m_para[0].e_version_h)))
     f4e:	8c eb       	ldi	r24, 0xBC	; 188
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	07 dd       	rcall	.-1522   	; 0x962 <eeprom_read_word_user>
     f54:	89 31       	cpi	r24, 0x19	; 25
     f56:	96 40       	sbci	r25, 0x06	; 6
     f58:	09 f4       	brne	.+2      	; 0xf5c <read_para+0x3c>
     f5a:	41 c0       	rjmp	.+130    	; 0xfde <read_para+0xbe>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     f5c:	cf b7       	in	r28, 0x3f	; 63
	cli();
     f5e:	f8 94       	cli
	wdt_reset();
     f60:	a8 95       	wdr
	eeprom_busy_wait();
     f62:	e1 99       	sbic	0x1c, 1	; 28
     f64:	fe cf       	rjmp	.-4      	; 0xf62 <read_para+0x42>
	eeprom_write_word((uint16_t *)p, val);
     f66:	69 e1       	ldi	r22, 0x19	; 25
     f68:	76 e0       	ldi	r23, 0x06	; 6
     f6a:	8c eb       	ldi	r24, 0xBC	; 188
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	76 d7       	rcall	.+3820   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     f70:	e1 99       	sbic	0x1c, 1	; 28
     f72:	fe cf       	rjmp	.-4      	; 0xf70 <read_para+0x50>
	SREG = m_sreg;
     f74:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     f76:	cf b7       	in	r28, 0x3f	; 63
	cli();
     f78:	f8 94       	cli
	wdt_reset();
     f7a:	a8 95       	wdr
	eeprom_busy_wait();
     f7c:	e1 99       	sbic	0x1c, 1	; 28
     f7e:	fe cf       	rjmp	.-4      	; 0xf7c <read_para+0x5c>
	eeprom_write_word((uint16_t *)p, val);
     f80:	69 e1       	ldi	r22, 0x19	; 25
     f82:	76 e0       	ldi	r23, 0x06	; 6
     f84:	8e e1       	ldi	r24, 0x1E	; 30
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	69 d7       	rcall	.+3794   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     f8a:	e1 99       	sbic	0x1c, 1	; 28
     f8c:	fe cf       	rjmp	.-4      	; 0xf8a <read_para+0x6a>
	SREG = m_sreg;
     f8e:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     f90:	cf b7       	in	r28, 0x3f	; 63
	cli();
     f92:	f8 94       	cli
	wdt_reset();
     f94:	a8 95       	wdr
	eeprom_busy_wait();
     f96:	e1 99       	sbic	0x1c, 1	; 28
     f98:	fe cf       	rjmp	.-4      	; 0xf96 <read_para+0x76>
	eeprom_write_word((uint16_t *)p, val);
     f9a:	69 e1       	ldi	r22, 0x19	; 25
     f9c:	76 e0       	ldi	r23, 0x06	; 6
     f9e:	80 e8       	ldi	r24, 0x80	; 128
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	5c d7       	rcall	.+3768   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     fa4:	e1 99       	sbic	0x1c, 1	; 28
     fa6:	fe cf       	rjmp	.-4      	; 0xfa4 <read_para+0x84>
	SREG = m_sreg;
     fa8:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     faa:	cf b7       	in	r28, 0x3f	; 63
	cli();
     fac:	f8 94       	cli
	wdt_reset();
     fae:	a8 95       	wdr
	eeprom_busy_wait();
     fb0:	e1 99       	sbic	0x1c, 1	; 28
     fb2:	fe cf       	rjmp	.-4      	; 0xfb0 <read_para+0x90>
	eeprom_write_word((uint16_t *)p, val);
     fb4:	69 e1       	ldi	r22, 0x19	; 25
     fb6:	76 e0       	ldi	r23, 0x06	; 6
     fb8:	82 ee       	ldi	r24, 0xE2	; 226
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	4f d7       	rcall	.+3742   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     fbe:	e1 99       	sbic	0x1c, 1	; 28
     fc0:	fe cf       	rjmp	.-4      	; 0xfbe <read_para+0x9e>
	SREG = m_sreg;
     fc2:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     fc4:	cf b7       	in	r28, 0x3f	; 63
	cli();
     fc6:	f8 94       	cli
	wdt_reset();
     fc8:	a8 95       	wdr
	eeprom_busy_wait();
     fca:	e1 99       	sbic	0x1c, 1	; 28
     fcc:	fe cf       	rjmp	.-4      	; 0xfca <read_para+0xaa>
	eeprom_write_word((uint16_t *)p, val);
     fce:	69 e1       	ldi	r22, 0x19	; 25
     fd0:	76 e0       	ldi	r23, 0x06	; 6
     fd2:	84 e4       	ldi	r24, 0x44	; 68
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	42 d7       	rcall	.+3716   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
     fd8:	e1 99       	sbic	0x1c, 1	; 28
     fda:	fe cf       	rjmp	.-4      	; 0xfd8 <read_para+0xb8>
	SREG = m_sreg;
     fdc:	cf bf       	out	0x3f, r28	; 63
	//版本号
	if(version_h!=eeprom_read_word_user((const uint16_t *)(&m_para[0].e_version_h)))
	{
		eeprom_write_word_user((uint16_t *)(&m_para[0].e_version_h),version_h);
	}
	if(version_l!=eeprom_read_word_user((const uint16_t *)(&m_para[0].e_version_l)))
     fde:	8e eb       	ldi	r24, 0xBE	; 190
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	bf dc       	rcall	.-1666   	; 0x962 <eeprom_read_word_user>
     fe4:	85 30       	cpi	r24, 0x05	; 5
     fe6:	99 40       	sbci	r25, 0x09	; 9
     fe8:	09 f4       	brne	.+2      	; 0xfec <read_para+0xcc>
     fea:	41 c0       	rjmp	.+130    	; 0x106e <read_para+0x14e>
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
     fec:	cf b7       	in	r28, 0x3f	; 63
	cli();
     fee:	f8 94       	cli
	wdt_reset();
     ff0:	a8 95       	wdr
	eeprom_busy_wait();
     ff2:	e1 99       	sbic	0x1c, 1	; 28
     ff4:	fe cf       	rjmp	.-4      	; 0xff2 <read_para+0xd2>
	eeprom_write_word((uint16_t *)p, val);
     ff6:	65 e0       	ldi	r22, 0x05	; 5
     ff8:	79 e0       	ldi	r23, 0x09	; 9
     ffa:	8e eb       	ldi	r24, 0xBE	; 190
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	2e d7       	rcall	.+3676   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1000:	e1 99       	sbic	0x1c, 1	; 28
    1002:	fe cf       	rjmp	.-4      	; 0x1000 <read_para+0xe0>
	SREG = m_sreg;
    1004:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1006:	cf b7       	in	r28, 0x3f	; 63
	cli();
    1008:	f8 94       	cli
	wdt_reset();
    100a:	a8 95       	wdr
	eeprom_busy_wait();
    100c:	e1 99       	sbic	0x1c, 1	; 28
    100e:	fe cf       	rjmp	.-4      	; 0x100c <read_para+0xec>
	eeprom_write_word((uint16_t *)p, val);
    1010:	65 e0       	ldi	r22, 0x05	; 5
    1012:	79 e0       	ldi	r23, 0x09	; 9
    1014:	80 e2       	ldi	r24, 0x20	; 32
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	21 d7       	rcall	.+3650   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    101a:	e1 99       	sbic	0x1c, 1	; 28
    101c:	fe cf       	rjmp	.-4      	; 0x101a <read_para+0xfa>
	SREG = m_sreg;
    101e:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1020:	cf b7       	in	r28, 0x3f	; 63
	cli();
    1022:	f8 94       	cli
	wdt_reset();
    1024:	a8 95       	wdr
	eeprom_busy_wait();
    1026:	e1 99       	sbic	0x1c, 1	; 28
    1028:	fe cf       	rjmp	.-4      	; 0x1026 <read_para+0x106>
	eeprom_write_word((uint16_t *)p, val);
    102a:	65 e0       	ldi	r22, 0x05	; 5
    102c:	79 e0       	ldi	r23, 0x09	; 9
    102e:	82 e8       	ldi	r24, 0x82	; 130
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	14 d7       	rcall	.+3624   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1034:	e1 99       	sbic	0x1c, 1	; 28
    1036:	fe cf       	rjmp	.-4      	; 0x1034 <read_para+0x114>
	SREG = m_sreg;
    1038:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    103a:	cf b7       	in	r28, 0x3f	; 63
	cli();
    103c:	f8 94       	cli
	wdt_reset();
    103e:	a8 95       	wdr
	eeprom_busy_wait();
    1040:	e1 99       	sbic	0x1c, 1	; 28
    1042:	fe cf       	rjmp	.-4      	; 0x1040 <read_para+0x120>
	eeprom_write_word((uint16_t *)p, val);
    1044:	65 e0       	ldi	r22, 0x05	; 5
    1046:	79 e0       	ldi	r23, 0x09	; 9
    1048:	84 ee       	ldi	r24, 0xE4	; 228
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	07 d7       	rcall	.+3598   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    104e:	e1 99       	sbic	0x1c, 1	; 28
    1050:	fe cf       	rjmp	.-4      	; 0x104e <read_para+0x12e>
	SREG = m_sreg;
    1052:	cf bf       	out	0x3f, r28	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1054:	cf b7       	in	r28, 0x3f	; 63
	cli();
    1056:	f8 94       	cli
	wdt_reset();
    1058:	a8 95       	wdr
	eeprom_busy_wait();
    105a:	e1 99       	sbic	0x1c, 1	; 28
    105c:	fe cf       	rjmp	.-4      	; 0x105a <read_para+0x13a>
	eeprom_write_word((uint16_t *)p, val);
    105e:	65 e0       	ldi	r22, 0x05	; 5
    1060:	79 e0       	ldi	r23, 0x09	; 9
    1062:	86 e4       	ldi	r24, 0x46	; 70
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	fa d6       	rcall	.+3572   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1068:	e1 99       	sbic	0x1c, 1	; 28
    106a:	fe cf       	rjmp	.-4      	; 0x1068 <read_para+0x148>
	SREG = m_sreg;
    106c:	cf bf       	out	0x3f, r28	; 63
	{
		eeprom_write_word_user((uint16_t *)(&m_para[0].e_version_l),version_l);
	}
	//
    //读非易失参数,高低料位设置值
    m_mh_set = eeprom_read_word_user((const uint16_t *)&m_para[0].e_mh);
    106e:	80 ec       	ldi	r24, 0xC0	; 192
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	77 dc       	rcall	.-1810   	; 0x962 <eeprom_read_word_user>
    1074:	90 93 85 01 	sts	0x0185, r25
    1078:	80 93 84 01 	sts	0x0184, r24
    else if(m_mh_set < PULSE_BOTTOM)
	{
        m_mh_set = PULSE_BOTTOM+3000;
	}*/

    smoothingDate = eeprom_read_word_user((const uint16_t *)&m_para[0].smoothingDate);
    107c:	86 ec       	ldi	r24, 0xC6	; 198
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	70 dc       	rcall	.-1824   	; 0x962 <eeprom_read_word_user>
    if(smoothingDate >= 10)//输出5v
    1082:	8a 30       	cpi	r24, 0x0A	; 10
    1084:	91 05       	cpc	r25, r1
    1086:	30 f5       	brcc	.+76     	; 0x10d4 <read_para+0x1b4>
    else if(m_mh_set < PULSE_BOTTOM)
	{
        m_mh_set = PULSE_BOTTOM+3000;
	}*/

    smoothingDate = eeprom_read_word_user((const uint16_t *)&m_para[0].smoothingDate);
    1088:	90 93 67 00 	sts	0x0067, r25
    108c:	80 93 66 00 	sts	0x0066, r24
	{
        smoothingDate = 0;
	}
	
  	//
    m_ml_set = eeprom_read_word_user((const uint16_t *)&m_para[0].e_ml);
    1090:	82 ec       	ldi	r24, 0xC2	; 194
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	66 dc       	rcall	.-1844   	; 0x962 <eeprom_read_word_user>
    1096:	90 93 8f 01 	sts	0x018F, r25
    109a:	80 93 8e 01 	sts	0x018E, r24
    if(m_ml_set > m_mh_set)
    109e:	20 91 8e 01 	lds	r18, 0x018E
    10a2:	30 91 8f 01 	lds	r19, 0x018F
    10a6:	80 91 84 01 	lds	r24, 0x0184
    10aa:	90 91 85 01 	lds	r25, 0x0185
    10ae:	82 17       	cp	r24, r18
    10b0:	93 07       	cpc	r25, r19
    10b2:	a8 f0       	brcs	.+42     	; 0x10de <read_para+0x1be>
	{
        m_ml_set = m_mh_set-3000;
	}
    else if(m_ml_set < 100)
    10b4:	80 91 8e 01 	lds	r24, 0x018E
    10b8:	90 91 8f 01 	lds	r25, 0x018F
    10bc:	84 36       	cpi	r24, 0x64	; 100
    10be:	91 05       	cpc	r25, r1
    10c0:	30 f4       	brcc	.+12     	; 0x10ce <read_para+0x1ae>
	{
        m_ml_set = 100;
    10c2:	84 e6       	ldi	r24, 0x64	; 100
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	90 93 8f 01 	sts	0x018F, r25
    10ca:	80 93 8e 01 	sts	0x018E, r24
	}
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret
	}*/

    smoothingDate = eeprom_read_word_user((const uint16_t *)&m_para[0].smoothingDate);
    if(smoothingDate >= 10)//输出5v
	{
        smoothingDate = 0;
    10d4:	10 92 67 00 	sts	0x0067, r1
    10d8:	10 92 66 00 	sts	0x0066, r1
    10dc:	d9 cf       	rjmp	.-78     	; 0x1090 <read_para+0x170>
	
  	//
    m_ml_set = eeprom_read_word_user((const uint16_t *)&m_para[0].e_ml);
    if(m_ml_set > m_mh_set)
	{
        m_ml_set = m_mh_set-3000;
    10de:	80 91 84 01 	lds	r24, 0x0184
    10e2:	90 91 85 01 	lds	r25, 0x0185
    10e6:	88 5b       	subi	r24, 0xB8	; 184
    10e8:	9b 40       	sbci	r25, 0x0B	; 11
    10ea:	90 93 8f 01 	sts	0x018F, r25
    10ee:	80 93 8e 01 	sts	0x018E, r24
	}
    else if(m_ml_set < 100)
	{
        m_ml_set = 100;
	}
}
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	08 95       	ret

000010f8 <scan_key>:
////////////////////////////////////////////////////////////////
void scan_key(void)
{
#ifndef __TEST__
	int i;
    if(0 == bkmh)
    10f8:	9a 99       	sbic	0x13, 2	; 19
    10fa:	2f c0       	rjmp	.+94     	; 0x115a <scan_key+0x62>
    10fc:	8c e2       	ldi	r24, 0x2C	; 44
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	04 c0       	rjmp	.+8      	; 0x110a <scan_key+0x12>
    1102:	01 97       	sbiw	r24, 0x01	; 1
    {
        //检测到高料位按键操作
		for(i=300; i>0; i--)
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	09 f4       	brne	.+2      	; 0x110a <scan_key+0x12>
    1108:	ba c0       	rjmp	.+372    	; 0x127e <scan_key+0x186>
    110a:	ef e3       	ldi	r30, 0x3F	; 63
    110c:	ff e1       	ldi	r31, 0x1F	; 31
    110e:	31 97       	sbiw	r30, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <scan_key+0x16>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <scan_key+0x1c>
    1114:	00 00       	nop
		{
        	_delay_ms(2);
			if(0 != bkmh)
    1116:	9a 9b       	sbis	0x13, 2	; 19
    1118:	f4 cf       	rjmp	.-24     	; 0x1102 <scan_key+0xa>
        }
    }
#endif

#if IS_MMR_USED == TRUE
	if (send_time_count < 20)
    111a:	20 91 68 00 	lds	r18, 0x0068
    111e:	30 91 69 00 	lds	r19, 0x0069
    1122:	24 31       	cpi	r18, 0x14	; 20
    1124:	31 05       	cpc	r19, r1
    1126:	c0 f4       	brcc	.+48     	; 0x1158 <scan_key+0x60>
	{ 	    
		send_time_count ++; //50ms
    1128:	a9 01       	movw	r20, r18
    112a:	4f 5f       	subi	r20, 0xFF	; 255
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	50 93 69 00 	sts	0x0069, r21
    1132:	40 93 68 00 	sts	0x0068, r20
		if (send_time_count >3 && send_time_count%3 ==0)
    1136:	44 30       	cpi	r20, 0x04	; 4
    1138:	51 05       	cpc	r21, r1
    113a:	70 f0       	brcs	.+28     	; 0x1158 <scan_key+0x60>
    113c:	9a 01       	movw	r18, r20
    113e:	ab ea       	ldi	r26, 0xAB	; 171
    1140:	ba ea       	ldi	r27, 0xAA	; 170
    1142:	62 d6       	rcall	.+3268   	; 0x1e08 <__umulhisi3>
    1144:	96 95       	lsr	r25
    1146:	87 95       	ror	r24
    1148:	9c 01       	movw	r18, r24
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	28 0f       	add	r18, r24
    1150:	39 1f       	adc	r19, r25
    1152:	42 17       	cp	r20, r18
    1154:	53 07       	cpc	r21, r19
    1156:	d9 f1       	breq	.+118    	; 0x11ce <scan_key+0xd6>
    1158:	08 95       	ret
				_delay_ms(20);
	        }
	        //sei();
		}
    }
    else if(0 == bkml)
    115a:	9b 99       	sbic	0x13, 3	; 19
    115c:	10 c0       	rjmp	.+32     	; 0x117e <scan_key+0x86>
    115e:	8c e2       	ldi	r24, 0x2C	; 44
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	04 c0       	rjmp	.+8      	; 0x116c <scan_key+0x74>
    1164:	01 97       	sbiw	r24, 0x01	; 1
    {
        //检测到低料位按键操作
		for(i=300; i>0; i--)
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	09 f4       	brne	.+2      	; 0x116c <scan_key+0x74>
    116a:	cb c0       	rjmp	.+406    	; 0x1302 <scan_key+0x20a>
    116c:	ef e3       	ldi	r30, 0x3F	; 63
    116e:	ff e1       	ldi	r31, 0x1F	; 31
    1170:	31 97       	sbiw	r30, 0x01	; 1
    1172:	f1 f7       	brne	.-4      	; 0x1170 <scan_key+0x78>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <scan_key+0x7e>
    1176:	00 00       	nop
		{
        	_delay_ms(2);
			if(0 != bkml)
    1178:	9b 9b       	sbis	0x13, 3	; 19
    117a:	f4 cf       	rjmp	.-24     	; 0x1164 <scan_key+0x6c>
    117c:	ce cf       	rjmp	.-100    	; 0x111a <scan_key+0x22>
	            _delay_ms(20);
	        }
	        //sei();
		}
    }
    else if(1 == command_gaoliaowei)
    117e:	80 91 73 01 	lds	r24, 0x0173
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	09 f4       	brne	.+2      	; 0x1188 <scan_key+0x90>
    1186:	04 c1       	rjmp	.+520    	; 0x1390 <scan_key+0x298>
		{
			SetTimer(MT_GAOLIAOWEI_SAVE, 2000, 0);
		}
		#endif		
    }
    else if(1 == command_diliaowei)
    1188:	80 91 74 01 	lds	r24, 0x0174
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	29 f6       	brne	.-118    	; 0x111a <scan_key+0x22>
    {
        command_diliaowei = 0;
    1190:	10 92 74 01 	sts	0x0174, r1
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    1194:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	44 ec       	ldi	r20, 0xC4	; 196
    119a:	59 e0       	ldi	r21, 0x09	; 9
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	87 eb       	ldi	r24, 0xB7	; 183
    11a2:	94 e0       	ldi	r25, 0x04	; 4
    11a4:	5c d7       	rcall	.+3768   	; 0x205e <_etext+0x1be>
		#else
		{
			turn_on_led_ms(2000);
		}
		#endif
        m_ml_set = m_mcur.ms;//标定起作用，延时记录
    11a6:	80 91 9c 01 	lds	r24, 0x019C
    11aa:	90 91 9d 01 	lds	r25, 0x019D
    11ae:	90 93 8f 01 	sts	0x018F, r25
    11b2:	80 93 8e 01 	sts	0x018E, r24
        //
        m_cgq_ack=DILIAOWEI;
    11b6:	85 e3       	ldi	r24, 0x35	; 53
    11b8:	80 93 75 01 	sts	0x0175, r24
		//
		#if USED_SMOOTHING == TRUE
		{
			SetTimer(MT_DILIAOWEI_SAVE, 2500, 0);
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	44 ec       	ldi	r20, 0xC4	; 196
    11c0:	59 e0       	ldi	r21, 0x09	; 9
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	85 eb       	ldi	r24, 0xB5	; 181
    11c8:	94 e0       	ldi	r25, 0x04	; 4
    11ca:	49 d7       	rcall	.+3730   	; 0x205e <_etext+0x1be>
    11cc:	a6 cf       	rjmp	.-180    	; 0x111a <scan_key+0x22>

void uart_tx_zan(void)
{  
    //中断方式发生串口数据 
    //
    uart_tx_buf[0] = 0xaa;
    11ce:	8a ea       	ldi	r24, 0xAA	; 170
    11d0:	80 93 dc 00 	sts	0x00DC, r24

	uart_tx_buf[5] = (zan_m_temp.ms[0] >> 8)&0xff ;
	uart_tx_buf[6] = (zan_m_temp.ms[0] >> 0)&0xff ;
	*/

	uart_tx_buf[1]  = 3;  //地址
    11d4:	83 e0       	ldi	r24, 0x03	; 3
    11d6:	80 93 dd 00 	sts	0x00DD, r24
	uart_tx_buf[6] =0;
	uart_tx_buf[7] =0;
	uart_tx_buf[8] =0;
	*/

	unsigned m_sreg = SREG;
    11da:	ff b7       	in	r31, 0x3f	; 63
	cli();
    11dc:	f8 94       	cli
	if (uart_tx_buf[2] ==SMOOTHING_SET)
    11de:	e0 91 de 00 	lds	r30, 0x00DE
    11e2:	ea 33       	cpi	r30, 0x3A	; 58
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <scan_key+0xf0>
    11e6:	cf c0       	rjmp	.+414    	; 0x1386 <scan_key+0x28e>
		//uart_tx_buf[4] = m_ml_set & 0xff;

	}
	else
	{		
		uart_tx_buf[3] = m_ml_set >> 8;
    11e8:	80 91 8e 01 	lds	r24, 0x018E
    11ec:	90 91 8f 01 	lds	r25, 0x018F
    11f0:	90 93 df 00 	sts	0x00DF, r25
		uart_tx_buf[4] = m_ml_set & 0xff;
    11f4:	80 91 8e 01 	lds	r24, 0x018E
    11f8:	90 91 8f 01 	lds	r25, 0x018F
    11fc:	80 93 e0 00 	sts	0x00E0, r24
	}


    uart_tx_buf[5] = m_mh_set >> 8;
    1200:	60 91 84 01 	lds	r22, 0x0184
    1204:	70 91 85 01 	lds	r23, 0x0185
    1208:	70 93 e1 00 	sts	0x00E1, r23
    uart_tx_buf[6] = m_mh_set & 0xff;
    120c:	40 91 84 01 	lds	r20, 0x0184
    1210:	50 91 85 01 	lds	r21, 0x0185
    1214:	40 93 e2 00 	sts	0x00E2, r20

    uart_tx_buf[7] = m_mcur.ms >> 8;
    1218:	20 91 9c 01 	lds	r18, 0x019C
    121c:	30 91 9d 01 	lds	r19, 0x019D
    1220:	30 93 e3 00 	sts	0x00E3, r19
	uart_tx_buf[8] = m_mcur.ms & 0xff;
    1224:	80 91 9c 01 	lds	r24, 0x019C
    1228:	90 91 9d 01 	lds	r25, 0x019D
    122c:	80 93 e4 00 	sts	0x00E4, r24
	SREG = m_sreg;
    1230:	ff bf       	out	0x3f, r31	; 63
		unsigned char i;
		//
		uart_tx_buf[9] = 0;
		for(i=0; i<9; i++)
		{
			uart_tx_buf[9] += uart_tx_buf[i];//sum    
    1232:	90 91 dd 00 	lds	r25, 0x00DD
    1236:	20 91 dc 00 	lds	r18, 0x00DC
    123a:	92 0f       	add	r25, r18
    123c:	9e 0f       	add	r25, r30
    123e:	20 91 df 00 	lds	r18, 0x00DF
    1242:	92 0f       	add	r25, r18
    1244:	20 91 e0 00 	lds	r18, 0x00E0
    1248:	92 0f       	add	r25, r18
    124a:	97 0f       	add	r25, r23
    124c:	94 0f       	add	r25, r20
    124e:	93 0f       	add	r25, r19
    1250:	98 0f       	add	r25, r24
    1252:	90 93 e5 00 	sts	0x00E5, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1256:	ef e1       	ldi	r30, 0x1F	; 31
    1258:	f3 e0       	ldi	r31, 0x03	; 3
    125a:	31 97       	sbiw	r30, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <scan_key+0x162>
    125e:	00 c0       	rjmp	.+0      	; 0x1260 <scan_key+0x168>
    1260:	00 00       	nop
	}
    //
    //开始发送数据
    //_delay_us(400);
	_delay_us(200);
    b485en = 1;//发送使能
    1262:	97 9a       	sbi	0x12, 7	; 18
    1264:	8f e8       	ldi	r24, 0x8F	; 143
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <scan_key+0x170>
    126c:	00 c0       	rjmp	.+0      	; 0x126e <scan_key+0x176>
    126e:	00 00       	nop
    _delay_us(100);
    UDR = uart_tx_buf[0];
    1270:	80 91 dc 00 	lds	r24, 0x00DC
    1274:	8c b9       	out	0x0c, r24	; 12
    uart_tx_addr = 1;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 93 e8 00 	sts	0x00E8, r24
    127c:	08 95       	ret
			}
		}
		if(0 == i)
		{
	        //cli();
	        if(0 == bkmh)
    127e:	9a 99       	sbic	0x13, 2	; 19
    1280:	4c cf       	rjmp	.-360    	; 0x111a <scan_key+0x22>
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    1282:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	40 ed       	ldi	r20, 0xD0	; 208
    1288:	57 e0       	ldi	r21, 0x07	; 7
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	87 eb       	ldi	r24, 0xB7	; 183
    1290:	94 e0       	ldi	r25, 0x04	; 4
    1292:	e5 d6       	rcall	.+3530   	; 0x205e <_etext+0x1be>
    1294:	8e e1       	ldi	r24, 0x1E	; 30
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0a c0       	rjmp	.+20     	; 0x12ae <scan_key+0x1b6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    129a:	ef e3       	ldi	r30, 0x3F	; 63
    129c:	ff e1       	ldi	r31, 0x1F	; 31
    129e:	31 97       	sbiw	r30, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <scan_key+0x1a6>
    12a2:	00 c0       	rjmp	.+0      	; 0x12a4 <scan_key+0x1ac>
    12a4:	00 00       	nop
					if(1==bkmh)
					{
						break;
					}
	                _delay_ms(2);
	                wdt_reset();
    12a6:	a8 95       	wdr
    12a8:	01 97       	sbiw	r24, 0x01	; 1
				#else
				{
					turn_on_led_ms(2000);
				}
				#endif
	            for(i=30; i>0; i--)
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	11 f0       	breq	.+4      	; 0x12b2 <scan_key+0x1ba>
	            {
					if(1==bkmh)
    12ae:	9a 9b       	sbis	0x13, 2	; 19
    12b0:	f4 cf       	rjmp	.-24     	; 0x129a <scan_key+0x1a2>
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    12b2:	8e e1       	ldi	r24, 0x1E	; 30
    12b4:	90 e0       	ldi	r25, 0x00	; 0
	            }
				#if USED_SMOOTHING == TRUE
				{
					for(i=30; i>0; i--)
					{
						wdt_reset();
    12b6:	a8 95       	wdr
    12b8:	ff ef       	ldi	r31, 0xFF	; 255
    12ba:	20 e7       	ldi	r18, 0x70	; 112
    12bc:	32 e0       	ldi	r19, 0x02	; 2
    12be:	f1 50       	subi	r31, 0x01	; 1
    12c0:	20 40       	sbci	r18, 0x00	; 0
    12c2:	30 40       	sbci	r19, 0x00	; 0
    12c4:	e1 f7       	brne	.-8      	; 0x12be <scan_key+0x1c6>
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <scan_key+0x1d0>
    12c8:	00 00       	nop
    12ca:	01 97       	sbiw	r24, 0x01	; 1
	                _delay_ms(2);
	                wdt_reset();
	            }
				#if USED_SMOOTHING == TRUE
				{
					for(i=30; i>0; i--)
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	99 f7       	brne	.-26     	; 0x12b6 <scan_key+0x1be>
						//m_mh_set = m_mcur.ms; //标定起作用，延时记录
						_delay_ms(50);
					}
				}
				#endif
				m_mh_set = m_mcur.ms; //如果禁止中断，这个采样值不会更新
    12d0:	80 91 9c 01 	lds	r24, 0x019C
    12d4:	90 91 9d 01 	lds	r25, 0x019D
    12d8:	90 93 85 01 	sts	0x0185, r25
    12dc:	80 93 84 01 	sts	0x0184, r24
	            eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
    12e0:	60 91 84 01 	lds	r22, 0x0184
    12e4:	70 91 85 01 	lds	r23, 0x0185
    12e8:	80 ec       	ldi	r24, 0xC0	; 192
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	3d dd       	rcall	.-1414   	; 0xd68 <eeprom_write_word_user>
    12ee:	4f ef       	ldi	r20, 0xFF	; 255
    12f0:	89 ef       	ldi	r24, 0xF9	; 249
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	41 50       	subi	r20, 0x01	; 1
    12f6:	80 40       	sbci	r24, 0x00	; 0
    12f8:	90 40       	sbci	r25, 0x00	; 0
    12fa:	e1 f7       	brne	.-8      	; 0x12f4 <scan_key+0x1fc>
    12fc:	00 c0       	rjmp	.+0      	; 0x12fe <scan_key+0x206>
    12fe:	00 00       	nop
    1300:	0c cf       	rjmp	.-488    	; 0x111a <scan_key+0x22>
			}
		}
		if(0 == i)
		{
	        //cli();
	        if(0 == bkml)
    1302:	9b 99       	sbic	0x13, 3	; 19
    1304:	0a cf       	rjmp	.-492    	; 0x111a <scan_key+0x22>
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    1306:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	40 ed       	ldi	r20, 0xD0	; 208
    130c:	57 e0       	ldi	r21, 0x07	; 7
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	87 eb       	ldi	r24, 0xB7	; 183
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	a3 d6       	rcall	.+3398   	; 0x205e <_etext+0x1be>
    1318:	8e e1       	ldi	r24, 0x1E	; 30
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0a c0       	rjmp	.+20     	; 0x1332 <scan_key+0x23a>
    131e:	ef e3       	ldi	r30, 0x3F	; 63
    1320:	ff e1       	ldi	r31, 0x1F	; 31
    1322:	31 97       	sbiw	r30, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <scan_key+0x22a>
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <scan_key+0x230>
    1328:	00 00       	nop
		            if(1==bkml)
		            {
			            break;
		            }
		            _delay_ms(2);
		            wdt_reset();
    132a:	a8 95       	wdr
    132c:	01 97       	sbiw	r24, 0x01	; 1
		        #else
		        {
			        turn_on_led_ms(2000);
		        }
		        #endif
	            for(i=30; i>0; i--)
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	11 f0       	breq	.+4      	; 0x1336 <scan_key+0x23e>
	            {
		            if(1==bkml)
    1332:	9b 9b       	sbis	0x13, 3	; 19
    1334:	f4 cf       	rjmp	.-24     	; 0x131e <scan_key+0x226>
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1336:	8e e1       	ldi	r24, 0x1E	; 30
    1338:	90 e0       	ldi	r25, 0x00	; 0
	            }
				#if USED_SMOOTHING == TRUE
				{
					for(i=30; i>0; i--)
					{
						wdt_reset();
    133a:	a8 95       	wdr
    133c:	ff ef       	ldi	r31, 0xFF	; 255
    133e:	20 e7       	ldi	r18, 0x70	; 112
    1340:	32 e0       	ldi	r19, 0x02	; 2
    1342:	f1 50       	subi	r31, 0x01	; 1
    1344:	20 40       	sbci	r18, 0x00	; 0
    1346:	30 40       	sbci	r19, 0x00	; 0
    1348:	e1 f7       	brne	.-8      	; 0x1342 <scan_key+0x24a>
    134a:	00 c0       	rjmp	.+0      	; 0x134c <scan_key+0x254>
    134c:	00 00       	nop
    134e:	01 97       	sbiw	r24, 0x01	; 1
		            _delay_ms(2);
		            wdt_reset();
	            }
				#if USED_SMOOTHING == TRUE
				{
					for(i=30; i>0; i--)
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	99 f7       	brne	.-26     	; 0x133a <scan_key+0x242>
						//m_ml_set = m_mcur.ms;//标定起作用，延时记录
						_delay_ms(50);
					}
				}
				#endif
				m_ml_set = m_mcur.ms; //如果禁止中断，这个采样值不会更新
    1354:	80 91 9c 01 	lds	r24, 0x019C
    1358:	90 91 9d 01 	lds	r25, 0x019D
    135c:	90 93 8f 01 	sts	0x018F, r25
    1360:	80 93 8e 01 	sts	0x018E, r24
	            eeprom_write_word_user((uint16_t *)&m_para[0].e_ml, m_ml_set);
    1364:	60 91 8e 01 	lds	r22, 0x018E
    1368:	70 91 8f 01 	lds	r23, 0x018F
    136c:	82 ec       	ldi	r24, 0xC2	; 194
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	fb dc       	rcall	.-1546   	; 0xd68 <eeprom_write_word_user>
    1372:	4f ef       	ldi	r20, 0xFF	; 255
    1374:	89 ef       	ldi	r24, 0xF9	; 249
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	41 50       	subi	r20, 0x01	; 1
    137a:	80 40       	sbci	r24, 0x00	; 0
    137c:	90 40       	sbci	r25, 0x00	; 0
    137e:	e1 f7       	brne	.-8      	; 0x1378 <scan_key+0x280>
    1380:	00 c0       	rjmp	.+0      	; 0x1382 <scan_key+0x28a>
    1382:	00 00       	nop
    1384:	ca ce       	rjmp	.-620    	; 0x111a <scan_key+0x22>

	unsigned m_sreg = SREG;
	cli();
	if (uart_tx_buf[2] ==SMOOTHING_SET)
	{
		uart_tx_buf[3] = smoothingDate;
    1386:	80 91 66 00 	lds	r24, 0x0066
    138a:	80 93 df 00 	sts	0x00DF, r24
    138e:	38 cf       	rjmp	.-400    	; 0x1200 <scan_key+0x108>
	        //sei();
		}
    }
    else if(1 == command_gaoliaowei)
    {
        command_gaoliaowei = 0;
    1390:	10 92 73 01 	sts	0x0173, r1
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    1394:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	48 eb       	ldi	r20, 0xB8	; 184
    139a:	5b e0       	ldi	r21, 0x0B	; 11
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	87 eb       	ldi	r24, 0xB7	; 183
    13a2:	94 e0       	ldi	r25, 0x04	; 4
    13a4:	5c d6       	rcall	.+3256   	; 0x205e <_etext+0x1be>
		#else
		{
			turn_on_led_ms(2000);
		}
		#endif
        m_mh_set = m_mcur.ms;//标定起作用，延时记录
    13a6:	80 91 9c 01 	lds	r24, 0x019C
    13aa:	90 91 9d 01 	lds	r25, 0x019D
    13ae:	90 93 85 01 	sts	0x0185, r25
    13b2:	80 93 84 01 	sts	0x0184, r24
        //
        m_cgq_ack=GAOLIAOWEI;
    13b6:	84 e3       	ldi	r24, 0x34	; 52
    13b8:	80 93 75 01 	sts	0x0175, r24
		//
		#if USED_SMOOTHING == TRUE
		{
			SetTimer(MT_GAOLIAOWEI_SAVE, 2500, 0);
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	44 ec       	ldi	r20, 0xC4	; 196
    13c0:	59 e0       	ldi	r21, 0x09	; 9
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	84 eb       	ldi	r24, 0xB4	; 180
    13c8:	94 e0       	ldi	r25, 0x04	; 4
    13ca:	49 d6       	rcall	.+3218   	; 0x205e <_etext+0x1be>
    13cc:	a6 ce       	rjmp	.-692    	; 0x111a <scan_key+0x22>

000013ce <OnTimer>:
	#endif
}
#endif
/////////////////////////////////////////////////////////////////
void OnTimer(unsigned short id)
{
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
	switch(id)
    13d4:	86 3b       	cpi	r24, 0xB6	; 182
    13d6:	24 e0       	ldi	r18, 0x04	; 4
    13d8:	92 07       	cpc	r25, r18
    13da:	09 f4       	brne	.+2      	; 0x13de <OnTimer+0x10>
    13dc:	d1 c0       	rjmp	.+418    	; 0x1580 <OnTimer+0x1b2>
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <OnTimer+0x14>
    13e0:	5e c0       	rjmp	.+188    	; 0x149e <OnTimer+0xd0>
    13e2:	84 3b       	cpi	r24, 0xB4	; 180
    13e4:	24 e0       	ldi	r18, 0x04	; 4
    13e6:	92 07       	cpc	r25, r18
    13e8:	09 f4       	brne	.+2      	; 0x13ec <OnTimer+0x1e>
    13ea:	75 c0       	rjmp	.+234    	; 0x14d6 <OnTimer+0x108>
    13ec:	85 3b       	cpi	r24, 0xB5	; 181
    13ee:	94 40       	sbci	r25, 0x04	; 4
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <OnTimer+0x26>
    13f2:	51 c0       	rjmp	.+162    	; 0x1496 <OnTimer+0xc8>
			m_cgq_ack=GAOLIAOWEI;
		}
		break;
		case MT_DILIAOWEI_SAVE:
		{
			m_ml_set = m_mcur.ms;
    13f4:	80 91 9c 01 	lds	r24, 0x019C
    13f8:	90 91 9d 01 	lds	r25, 0x019D
    13fc:	90 93 8f 01 	sts	0x018F, r25
    1400:	80 93 8e 01 	sts	0x018E, r24
			eeprom_write_word_user((uint16_t *)&m_para[0].e_ml,m_ml_set);
    1404:	c0 91 8e 01 	lds	r28, 0x018E
    1408:	d0 91 8f 01 	lds	r29, 0x018F
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    140c:	1f b7       	in	r17, 0x3f	; 63
	cli();
    140e:	f8 94       	cli
	wdt_reset();
    1410:	a8 95       	wdr
	eeprom_busy_wait();
    1412:	e1 99       	sbic	0x1c, 1	; 28
    1414:	fe cf       	rjmp	.-4      	; 0x1412 <OnTimer+0x44>
	eeprom_write_word((uint16_t *)p, val);
    1416:	be 01       	movw	r22, r28
    1418:	82 ec       	ldi	r24, 0xC2	; 194
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	1f d5       	rcall	.+2622   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    141e:	e1 99       	sbic	0x1c, 1	; 28
    1420:	fe cf       	rjmp	.-4      	; 0x141e <OnTimer+0x50>
	SREG = m_sreg;
    1422:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1424:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1426:	f8 94       	cli
	wdt_reset();
    1428:	a8 95       	wdr
	eeprom_busy_wait();
    142a:	e1 99       	sbic	0x1c, 1	; 28
    142c:	fe cf       	rjmp	.-4      	; 0x142a <OnTimer+0x5c>
	eeprom_write_word((uint16_t *)p, val);
    142e:	be 01       	movw	r22, r28
    1430:	84 e2       	ldi	r24, 0x24	; 36
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	13 d5       	rcall	.+2598   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1436:	e1 99       	sbic	0x1c, 1	; 28
    1438:	fe cf       	rjmp	.-4      	; 0x1436 <OnTimer+0x68>
	SREG = m_sreg;
    143a:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    143c:	1f b7       	in	r17, 0x3f	; 63
	cli();
    143e:	f8 94       	cli
	wdt_reset();
    1440:	a8 95       	wdr
	eeprom_busy_wait();
    1442:	e1 99       	sbic	0x1c, 1	; 28
    1444:	fe cf       	rjmp	.-4      	; 0x1442 <OnTimer+0x74>
	eeprom_write_word((uint16_t *)p, val);
    1446:	be 01       	movw	r22, r28
    1448:	86 e8       	ldi	r24, 0x86	; 134
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	07 d5       	rcall	.+2574   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    144e:	e1 99       	sbic	0x1c, 1	; 28
    1450:	fe cf       	rjmp	.-4      	; 0x144e <OnTimer+0x80>
	SREG = m_sreg;
    1452:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1454:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1456:	f8 94       	cli
	wdt_reset();
    1458:	a8 95       	wdr
	eeprom_busy_wait();
    145a:	e1 99       	sbic	0x1c, 1	; 28
    145c:	fe cf       	rjmp	.-4      	; 0x145a <OnTimer+0x8c>
	eeprom_write_word((uint16_t *)p, val);
    145e:	be 01       	movw	r22, r28
    1460:	88 ee       	ldi	r24, 0xE8	; 232
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	fb d4       	rcall	.+2550   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1466:	e1 99       	sbic	0x1c, 1	; 28
    1468:	fe cf       	rjmp	.-4      	; 0x1466 <OnTimer+0x98>
	SREG = m_sreg;
    146a:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    146c:	1f b7       	in	r17, 0x3f	; 63
	cli();
    146e:	f8 94       	cli
	wdt_reset();
    1470:	a8 95       	wdr
	eeprom_busy_wait();
    1472:	e1 99       	sbic	0x1c, 1	; 28
    1474:	fe cf       	rjmp	.-4      	; 0x1472 <OnTimer+0xa4>
	eeprom_write_word((uint16_t *)p, val);
    1476:	be 01       	movw	r22, r28
    1478:	8a e4       	ldi	r24, 0x4A	; 74
    147a:	92 e0       	ldi	r25, 0x02	; 2
    147c:	ef d4       	rcall	.+2526   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    147e:	e1 99       	sbic	0x1c, 1	; 28
    1480:	fe cf       	rjmp	.-4      	; 0x147e <OnTimer+0xb0>
	SREG = m_sreg;
    1482:	1f bf       	out	0x3f, r17	; 63
    1484:	8f e3       	ldi	r24, 0x3F	; 63
    1486:	9f e1       	ldi	r25, 0x1F	; 31
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <OnTimer+0xba>
    148c:	00 c0       	rjmp	.+0      	; 0x148e <OnTimer+0xc0>
    148e:	00 00       	nop
		{
			m_ml_set = m_mcur.ms;
			eeprom_write_word_user((uint16_t *)&m_para[0].e_ml,m_ml_set);
			_delay_ms(2);
			//
			m_cgq_ack=DILIAOWEI;
    1490:	85 e3       	ldi	r24, 0x35	; 53
    1492:	80 93 75 01 	sts	0x0175, r24
		}
		break;
	}
}
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	08 95       	ret
}
#endif
/////////////////////////////////////////////////////////////////
void OnTimer(unsigned short id)
{
	switch(id)
    149e:	87 3b       	cpi	r24, 0xB7	; 183
    14a0:	24 e0       	ldi	r18, 0x04	; 4
    14a2:	92 07       	cpc	r25, r18
    14a4:	89 f0       	breq	.+34     	; 0x14c8 <OnTimer+0xfa>
    14a6:	88 3b       	cpi	r24, 0xB8	; 184
    14a8:	94 40       	sbci	r25, 0x04	; 4
    14aa:	a9 f7       	brne	.-22     	; 0x1496 <OnTimer+0xc8>
		}
		break;
		case MT_LED_RUN:
		{
			//运行灯闪烁
			bled_run = !bled_run;
    14ac:	85 b3       	in	r24, 0x15	; 21
    14ae:	85 fb       	bst	r24, 5
    14b0:	88 27       	eor	r24, r24
    14b2:	80 f9       	bld	r24, 0
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	89 27       	eor	r24, r25
    14b8:	80 fd       	sbrc	r24, 0
    14ba:	ad 9a       	sbi	0x15, 5	; 21
    14bc:	80 ff       	sbrs	r24, 0
    14be:	ad 98       	cbi	0x15, 5	; 21
			//
			m_cgq_ack=DILIAOWEI;
		}
		break;
	}
}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	08 95       	ret
	{
		case MT_TEST:
		break;
		case MT_TURN_OFF_LED:
		{
			bled = 0;
    14c8:	ac 98       	cbi	0x15, 4	; 21
			m_cgq_ack=0;//清除应答命令
    14ca:	10 92 75 01 	sts	0x0175, r1
			//
			m_cgq_ack=DILIAOWEI;
		}
		break;
	}
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
    14d4:	08 95       	ret
			scan_key();
		}
		break;
		case MT_GAOLIAOWEI_SAVE:
		{
			m_mh_set = m_mcur.ms;
    14d6:	80 91 9c 01 	lds	r24, 0x019C
    14da:	90 91 9d 01 	lds	r25, 0x019D
    14de:	90 93 85 01 	sts	0x0185, r25
    14e2:	80 93 84 01 	sts	0x0184, r24
			eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
    14e6:	c0 91 84 01 	lds	r28, 0x0184
    14ea:	d0 91 85 01 	lds	r29, 0x0185
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    14ee:	1f b7       	in	r17, 0x3f	; 63
	cli();
    14f0:	f8 94       	cli
	wdt_reset();
    14f2:	a8 95       	wdr
	eeprom_busy_wait();
    14f4:	e1 99       	sbic	0x1c, 1	; 28
    14f6:	fe cf       	rjmp	.-4      	; 0x14f4 <OnTimer+0x126>
	eeprom_write_word((uint16_t *)p, val);
    14f8:	be 01       	movw	r22, r28
    14fa:	80 ec       	ldi	r24, 0xC0	; 192
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	ae d4       	rcall	.+2396   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1500:	e1 99       	sbic	0x1c, 1	; 28
    1502:	fe cf       	rjmp	.-4      	; 0x1500 <OnTimer+0x132>
	SREG = m_sreg;
    1504:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1506:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1508:	f8 94       	cli
	wdt_reset();
    150a:	a8 95       	wdr
	eeprom_busy_wait();
    150c:	e1 99       	sbic	0x1c, 1	; 28
    150e:	fe cf       	rjmp	.-4      	; 0x150c <OnTimer+0x13e>
	eeprom_write_word((uint16_t *)p, val);
    1510:	be 01       	movw	r22, r28
    1512:	82 e2       	ldi	r24, 0x22	; 34
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	a2 d4       	rcall	.+2372   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1518:	e1 99       	sbic	0x1c, 1	; 28
    151a:	fe cf       	rjmp	.-4      	; 0x1518 <OnTimer+0x14a>
	SREG = m_sreg;
    151c:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    151e:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1520:	f8 94       	cli
	wdt_reset();
    1522:	a8 95       	wdr
	eeprom_busy_wait();
    1524:	e1 99       	sbic	0x1c, 1	; 28
    1526:	fe cf       	rjmp	.-4      	; 0x1524 <OnTimer+0x156>
	eeprom_write_word((uint16_t *)p, val);
    1528:	be 01       	movw	r22, r28
    152a:	84 e8       	ldi	r24, 0x84	; 132
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	96 d4       	rcall	.+2348   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1530:	e1 99       	sbic	0x1c, 1	; 28
    1532:	fe cf       	rjmp	.-4      	; 0x1530 <OnTimer+0x162>
	SREG = m_sreg;
    1534:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    1536:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1538:	f8 94       	cli
	wdt_reset();
    153a:	a8 95       	wdr
	eeprom_busy_wait();
    153c:	e1 99       	sbic	0x1c, 1	; 28
    153e:	fe cf       	rjmp	.-4      	; 0x153c <OnTimer+0x16e>
	eeprom_write_word((uint16_t *)p, val);
    1540:	be 01       	movw	r22, r28
    1542:	86 ee       	ldi	r24, 0xE6	; 230
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	8a d4       	rcall	.+2324   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1548:	e1 99       	sbic	0x1c, 1	; 28
    154a:	fe cf       	rjmp	.-4      	; 0x1548 <OnTimer+0x17a>
	SREG = m_sreg;
    154c:	1f bf       	out	0x3f, r17	; 63
	return tmp;
}
////////////////////////////////////////////////////////////////
void eeprom_write_word_2(const uint16_t *p, unsigned short val)
{
	unsigned m_sreg = SREG;
    154e:	1f b7       	in	r17, 0x3f	; 63
	cli();
    1550:	f8 94       	cli
	wdt_reset();
    1552:	a8 95       	wdr
	eeprom_busy_wait();
    1554:	e1 99       	sbic	0x1c, 1	; 28
    1556:	fe cf       	rjmp	.-4      	; 0x1554 <OnTimer+0x186>
	eeprom_write_word((uint16_t *)p, val);
    1558:	be 01       	movw	r22, r28
    155a:	88 e4       	ldi	r24, 0x48	; 72
    155c:	92 e0       	ldi	r25, 0x02	; 2
    155e:	7e d4       	rcall	.+2300   	; 0x1e5c <__eewr_word_m8a>
	eeprom_busy_wait();
    1560:	e1 99       	sbic	0x1c, 1	; 28
    1562:	fe cf       	rjmp	.-4      	; 0x1560 <OnTimer+0x192>
	SREG = m_sreg;
    1564:	1f bf       	out	0x3f, r17	; 63
    1566:	8f e3       	ldi	r24, 0x3F	; 63
    1568:	9f e1       	ldi	r25, 0x1F	; 31
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <OnTimer+0x19c>
    156e:	00 c0       	rjmp	.+0      	; 0x1570 <OnTimer+0x1a2>
    1570:	00 00       	nop
		{
			m_mh_set = m_mcur.ms;
			eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
			_delay_ms(2);
			//
			m_cgq_ack=GAOLIAOWEI;
    1572:	84 e3       	ldi	r24, 0x34	; 52
    1574:	80 93 75 01 	sts	0x0175, r24
			//
			m_cgq_ack=DILIAOWEI;
		}
		break;
	}
}
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	08 95       	ret
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
			bled_run = !bled_run;
		}
		break;
		case MT_SCAN_KEY:
		{
			scan_key();
    1586:	b8 cd       	rjmp	.-1168   	; 0x10f8 <scan_key>

00001588 <liaowei_sample_ok_handling>:
	//OCR1A = PWM_TOP/2; //for test
	//return;
	//
	//计算pwm电压输出
	#ifndef __TEST__
	if(m_mcur.ms <= (m_ml_set+3))
    1588:	20 91 9c 01 	lds	r18, 0x019C
    158c:	30 91 9d 01 	lds	r19, 0x019D
    1590:	80 91 8e 01 	lds	r24, 0x018E
    1594:	90 91 8f 01 	lds	r25, 0x018F
    1598:	03 96       	adiw	r24, 0x03	; 3
    159a:	82 17       	cp	r24, r18
    159c:	93 07       	cpc	r25, r19
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <liaowei_sample_ok_handling+0x1a>
    15a0:	7f c0       	rjmp	.+254    	; 0x16a0 <liaowei_sample_ok_handling+0x118>
		m_cur_pwm.ms = (PWM_TOP/5)-3;//150//200
		OCR1A = (unsigned short)PWM_TOP-m_cur_pwm.ms;//800,1v
		temp_for_400_255 = (unsigned short)PWM_TOP-m_cur_pwm.ms;//800,1v
		OCR2 = temp_for_400_255* 256 /PWM_TOP;
	}
	else if(m_mcur.ms >= (m_mh_set-4))
    15a2:	20 91 9c 01 	lds	r18, 0x019C
    15a6:	30 91 9d 01 	lds	r19, 0x019D
    15aa:	80 91 84 01 	lds	r24, 0x0184
    15ae:	90 91 85 01 	lds	r25, 0x0185
    15b2:	04 97       	sbiw	r24, 0x04	; 4
    15b4:	28 17       	cp	r18, r24
    15b6:	39 07       	cpc	r19, r25
    15b8:	f0 f5       	brcc	.+124    	; 0x1636 <liaowei_sample_ok_handling+0xae>
	}
	else
	{
		//1v <= out <= 5v
		unsigned short m_offset;
		m_offset = m_mcur.ms-m_ml_set;//当前测得的值减去低位设置值
    15ba:	20 91 9c 01 	lds	r18, 0x019C
    15be:	30 91 9d 01 	lds	r19, 0x019D
    15c2:	80 91 8e 01 	lds	r24, 0x018E
    15c6:	90 91 8f 01 	lds	r25, 0x018F
    15ca:	28 1b       	sub	r18, r24
    15cc:	39 0b       	sbc	r19, r25
		m_temp.ml = m_offset;
		m_temp.ml *= (unsigned short)((PWM_TOP/5)*4);//等距的平分1v到5v
		m_offset = m_mh_set-m_ml_set;//高位设置值减去低位设置值
    15ce:	40 91 84 01 	lds	r20, 0x0184
    15d2:	50 91 85 01 	lds	r21, 0x0185
    15d6:	80 91 8e 01 	lds	r24, 0x018E
    15da:	90 91 8f 01 	lds	r25, 0x018F
    15de:	48 1b       	sub	r20, r24
    15e0:	59 0b       	sbc	r21, r25
		m_temp.ml += m_offset>>1;//四舍五入
    15e2:	fa 01       	movw	r30, r20
    15e4:	f6 95       	lsr	r31
    15e6:	e7 95       	ror	r30
	{
		//1v <= out <= 5v
		unsigned short m_offset;
		m_offset = m_mcur.ms-m_ml_set;//当前测得的值减去低位设置值
		m_temp.ml = m_offset;
		m_temp.ml *= (unsigned short)((PWM_TOP/5)*4);//等距的平分1v到5v
    15e8:	a0 ea       	ldi	r26, 0xA0	; 160
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	0d d4       	rcall	.+2074   	; 0x1e08 <__umulhisi3>
		m_offset = m_mh_set-m_ml_set;//高位设置值减去低位设置值
		m_temp.ml += m_offset>>1;//四舍五入
    15ee:	6e 0f       	add	r22, r30
    15f0:	7f 1f       	adc	r23, r31
    15f2:	81 1d       	adc	r24, r1
    15f4:	91 1d       	adc	r25, r1
		m_temp.ml /= m_offset;
    15f6:	9a 01       	movw	r18, r20
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	e3 d3       	rcall	.+1990   	; 0x1dc4 <__udivmodsi4>
		m_temp.ms[0] += (PWM_TOP/5);//加入最低的1v
    15fe:	28 5d       	subi	r18, 0xD8	; 216
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	28 3c       	cpi	r18, 0xC8	; 200
    1604:	31 05       	cpc	r19, r1
    1606:	08 f0       	brcs	.+2      	; 0x160a <liaowei_sample_ok_handling+0x82>
    1608:	52 c0       	rjmp	.+164    	; 0x16ae <liaowei_sample_ok_handling+0x126>
			m_cur_pwm.ms = m_temp.ms[0];
			OCR1A=(unsigned short)PWM_TOP-m_cur_pwm.ms;
		}
		#endif //USED_AD
		#endif
		m_cur_pwm.ms = m_temp.ms[0];
    160a:	30 93 7f 01 	sts	0x017F, r19
    160e:	20 93 7e 01 	sts	0x017E, r18
		OCR1A=(unsigned short)PWM_TOP-m_cur_pwm.ms;
    1612:	20 91 7e 01 	lds	r18, 0x017E
    1616:	30 91 7f 01 	lds	r19, 0x017F
    161a:	88 ec       	ldi	r24, 0xC8	; 200
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	ac 01       	movw	r20, r24
    1620:	42 1b       	sub	r20, r18
    1622:	53 0b       	sbc	r21, r19
    1624:	5b bd       	out	0x2b, r21	; 43
    1626:	4a bd       	out	0x2a, r20	; 42
		temp_for_400_255=(unsigned short)PWM_TOP-m_cur_pwm.ms;
    1628:	20 91 7e 01 	lds	r18, 0x017E
    162c:	30 91 7f 01 	lds	r19, 0x017F
    1630:	82 1b       	sub	r24, r18
    1632:	93 0b       	sbc	r25, r19
    1634:	18 c0       	rjmp	.+48     	; 0x1666 <liaowei_sample_ok_handling+0xde>
		temp_for_400_255 = (unsigned short)PWM_TOP-m_cur_pwm.ms;//800,1v
		OCR2 = temp_for_400_255* 256 /PWM_TOP;
	}
	else if(m_mcur.ms >= (m_mh_set-4))
	{
		m_cur_pwm.ms = PWM_TOP-1;
    1636:	87 ec       	ldi	r24, 0xC7	; 199
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	90 93 7f 01 	sts	0x017F, r25
    163e:	80 93 7e 01 	sts	0x017E, r24
		OCR1A = (unsigned short)PWM_TOP-m_cur_pwm.ms;//1,5v
    1642:	80 91 7e 01 	lds	r24, 0x017E
    1646:	90 91 7f 01 	lds	r25, 0x017F
    164a:	68 ec       	ldi	r22, 0xC8	; 200
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	9b 01       	movw	r18, r22
    1650:	28 1b       	sub	r18, r24
    1652:	39 0b       	sbc	r19, r25
    1654:	3b bd       	out	0x2b, r19	; 43
    1656:	2a bd       	out	0x2a, r18	; 42
		temp_for_400_255 = (unsigned short)PWM_TOP-m_cur_pwm.ms;//1,5v
    1658:	80 91 7e 01 	lds	r24, 0x017E
    165c:	90 91 7f 01 	lds	r25, 0x017F
    1660:	68 1b       	sub	r22, r24
    1662:	79 0b       	sbc	r23, r25
    1664:	cb 01       	movw	r24, r22
		}
		#endif //USED_AD
		#endif
		m_cur_pwm.ms = m_temp.ms[0];
		OCR1A=(unsigned short)PWM_TOP-m_cur_pwm.ms;
		temp_for_400_255=(unsigned short)PWM_TOP-m_cur_pwm.ms;
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	80 93 62 00 	sts	0x0062, r24
    166e:	90 93 63 00 	sts	0x0063, r25
    1672:	a0 93 64 00 	sts	0x0064, r26
    1676:	b0 93 65 00 	sts	0x0065, r27
		OCR2 = temp_for_400_255* 256 / PWM_TOP;
    167a:	66 27       	eor	r22, r22
    167c:	78 2f       	mov	r23, r24
    167e:	89 2f       	mov	r24, r25
    1680:	9a 2f       	mov	r25, r26
    1682:	28 ec       	ldi	r18, 0xC8	; 200
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	9c d3       	rcall	.+1848   	; 0x1dc4 <__udivmodsi4>
    168c:	23 bd       	out	0x23, r18	; 35
		//
	}
	//
	#if USED_AD == TRUE
	{
		m_cur_per_ad.ms = m_mcur_ad.ms;//保留备用
    168e:	80 91 69 01 	lds	r24, 0x0169
    1692:	90 91 6a 01 	lds	r25, 0x016A
    1696:	90 93 9b 01 	sts	0x019B, r25
    169a:	80 93 9a 01 	sts	0x019A, r24
    169e:	08 95       	ret
	//
	//计算pwm电压输出
	#ifndef __TEST__
	if(m_mcur.ms <= (m_ml_set+3))
	{
		m_cur_pwm.ms = (PWM_TOP/5)-3;//150//200
    16a0:	85 e2       	ldi	r24, 0x25	; 37
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	90 93 7f 01 	sts	0x017F, r25
    16a8:	80 93 7e 01 	sts	0x017E, r24
    16ac:	b2 cf       	rjmp	.-156    	; 0x1612 <liaowei_sample_ok_handling+0x8a>
    16ae:	27 ec       	ldi	r18, 0xC7	; 199
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	ab cf       	rjmp	.-170    	; 0x160a <liaowei_sample_ok_handling+0x82>

000016b4 <main>:
//

unsigned int ad_value_flag =0;
int main()
{    
    cli();
    16b4:	f8 94       	cli
    16b6:	2f ef       	ldi	r18, 0xFF	; 255
    16b8:	80 e7       	ldi	r24, 0x70	; 112
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	21 50       	subi	r18, 0x01	; 1
    16be:	80 40       	sbci	r24, 0x00	; 0
    16c0:	90 40       	sbci	r25, 0x00	; 0
    16c2:	e1 f7       	brne	.-8      	; 0x16bc <main+0x8>
    16c4:	00 c0       	rjmp	.+0      	; 0x16c6 <main+0x12>
    16c6:	00 00       	nop
    _delay_ms(50);
    hardward_init();
    16c8:	61 d8       	rcall	.-3902   	; 0x78c <hardward_init>
    softward_init();
    16ca:	ba d8       	rcall	.-3724   	; 0x840 <softward_init>
    16cc:	2f ef       	ldi	r18, 0xFF	; 255
    16ce:	81 ee       	ldi	r24, 0xE1	; 225
    16d0:	94 e0       	ldi	r25, 0x04	; 4
    16d2:	21 50       	subi	r18, 0x01	; 1
    16d4:	80 40       	sbci	r24, 0x00	; 0
    16d6:	90 40       	sbci	r25, 0x00	; 0
    16d8:	e1 f7       	brne	.-8      	; 0x16d2 <main+0x1e>
    16da:	00 c0       	rjmp	.+0      	; 0x16dc <main+0x28>
    16dc:	00 00       	nop
    _delay_ms(100);
    read_para();
    16de:	20 dc       	rcall	.-1984   	; 0xf20 <read_para>
	uart_tx_buf[1] = ADDR_CGQ;
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	80 93 dd 00 	sts	0x00DD, r24
	uart_tx_buf[2] = SHUAXIANSHUJU;
    16e6:	86 e3       	ldi	r24, 0x36	; 54
    16e8:	80 93 de 00 	sts	0x00DE, r24
    sei();//启动全局中断
    16ec:	78 94       	sei
#endif
}
/////////////////////////////////////////////////////////////////
void turn_on_led_ms(unsigned short ms)
{
	bled = 1;
    16ee:	ac 9a       	sbi	0x15, 4	; 21
	SetTimer(MT_TURN_OFF_LED, ms, 0);
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	4c ed       	ldi	r20, 0xDC	; 220
    16f4:	55 e0       	ldi	r21, 0x05	; 5
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	87 eb       	ldi	r24, 0xB7	; 183
    16fc:	94 e0       	ldi	r25, 0x04	; 4
    16fe:	af d4       	rcall	.+2398   	; 0x205e <_etext+0x1be>
	}
	#endif
	//
	turn_on_led_ms(1500);
    //
	SetTimer(MT_SCAN_KEY, 50, -1); //按键扫描
    1700:	2f ef       	ldi	r18, 0xFF	; 255
    1702:	42 e3       	ldi	r20, 0x32	; 50
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	86 eb       	ldi	r24, 0xB6	; 182
    170c:	94 e0       	ldi	r25, 0x04	; 4
    170e:	a7 d4       	rcall	.+2382   	; 0x205e <_etext+0x1be>
	SetTimer(MT_LED_RUN, 1000, -1); //运行灯闪烁
    1710:	2f ef       	ldi	r18, 0xFF	; 255
    1712:	48 ee       	ldi	r20, 0xE8	; 232
    1714:	53 e0       	ldi	r21, 0x03	; 3
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	88 eb       	ldi	r24, 0xB8	; 184
    171c:	94 e0       	ldi	r25, 0x04	; 4
    171e:	9f d4       	rcall	.+2366   	; 0x205e <_etext+0x1be>
	//	
	wdt_enable(WDTO_2S);//启动看门狗定时器
    1720:	2f e0       	ldi	r18, 0x0F	; 15
    1722:	88 e1       	ldi	r24, 0x18	; 24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	a8 95       	wdr
    172c:	80 93 41 00 	sts	0x0041, r24
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	20 93 41 00 	sts	0x0041, r18
	if(m_pulse_counter > ((unsigned short)32*1024))//采集刷新时间约2秒      //32 //16 //8        //4096=2^12  //2048=2^11  //1024=2^10  //512=2^9  //256=2^8
	{
		m_pulse_value.ml <<= (6-5);                       //5   //4  //3       //16-12      //16-11      //16-10      //16-9     //16-8
		m_pulse_value.ml <<= SAMPLE_SHIFT_BIT_NUM;
		m_mcur.ms = m_pulse_value.ms[1];//丢弃低16位,相当于除以2^16
		ad_value_flag =1;
    1736:	c1 e0       	ldi	r28, 0x01	; 1
    1738:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(comm_error_delay > 200)//2秒
			{
				#if USART_TEST == FALSE
				{
					bled = !bled;
    173a:	11 e0       	ldi	r17, 0x01	; 1
	//	
	wdt_enable(WDTO_2S);//启动看门狗定时器
	//
    for(;;)
    {
        wdt_reset();//喂狗
    173c:	a8 95       	wdr
        //
        //接收到了正确的数据后,发送应答帧
        if(1 == uart_send_enable)
    173e:	80 91 a3 01 	lds	r24, 0x01A3
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	09 f4       	brne	.+2      	; 0x1748 <main+0x94>
    1746:	43 c0       	rjmp	.+134    	; 0x17ce <main+0x11a>
            uart_tx();
#endif
        }
		//

		if (ad_value_flag ==1)
    1748:	80 91 60 00 	lds	r24, 0x0060
    174c:	90 91 61 00 	lds	r25, 0x0061
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	09 f4       	brne	.+2      	; 0x1756 <main+0xa2>
    1754:	45 c0       	rjmp	.+138    	; 0x17e0 <main+0x12c>
			
		}


		
		if(pulse_value_counter > 0)
    1756:	80 91 a6 01 	lds	r24, 0x01A6
    175a:	81 11       	cpse	r24, r1
    175c:	74 c0       	rjmp	.+232    	; 0x1846 <main+0x192>
			pulse_value_read_id++;
			pulse_value_read_id %= PULSE_VALUE_NUM;
		}
		//
		//避免boot_time读取过程中值被中断更新
		if(boot_time_sub > 0)
    175e:	80 91 a5 01 	lds	r24, 0x01A5
    1762:	88 23       	and	r24, r24
    1764:	c1 f0       	breq	.+48     	; 0x1796 <main+0xe2>
		{
			boot_time += boot_time_sub;
    1766:	20 91 a5 01 	lds	r18, 0x01A5
    176a:	80 91 9e 01 	lds	r24, 0x019E
    176e:	90 91 9f 01 	lds	r25, 0x019F
    1772:	a0 91 a0 01 	lds	r26, 0x01A0
    1776:	b0 91 a1 01 	lds	r27, 0x01A1
    177a:	82 0f       	add	r24, r18
    177c:	91 1d       	adc	r25, r1
    177e:	a1 1d       	adc	r26, r1
    1780:	b1 1d       	adc	r27, r1
    1782:	80 93 9e 01 	sts	0x019E, r24
    1786:	90 93 9f 01 	sts	0x019F, r25
    178a:	a0 93 a0 01 	sts	0x01A0, r26
    178e:	b0 93 a1 01 	sts	0x01A1, r27
			boot_time_sub = 0;
    1792:	10 92 a5 01 	sts	0x01A5, r1
		#if 1
		{
			//单位：分钟
			#define UPDATE_EEPROM_DATA_INTERVAL	60
			//
			if(m_minute > UPDATE_EEPROM_DATA_INTERVAL)
    1796:	80 91 78 01 	lds	r24, 0x0178
    179a:	90 91 79 01 	lds	r25, 0x0179
    179e:	cd 97       	sbiw	r24, 0x3d	; 61
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <main+0xf0>
    17a2:	11 c1       	rjmp	.+546    	; 0x19c6 <main+0x312>
		#endif
		//
        //485通信中断的时候红灯常亮
		#if 1
		{
			if(comm_error_delay > 200)//2秒
    17a4:	80 91 7d 01 	lds	r24, 0x017D
    17a8:	89 3c       	cpi	r24, 0xC9	; 201
    17aa:	50 f0       	brcs	.+20     	; 0x17c0 <main+0x10c>
			{
				#if USART_TEST == FALSE
				{
					bled = !bled;
    17ac:	85 b3       	in	r24, 0x15	; 21
    17ae:	82 95       	swap	r24
    17b0:	81 70       	andi	r24, 0x01	; 1
    17b2:	81 27       	eor	r24, r17
    17b4:	80 fd       	sbrc	r24, 0
    17b6:	ac 9a       	sbi	0x15, 4	; 21
    17b8:	80 ff       	sbrs	r24, 0
    17ba:	ac 98       	cbi	0x15, 4	; 21
					comm_error_delay = 0;
    17bc:	10 92 7d 01 	sts	0x017D, r1
				#endif
			}
		}
		#endif
		//
		timer_run();
    17c0:	2c d5       	rcall	.+2648   	; 0x221a <_etext+0x37a>
	//	
	wdt_enable(WDTO_2S);//启动看门狗定时器
	//
    for(;;)
    {
        wdt_reset();//喂狗
    17c2:	a8 95       	wdr
        //
        //接收到了正确的数据后,发送应答帧
        if(1 == uart_send_enable)
    17c4:	80 91 a3 01 	lds	r24, 0x01A3
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	09 f0       	breq	.+2      	; 0x17ce <main+0x11a>
    17cc:	bd cf       	rjmp	.-134    	; 0x1748 <main+0x94>
        {
            uart_send_enable = 0;
    17ce:	10 92 a3 01 	sts	0x01A3, r1
            uart_tx();
#endif
        }
		//

		if (ad_value_flag ==1)
    17d2:	80 91 60 00 	lds	r24, 0x0060
    17d6:	90 91 61 00 	lds	r25, 0x0061
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <main+0x12c>
    17de:	bb cf       	rjmp	.-138    	; 0x1756 <main+0xa2>
		{
			ad_value_flag =0;
    17e0:	10 92 61 00 	sts	0x0061, r1
    17e4:	10 92 60 00 	sts	0x0060, r1
			m_mcur.ms = pulse_value_handling(m_mcur.ms);//平
    17e8:	e0 91 9c 01 	lds	r30, 0x019C
    17ec:	f0 91 9d 01 	lds	r31, 0x019D
	unsigned long tempLong=0;
	#if USED_SMOOTHING == TRUE
	{

		//
		m_pulse_value_bak.mll <<= 16;
    17f0:	20 91 d0 00 	lds	r18, 0x00D0
    17f4:	30 91 d1 00 	lds	r19, 0x00D1
    17f8:	40 91 d2 00 	lds	r20, 0x00D2
    17fc:	50 91 d3 00 	lds	r21, 0x00D3
    1800:	60 91 d4 00 	lds	r22, 0x00D4
    1804:	70 91 d5 00 	lds	r23, 0x00D5
    1808:	80 91 d6 00 	lds	r24, 0x00D6
    180c:	90 91 d7 00 	lds	r25, 0x00D7
    1810:	00 e1       	ldi	r16, 0x10	; 16
    1812:	06 d3       	rcall	.+1548   	; 0x1e20 <__ashldi3>
    1814:	40 93 d2 00 	sts	0x00D2, r20
    1818:	50 93 d3 00 	sts	0x00D3, r21
    181c:	60 93 d4 00 	sts	0x00D4, r22
    1820:	70 93 d5 00 	sts	0x00D5, r23
    1824:	80 93 d6 00 	sts	0x00D6, r24
    1828:	90 93 d7 00 	sts	0x00D7, r25
		m_pulse_value_bak.ms[0] = val;
    182c:	f0 93 d1 00 	sts	0x00D1, r31
    1830:	e0 93 d0 00 	sts	0x00D0, r30
		//

		if (ad_value_flag ==1)
		{
			ad_value_flag =0;
			m_mcur.ms = pulse_value_handling(m_mcur.ms);//平
    1834:	f0 93 9d 01 	sts	0x019D, r31
    1838:	e0 93 9c 01 	sts	0x019C, r30
			
		}


		
		if(pulse_value_counter > 0)
    183c:	80 91 a6 01 	lds	r24, 0x01A6
    1840:	88 23       	and	r24, r24
    1842:	09 f4       	brne	.+2      	; 0x1846 <main+0x192>
    1844:	8c cf       	rjmp	.-232    	; 0x175e <main+0xaa>
		{
			pulse_value_counter--;
    1846:	80 91 a6 01 	lds	r24, 0x01A6
    184a:	81 50       	subi	r24, 0x01	; 1
    184c:	80 93 a6 01 	sts	0x01A6, r24
			//
			int1_handling(pulse_value[pulse_value_read_id]);
    1850:	e0 91 e7 00 	lds	r30, 0x00E7
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	ee 0f       	add	r30, r30
    1858:	ff 1f       	adc	r31, r31
    185a:	e7 51       	subi	r30, 0x17	; 23
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
/////////////////////////////////////////////////////////////////
void int1_handling(unsigned char val)
{
	UCHAR4 m_temp;
	//
	m_temp.ms[0] = val;
    1862:	99 27       	eor	r25, r25
		m_pulse_value_rc = ((m_pulse_value_rc*10+5)/11) + ((m_temp.ms[0]+5)/11);
		m_temp.ms[0] = m_pulse_value_rc;
	}
	#else
	{
		m_pulse_value_rc = ((m_pulse_value_rc<<5)-(m_pulse_value_rc<<1))>>5;
    1864:	60 91 cc 00 	lds	r22, 0x00CC
    1868:	70 91 cd 00 	lds	r23, 0x00CD
		m_temp.ms[0] = ((m_temp.ms[0]<<1)+m_temp.ms[0])>>5;
    186c:	9c 01       	movw	r18, r24
    186e:	22 0f       	add	r18, r18
    1870:	33 1f       	adc	r19, r19
    1872:	28 0f       	add	r18, r24
    1874:	39 1f       	adc	r19, r25
    1876:	36 95       	lsr	r19
    1878:	27 95       	ror	r18
    187a:	32 95       	swap	r19
    187c:	22 95       	swap	r18
    187e:	2f 70       	andi	r18, 0x0F	; 15
    1880:	23 27       	eor	r18, r19
    1882:	3f 70       	andi	r19, 0x0F	; 15
    1884:	23 27       	eor	r18, r19
		m_pulse_value_rc = ((m_pulse_value_rc*10+5)/11) + ((m_temp.ms[0]+5)/11);
		m_temp.ms[0] = m_pulse_value_rc;
	}
	#else
	{
		m_pulse_value_rc = ((m_pulse_value_rc<<5)-(m_pulse_value_rc<<1))>>5;
    1886:	4e e1       	ldi	r20, 0x1E	; 30
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	64 9f       	mul	r22, r20
    188c:	c0 01       	movw	r24, r0
    188e:	65 9f       	mul	r22, r21
    1890:	90 0d       	add	r25, r0
    1892:	74 9f       	mul	r23, r20
    1894:	90 0d       	add	r25, r0
    1896:	11 24       	eor	r1, r1
    1898:	96 95       	lsr	r25
    189a:	87 95       	ror	r24
    189c:	92 95       	swap	r25
    189e:	82 95       	swap	r24
    18a0:	8f 70       	andi	r24, 0x0F	; 15
    18a2:	89 27       	eor	r24, r25
    18a4:	9f 70       	andi	r25, 0x0F	; 15
    18a6:	89 27       	eor	r24, r25
		m_temp.ms[0] = ((m_temp.ms[0]<<1)+m_temp.ms[0])>>5;
		m_pulse_value_rc += m_temp.ms[0];
    18a8:	28 0f       	add	r18, r24
    18aa:	39 1f       	adc	r19, r25
    18ac:	30 93 cd 00 	sts	0x00CD, r19
    18b0:	20 93 cc 00 	sts	0x00CC, r18
		m_temp.ms[0] = m_pulse_value_rc;
	}
	#endif
	//
	m_pulse_value.ml += m_temp.ms[0];
    18b4:	80 91 d8 00 	lds	r24, 0x00D8
    18b8:	90 91 d9 00 	lds	r25, 0x00D9
    18bc:	a0 91 da 00 	lds	r26, 0x00DA
    18c0:	b0 91 db 00 	lds	r27, 0x00DB
    18c4:	82 0f       	add	r24, r18
    18c6:	93 1f       	adc	r25, r19
    18c8:	a1 1d       	adc	r26, r1
    18ca:	b1 1d       	adc	r27, r1
    18cc:	80 93 d8 00 	sts	0x00D8, r24
    18d0:	90 93 d9 00 	sts	0x00D9, r25
    18d4:	a0 93 da 00 	sts	0x00DA, r26
    18d8:	b0 93 db 00 	sts	0x00DB, r27
	m_pulse_counter++;
    18dc:	80 91 a7 01 	lds	r24, 0x01A7
    18e0:	90 91 a8 01 	lds	r25, 0x01A8
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	90 93 a8 01 	sts	0x01A8, r25
    18ea:	80 93 a7 01 	sts	0x01A7, r24
	//
	//软件中用的采样率是10KHz
	if(m_pulse_counter > ((unsigned short)32*1024))//采集刷新时间约2秒      //32 //16 //8        //4096=2^12  //2048=2^11  //1024=2^10  //512=2^9  //256=2^8
    18ee:	80 91 a7 01 	lds	r24, 0x01A7
    18f2:	90 91 a8 01 	lds	r25, 0x01A8
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	90 48       	sbci	r25, 0x80	; 128
    18fa:	08 f4       	brcc	.+2      	; 0x18fe <main+0x24a>
    18fc:	59 c0       	rjmp	.+178    	; 0x19b0 <main+0x2fc>
	{
		m_pulse_value.ml <<= (6-5);                       //5   //4  //3       //16-12      //16-11      //16-10      //16-9     //16-8
    18fe:	80 91 d8 00 	lds	r24, 0x00D8
    1902:	90 91 d9 00 	lds	r25, 0x00D9
    1906:	a0 91 da 00 	lds	r26, 0x00DA
    190a:	b0 91 db 00 	lds	r27, 0x00DB
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	aa 1f       	adc	r26, r26
    1914:	bb 1f       	adc	r27, r27
    1916:	80 93 d8 00 	sts	0x00D8, r24
    191a:	90 93 d9 00 	sts	0x00D9, r25
    191e:	a0 93 da 00 	sts	0x00DA, r26
    1922:	b0 93 db 00 	sts	0x00DB, r27
		m_pulse_value.ml <<= SAMPLE_SHIFT_BIT_NUM;
    1926:	80 91 d8 00 	lds	r24, 0x00D8
    192a:	90 91 d9 00 	lds	r25, 0x00D9
    192e:	a0 91 da 00 	lds	r26, 0x00DA
    1932:	b0 91 db 00 	lds	r27, 0x00DB
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	aa 1f       	adc	r26, r26
    193c:	bb 1f       	adc	r27, r27
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	aa 1f       	adc	r26, r26
    1944:	bb 1f       	adc	r27, r27
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	aa 1f       	adc	r26, r26
    194c:	bb 1f       	adc	r27, r27
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	aa 1f       	adc	r26, r26
    1954:	bb 1f       	adc	r27, r27
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	aa 1f       	adc	r26, r26
    195c:	bb 1f       	adc	r27, r27
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	aa 1f       	adc	r26, r26
    196c:	bb 1f       	adc	r27, r27
    196e:	80 93 d8 00 	sts	0x00D8, r24
    1972:	90 93 d9 00 	sts	0x00D9, r25
    1976:	a0 93 da 00 	sts	0x00DA, r26
    197a:	b0 93 db 00 	sts	0x00DB, r27
		m_mcur.ms = m_pulse_value.ms[1];//丢弃低16位,相当于除以2^16
    197e:	80 91 da 00 	lds	r24, 0x00DA
    1982:	90 91 db 00 	lds	r25, 0x00DB
    1986:	90 93 9d 01 	sts	0x019D, r25
    198a:	80 93 9c 01 	sts	0x019C, r24
		ad_value_flag =1;
    198e:	d0 93 61 00 	sts	0x0061, r29
    1992:	c0 93 60 00 	sts	0x0060, r28
		//
		m_pulse_counter = 0;
    1996:	10 92 a8 01 	sts	0x01A8, r1
    199a:	10 92 a7 01 	sts	0x01A7, r1
		m_pulse_value.ml = 0;
    199e:	10 92 d8 00 	sts	0x00D8, r1
    19a2:	10 92 d9 00 	sts	0x00D9, r1
    19a6:	10 92 da 00 	sts	0x00DA, r1
    19aa:	10 92 db 00 	sts	0x00DB, r1
		//
		liaowei_sample_ok_handling();
    19ae:	ec dd       	rcall	.-1064   	; 0x1588 <liaowei_sample_ok_handling>
		if(pulse_value_counter > 0)
		{
			pulse_value_counter--;
			//
			int1_handling(pulse_value[pulse_value_read_id]);
			pulse_value_read_id++;
    19b0:	80 91 e7 00 	lds	r24, 0x00E7
    19b4:	8f 5f       	subi	r24, 0xFF	; 255
    19b6:	80 93 e7 00 	sts	0x00E7, r24
			pulse_value_read_id %= PULSE_VALUE_NUM;
    19ba:	80 91 e7 00 	lds	r24, 0x00E7
    19be:	8f 73       	andi	r24, 0x3F	; 63
    19c0:	80 93 e7 00 	sts	0x00E7, r24
    19c4:	cc ce       	rjmp	.-616    	; 0x175e <main+0xaa>
			//
			if(m_minute > UPDATE_EEPROM_DATA_INTERVAL)
			{
				//刷新一下内存里的参数，同时也会更新eeprom里的错误参数（如果出现错误的话）
				//
				read_para();
    19c6:	ac da       	rcall	.-2728   	; 0xf20 <read_para>
				//
				m_minute = 0;
    19c8:	10 92 79 01 	sts	0x0179, r1
    19cc:	10 92 78 01 	sts	0x0178, r1
    19d0:	e9 ce       	rjmp	.-558    	; 0x17a4 <main+0xf0>

000019d2 <__vector_9>:
/////////////////////////////////////////////////////////////////
//
//定时器0作为全局定时器,用来管理所有任务的调度
//
ISR(TIMER0_OVF_vect/*,ISR_NOBLOCK*/)//加入ISR_NOBLOCK属性,在中断服务程序中允许中断套嵌
{	
    19d2:	1f 92       	push	r1
    19d4:	0f 92       	push	r0
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	0f 92       	push	r0
    19da:	11 24       	eor	r1, r1
    19dc:	8f 93       	push	r24
    19de:	9f 93       	push	r25
	{
		TCNT0 = 255-62;//4MHz时钟,64分频,计数62次,定时约1毫秒
	}
	#elif F_CPU == F_16M
	{
		TCNT0 = 255-250;//16MHz时钟,64分频,计数62次,定时约1毫秒
    19e0:	85 e0       	ldi	r24, 0x05	; 5
    19e2:	82 bf       	out	0x32, r24	; 50
	}
	#endif
	///////////////
	#if USED_AD == TRUE
	{
		adsc = 1;
    19e4:	36 9a       	sbi	0x06, 6	; 6
	}
	#endif
	///////////////
	//1ms
	ms1_counter++;
    19e6:	80 91 6b 01 	lds	r24, 0x016B
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
    19ec:	80 93 6b 01 	sts	0x016B, r24
    boot_time_sub++;
    19f0:	90 91 a5 01 	lds	r25, 0x01A5
    19f4:	9f 5f       	subi	r25, 0xFF	; 255
    19f6:	90 93 a5 01 	sts	0x01A5, r25
    //
    if(ms1_counter > 9)
    19fa:	8a 30       	cpi	r24, 0x0A	; 10
    19fc:	90 f1       	brcs	.+100    	; 0x1a62 <__vector_9+0x90>
    {
        ms1_counter = 0;
    19fe:	10 92 6b 01 	sts	0x016B, r1
		//
        //10ms
        comm_error_delay++;
    1a02:	80 91 7d 01 	lds	r24, 0x017D
    1a06:	8f 5f       	subi	r24, 0xFF	; 255
    1a08:	80 93 7d 01 	sts	0x017D, r24
        if(comm_error_delay > 250)
    1a0c:	80 91 7d 01 	lds	r24, 0x017D
    1a10:	8b 3f       	cpi	r24, 0xFB	; 251
    1a12:	18 f0       	brcs	.+6      	; 0x1a1a <__vector_9+0x48>
		{
            comm_error_delay = 250;
    1a14:	8a ef       	ldi	r24, 0xFA	; 250
    1a16:	80 93 7d 01 	sts	0x017D, r24
		}
        //
        ms10_counter++;
    1a1a:	80 91 6c 01 	lds	r24, 0x016C
    1a1e:	8f 5f       	subi	r24, 0xFF	; 255
    1a20:	80 93 6c 01 	sts	0x016C, r24
        if(ms10_counter > 9)
    1a24:	8a 30       	cpi	r24, 0x0A	; 10
    1a26:	e8 f0       	brcs	.+58     	; 0x1a62 <__vector_9+0x90>
        {
            ms10_counter = 0;
    1a28:	10 92 6c 01 	sts	0x016C, r1
            //100ms
            ms100_counter++;
    1a2c:	80 91 a4 01 	lds	r24, 0x01A4
    1a30:	8f 5f       	subi	r24, 0xFF	; 255
    1a32:	80 93 a4 01 	sts	0x01A4, r24
            if(ms100_counter > 9)
    1a36:	8a 30       	cpi	r24, 0x0A	; 10
    1a38:	a0 f0       	brcs	.+40     	; 0x1a62 <__vector_9+0x90>
            {
                ms100_counter = 0;
    1a3a:	10 92 a4 01 	sts	0x01A4, r1
                //1s
                s1_counter++;
    1a3e:	80 91 a2 01 	lds	r24, 0x01A2
    1a42:	8f 5f       	subi	r24, 0xFF	; 255
    1a44:	80 93 a2 01 	sts	0x01A2, r24
                if(s1_counter > 59)
    1a48:	8c 33       	cpi	r24, 0x3C	; 60
    1a4a:	58 f0       	brcs	.+22     	; 0x1a62 <__vector_9+0x90>
                {
	                //60s
	                s1_counter = 0;
    1a4c:	10 92 a2 01 	sts	0x01A2, r1
	                //
	                m_minute++;
    1a50:	80 91 78 01 	lds	r24, 0x0178
    1a54:	90 91 79 01 	lds	r25, 0x0179
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	90 93 79 01 	sts	0x0179, r25
    1a5e:	80 93 78 01 	sts	0x0178, r24
                }
            }
        }

    }
}
    1a62:	9f 91       	pop	r25
    1a64:	8f 91       	pop	r24
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	0f 90       	pop	r0
    1a6c:	1f 90       	pop	r1
    1a6e:	18 95       	reti

00001a70 <__vector_2>:
//
//外中断1,下降沿触发中断,输出正脉冲的结束边沿
//
ISR(INT1_vect)
{
    1a70:	1f 92       	push	r1
    1a72:	0f 92       	push	r0
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	0f 92       	push	r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	8f 93       	push	r24
    1a7c:	9f 93       	push	r25
    1a7e:	ef 93       	push	r30
    1a80:	ff 93       	push	r31
    pulse_value[pulse_value_write_id] = TCNT1;
    1a82:	e0 91 77 01 	lds	r30, 0x0177
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	8c b5       	in	r24, 0x2c	; 44
    1a8a:	9d b5       	in	r25, 0x2d	; 45
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	e7 51       	subi	r30, 0x17	; 23
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
	pulse_value_write_id++;
    1a98:	80 91 77 01 	lds	r24, 0x0177
    1a9c:	8f 5f       	subi	r24, 0xFF	; 255
    1a9e:	80 93 77 01 	sts	0x0177, r24
	pulse_value_write_id %= PULSE_VALUE_NUM;
    1aa2:	80 91 77 01 	lds	r24, 0x0177
    1aa6:	8f 73       	andi	r24, 0x3F	; 63
    1aa8:	80 93 77 01 	sts	0x0177, r24
	//
	pulse_value_counter++;
    1aac:	80 91 a6 01 	lds	r24, 0x01A6
    1ab0:	8f 5f       	subi	r24, 0xFF	; 255
    1ab2:	80 93 a6 01 	sts	0x01A6, r24
}
    1ab6:	ff 91       	pop	r31
    1ab8:	ef 91       	pop	r30
    1aba:	9f 91       	pop	r25
    1abc:	8f 91       	pop	r24
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	0f 90       	pop	r0
    1ac4:	1f 90       	pop	r1
    1ac6:	18 95       	reti

00001ac8 <__vector_14>:
/////////////////////////////////////////////////////////////////
//
#if USED_AD == TRUE
//AD转换完成，检测ICM7555输出PWM电平
ISR(ADC_vect)
{
    1ac8:	1f 92       	push	r1
    1aca:	0f 92       	push	r0
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	0f 92       	push	r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	2f 93       	push	r18
    1ad4:	3f 93       	push	r19
    1ad6:	8f 93       	push	r24
    1ad8:	9f 93       	push	r25
    1ada:	af 93       	push	r26
    1adc:	bf 93       	push	r27
	UCHAR2 tmp;
	tmp.mc[0] = ADCL; //必须先读
    1ade:	84 b1       	in	r24, 0x04	; 4
    1ae0:	28 2f       	mov	r18, r24
	tmp.mc[1] = ADCH;
    1ae2:	85 b1       	in	r24, 0x05	; 5
    1ae4:	38 2f       	mov	r19, r24
	tmp.ms &= 0x03ff;
	//
	m_ad_value.ml += tmp.ms;//累加ad值，丢弃低两位
    1ae6:	80 91 6d 01 	lds	r24, 0x016D
    1aea:	90 91 6e 01 	lds	r25, 0x016E
    1aee:	a0 91 6f 01 	lds	r26, 0x016F
    1af2:	b0 91 70 01 	lds	r27, 0x0170
ISR(ADC_vect)
{
	UCHAR2 tmp;
	tmp.mc[0] = ADCL; //必须先读
	tmp.mc[1] = ADCH;
	tmp.ms &= 0x03ff;
    1af6:	33 70       	andi	r19, 0x03	; 3
	//
	m_ad_value.ml += tmp.ms;//累加ad值，丢弃低两位
    1af8:	82 0f       	add	r24, r18
    1afa:	93 1f       	adc	r25, r19
    1afc:	a1 1d       	adc	r26, r1
    1afe:	b1 1d       	adc	r27, r1
    1b00:	80 93 6d 01 	sts	0x016D, r24
    1b04:	90 93 6e 01 	sts	0x016E, r25
    1b08:	a0 93 6f 01 	sts	0x016F, r26
    1b0c:	b0 93 70 01 	sts	0x0170, r27
	//
	m_ad_counter++;
    1b10:	80 91 ce 00 	lds	r24, 0x00CE
    1b14:	90 91 cf 00 	lds	r25, 0x00CF
    1b18:	01 96       	adiw	r24, 0x01	; 1
    1b1a:	90 93 cf 00 	sts	0x00CF, r25
    1b1e:	80 93 ce 00 	sts	0x00CE, r24
	if(m_ad_counter > 128)//采集刷新时间约128ms
    1b22:	80 91 ce 00 	lds	r24, 0x00CE
    1b26:	90 91 cf 00 	lds	r25, 0x00CF
    1b2a:	81 38       	cpi	r24, 0x81	; 129
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	40 f1       	brcs	.+80     	; 0x1b80 <__vector_14+0xb8>
	{
		//10位数据，累加128（2^7）个数值，保留高16位
		m_ad_value.ml >>= (10+7-16);
    1b30:	80 91 6d 01 	lds	r24, 0x016D
    1b34:	90 91 6e 01 	lds	r25, 0x016E
    1b38:	a0 91 6f 01 	lds	r26, 0x016F
    1b3c:	b0 91 70 01 	lds	r27, 0x0170
    1b40:	b6 95       	lsr	r27
    1b42:	a7 95       	ror	r26
    1b44:	97 95       	ror	r25
    1b46:	87 95       	ror	r24
    1b48:	80 93 6d 01 	sts	0x016D, r24
    1b4c:	90 93 6e 01 	sts	0x016E, r25
    1b50:	a0 93 6f 01 	sts	0x016F, r26
    1b54:	b0 93 70 01 	sts	0x0170, r27
		//
		m_mcur_ad.ms = m_ad_value.ms[0];
    1b58:	80 91 6d 01 	lds	r24, 0x016D
    1b5c:	90 91 6e 01 	lds	r25, 0x016E
    1b60:	90 93 6a 01 	sts	0x016A, r25
    1b64:	80 93 69 01 	sts	0x0169, r24
		//
		m_ad_counter = 0;
    1b68:	10 92 cf 00 	sts	0x00CF, r1
    1b6c:	10 92 ce 00 	sts	0x00CE, r1
		m_ad_value.ml = 0;
    1b70:	10 92 6d 01 	sts	0x016D, r1
    1b74:	10 92 6e 01 	sts	0x016E, r1
    1b78:	10 92 6f 01 	sts	0x016F, r1
    1b7c:	10 92 70 01 	sts	0x0170, r1
	}
}
    1b80:	bf 91       	pop	r27
    1b82:	af 91       	pop	r26
    1b84:	9f 91       	pop	r25
    1b86:	8f 91       	pop	r24
    1b88:	3f 91       	pop	r19
    1b8a:	2f 91       	pop	r18
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <__vector_13>:
//
//串口发送中断
//
#if USART_TEST == FALSE
ISR(USART_TXC_vect)
{
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	8f 93       	push	r24
    1ba2:	9f 93       	push	r25
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
    if(uart_tx_addr < 10)
    1ba8:	80 91 e8 00 	lds	r24, 0x00E8
    1bac:	8a 30       	cpi	r24, 0x0A	; 10
    1bae:	a0 f4       	brcc	.+40     	; 0x1bd8 <__vector_13+0x42>
    {
        UDR = uart_tx_buf[uart_tx_addr++];
    1bb0:	e0 91 e8 00 	lds	r30, 0x00E8
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	8e 0f       	add	r24, r30
    1bb8:	80 93 e8 00 	sts	0x00E8, r24
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	e4 52       	subi	r30, 0x24	; 36
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8c b9       	out	0x0c, r24	; 12
    else
    {
        _delay_us(100);
        b485en = 0;
    }
}
    1bc6:	ff 91       	pop	r31
    1bc8:	ef 91       	pop	r30
    1bca:	9f 91       	pop	r25
    1bcc:	8f 91       	pop	r24
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bd8:	8f e8       	ldi	r24, 0x8F	; 143
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <__vector_13+0x46>
    1be0:	00 c0       	rjmp	.+0      	; 0x1be2 <__vector_13+0x4c>
    1be2:	00 00       	nop
        UDR = uart_tx_buf[uart_tx_addr++];
    }
    else
    {
        _delay_us(100);
        b485en = 0;
    1be4:	97 98       	cbi	0x12, 7	; 18
    1be6:	ef cf       	rjmp	.-34     	; 0x1bc6 <__vector_13+0x30>

00001be8 <__vector_11>:
/////////////////////////////////////////////////////////////////
//
//串口接收中断
//
ISR(USART_RXC_vect)
{
    1be8:	1f 92       	push	r1
    1bea:	0f 92       	push	r0
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	0f 92       	push	r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	2f 93       	push	r18
    1bf4:	3f 93       	push	r19
    1bf6:	4f 93       	push	r20
    1bf8:	5f 93       	push	r21
    1bfa:	6f 93       	push	r22
    1bfc:	7f 93       	push	r23
    1bfe:	8f 93       	push	r24
    1c00:	9f 93       	push	r25
    1c02:	af 93       	push	r26
    1c04:	bf 93       	push	r27
    1c06:	ef 93       	push	r30
    1c08:	ff 93       	push	r31
	unsigned char uart_value,sum,i,temp;
    //
	if((UCSRA&0x1c) != 0)
    1c0a:	8b b1       	in	r24, 0x0b	; 11
    1c0c:	8c 71       	andi	r24, 0x1C	; 28
    1c0e:	d1 f0       	breq	.+52     	; 0x1c44 <__vector_11+0x5c>
	{
		//串口接收出现错误
		uart_rx_counter = 0;
    1c10:	10 92 e6 00 	sts	0x00E6, r1
        uart_frame_head_ok = 0;
    1c14:	10 92 76 01 	sts	0x0176, r1
		while ( UCSRA & (1<<RXC) ) 
    1c18:	5f 9b       	sbis	0x0b, 7	; 11
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <__vector_11+0x3a>
		{
			uart_value = UDR;
    1c1c:	8c b1       	in	r24, 0x0c	; 12
	if((UCSRA&0x1c) != 0)
	{
		//串口接收出现错误
		uart_rx_counter = 0;
        uart_frame_head_ok = 0;
		while ( UCSRA & (1<<RXC) ) 
    1c1e:	5f 99       	sbic	0x0b, 7	; 11
    1c20:	fd cf       	rjmp	.-6      	; 0x1c1c <__vector_11+0x34>
		        uart_frame_head_ok = 1;
	        }
        }
#endif //IS_MMR_USED
	}
}
    1c22:	ff 91       	pop	r31
    1c24:	ef 91       	pop	r30
    1c26:	bf 91       	pop	r27
    1c28:	af 91       	pop	r26
    1c2a:	9f 91       	pop	r25
    1c2c:	8f 91       	pop	r24
    1c2e:	7f 91       	pop	r23
    1c30:	6f 91       	pop	r22
    1c32:	5f 91       	pop	r21
    1c34:	4f 91       	pop	r20
    1c36:	3f 91       	pop	r19
    1c38:	2f 91       	pop	r18
    1c3a:	0f 90       	pop	r0
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	0f 90       	pop	r0
    1c40:	1f 90       	pop	r1
    1c42:	18 95       	reti
		}
	}
	else
	{
		//串口接收正常
		uart_value = UDR;
    1c44:	9c b1       	in	r25, 0x0c	; 12
        //
#if IS_MMR_USED == TRUE
        if(1 == uart_frame_head_ok)
    1c46:	80 91 76 01 	lds	r24, 0x0176
    1c4a:	81 30       	cpi	r24, 0x01	; 1
    1c4c:	51 f0       	breq	.+20     	; 0x1c62 <__vector_11+0x7a>
                }
            }
        }
        else
        {
            if(0xaa == uart_value)
    1c4e:	9a 3a       	cpi	r25, 0xAA	; 170
    1c50:	41 f7       	brne	.-48     	; 0x1c22 <__vector_11+0x3a>
            {
				comm_error_delay = 0;
    1c52:	10 92 7d 01 	sts	0x017D, r1

				uart_rx_counter = 0;
    1c56:	10 92 e6 00 	sts	0x00E6, r1
                uart_frame_head_ok = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 93 76 01 	sts	0x0176, r24
    1c60:	e0 cf       	rjmp	.-64     	; 0x1c22 <__vector_11+0x3a>
		uart_value = UDR;
        //
#if IS_MMR_USED == TRUE
        if(1 == uart_frame_head_ok)
        {
            uart_rx_buf[uart_rx_counter++] = uart_value;
    1c62:	e0 91 e6 00 	lds	r30, 0x00E6
    1c66:	8e 0f       	add	r24, r30
    1c68:	80 93 e6 00 	sts	0x00E6, r24
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	e0 57       	subi	r30, 0x70	; 112
    1c70:	fe 4f       	sbci	r31, 0xFE	; 254
    1c72:	90 83       	st	Z, r25
            if(uart_rx_counter > 8)//接收6个字节有效参数和一个字节校验和
    1c74:	89 30       	cpi	r24, 0x09	; 9
    1c76:	a8 f2       	brcs	.-86     	; 0x1c22 <__vector_11+0x3a>
            {
                uart_rx_counter = 0;
    1c78:	10 92 e6 00 	sts	0x00E6, r1
                uart_frame_head_ok = 0;
    1c7c:	10 92 76 01 	sts	0x0176, r1
                //
                sum = 0xaa;
                for(i=0; i<8; i++)
				{
                    sum += uart_rx_buf[i];
    1c80:	40 91 90 01 	lds	r20, 0x0190
    1c84:	9a ea       	ldi	r25, 0xAA	; 170
    1c86:	94 0f       	add	r25, r20
    1c88:	30 91 91 01 	lds	r19, 0x0191
    1c8c:	93 0f       	add	r25, r19
    1c8e:	20 91 92 01 	lds	r18, 0x0192
    1c92:	92 0f       	add	r25, r18
    1c94:	80 91 93 01 	lds	r24, 0x0193
    1c98:	98 0f       	add	r25, r24
    1c9a:	60 91 94 01 	lds	r22, 0x0194
    1c9e:	96 0f       	add	r25, r22
    1ca0:	50 91 95 01 	lds	r21, 0x0195
    1ca4:	95 0f       	add	r25, r21
    1ca6:	50 91 96 01 	lds	r21, 0x0196
    1caa:	95 0f       	add	r25, r21
    1cac:	50 91 97 01 	lds	r21, 0x0197
    1cb0:	95 0f       	add	r25, r21
				}
                if(sum == uart_rx_buf[8])
    1cb2:	50 91 98 01 	lds	r21, 0x0198
    1cb6:	95 13       	cpse	r25, r21
    1cb8:	b4 cf       	rjmp	.-152    	; 0x1c22 <__vector_11+0x3a>
                {
                    if(ADDR_CGQ == uart_rx_buf[0])
    1cba:	43 30       	cpi	r20, 0x03	; 3
    1cbc:	19 f0       	breq	.+6      	; 0x1cc4 <__vector_11+0xdc>
							send_time_count = 0;
						}
                        //
                        uart_send_enable = 1;//串口发送使能
                    }
					comm_error_delay = 0;
    1cbe:	10 92 7d 01 	sts	0x017D, r1
    1cc2:	af cf       	rjmp	.-162    	; 0x1c22 <__vector_11+0x3a>
				}
                if(sum == uart_rx_buf[8])
                {
                    if(ADDR_CGQ == uart_rx_buf[0])
                    {
                        comm_error_delay = 0;
    1cc4:	10 92 7d 01 	sts	0x017D, r1
                        //
                        command_gaoliaowei = 0;
    1cc8:	10 92 73 01 	sts	0x0173, r1
                        command_diliaowei = 0;
    1ccc:	10 92 74 01 	sts	0x0174, r1
                        if(GAOLIAOWEI == uart_rx_buf[1] || GAOLIAOWEI == uart_rx_buf[2])
    1cd0:	34 33       	cpi	r19, 0x34	; 52
    1cd2:	c1 f0       	breq	.+48     	; 0x1d04 <__vector_11+0x11c>
    1cd4:	24 33       	cpi	r18, 0x34	; 52
    1cd6:	b1 f0       	breq	.+44     	; 0x1d04 <__vector_11+0x11c>
						{
                            command_gaoliaowei = 1;
							uart_tx_buf[2] = GAOLIAOWEI;
							send_time_count = 0;
						}
                        else if(DILIAOWEI == uart_rx_buf[1] || DILIAOWEI == uart_rx_buf[2])
    1cd8:	35 33       	cpi	r19, 0x35	; 53
    1cda:	f9 f0       	breq	.+62     	; 0x1d1a <__vector_11+0x132>
    1cdc:	25 33       	cpi	r18, 0x35	; 53
    1cde:	e9 f0       	breq	.+58     	; 0x1d1a <__vector_11+0x132>
						{
                            command_diliaowei = 1;
							uart_tx_buf[2] = DILIAOWEI;
							send_time_count = 0;
						}else if(SHUAXIANSHUJU == uart_rx_buf[1] || SHUAXIANSHUJU == uart_rx_buf[2])
    1ce0:	36 33       	cpi	r19, 0x36	; 54
    1ce2:	31 f1       	breq	.+76     	; 0x1d30 <__vector_11+0x148>
    1ce4:	26 33       	cpi	r18, 0x36	; 54
    1ce6:	21 f1       	breq	.+72     	; 0x1d30 <__vector_11+0x148>
						{
							uart_tx_buf[2] = SHUAXIANSHUJU;
							send_time_count = 0;
						}
						else if(GAOLIAOWEI_SET == uart_rx_buf[1] && GAOLIAOWEI_SET == uart_rx_buf[2])
    1ce8:	39 33       	cpi	r19, 0x39	; 57
    1cea:	09 f4       	brne	.+2      	; 0x1cee <__vector_11+0x106>
    1cec:	49 c0       	rjmp	.+146    	; 0x1d80 <__vector_11+0x198>
							m_mh_set = uart_rx_buf[3]* 256 +uart_rx_buf[4];
							eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
							_delay_ms(2);
							send_time_count = 0;
						}
						else if(DILIAOWEI_SET == uart_rx_buf[1] && DILIAOWEI_SET == uart_rx_buf[2])
    1cee:	38 33       	cpi	r19, 0x38	; 56
    1cf0:	39 f1       	breq	.+78     	; 0x1d40 <__vector_11+0x158>
							m_ml_set = uart_rx_buf[3]*256 +uart_rx_buf[4];
							eeprom_write_word_user((uint16_t *)&m_para[0].e_ml, m_ml_set);
							_delay_ms(2);
							send_time_count = 0;
						}
						else if(SMOOTHING_SET == uart_rx_buf[1] && SMOOTHING_SET == uart_rx_buf[2])
    1cf2:	3a 33       	cpi	r19, 0x3A	; 58
    1cf4:	19 f4       	brne	.+6      	; 0x1cfc <__vector_11+0x114>
    1cf6:	2a 33       	cpi	r18, 0x3A	; 58
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <__vector_11+0x114>
    1cfa:	58 c0       	rjmp	.+176    	; 0x1dac <__vector_11+0x1c4>
								_delay_ms(2);
							}
							send_time_count = 0;
						}
                        //
                        uart_send_enable = 1;//串口发送使能
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	80 93 a3 01 	sts	0x01A3, r24
    1d02:	dd cf       	rjmp	.-70     	; 0x1cbe <__vector_11+0xd6>
                        //
                        command_gaoliaowei = 0;
                        command_diliaowei = 0;
                        if(GAOLIAOWEI == uart_rx_buf[1] || GAOLIAOWEI == uart_rx_buf[2])
						{
                            command_gaoliaowei = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	80 93 73 01 	sts	0x0173, r24
							uart_tx_buf[2] = GAOLIAOWEI;
    1d0a:	84 e3       	ldi	r24, 0x34	; 52
    1d0c:	80 93 de 00 	sts	0x00DE, r24
							send_time_count = 0;
    1d10:	10 92 69 00 	sts	0x0069, r1
    1d14:	10 92 68 00 	sts	0x0068, r1
    1d18:	f1 cf       	rjmp	.-30     	; 0x1cfc <__vector_11+0x114>
						}
                        else if(DILIAOWEI == uart_rx_buf[1] || DILIAOWEI == uart_rx_buf[2])
						{
                            command_diliaowei = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	80 93 74 01 	sts	0x0174, r24
							uart_tx_buf[2] = DILIAOWEI;
    1d20:	85 e3       	ldi	r24, 0x35	; 53
    1d22:	80 93 de 00 	sts	0x00DE, r24
							send_time_count = 0;
    1d26:	10 92 69 00 	sts	0x0069, r1
    1d2a:	10 92 68 00 	sts	0x0068, r1
    1d2e:	e6 cf       	rjmp	.-52     	; 0x1cfc <__vector_11+0x114>
						}else if(SHUAXIANSHUJU == uart_rx_buf[1] || SHUAXIANSHUJU == uart_rx_buf[2])
						{
							uart_tx_buf[2] = SHUAXIANSHUJU;
    1d30:	86 e3       	ldi	r24, 0x36	; 54
    1d32:	80 93 de 00 	sts	0x00DE, r24
							send_time_count = 0;
    1d36:	10 92 69 00 	sts	0x0069, r1
    1d3a:	10 92 68 00 	sts	0x0068, r1
    1d3e:	de cf       	rjmp	.-68     	; 0x1cfc <__vector_11+0x114>
							m_mh_set = uart_rx_buf[3]* 256 +uart_rx_buf[4];
							eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
							_delay_ms(2);
							send_time_count = 0;
						}
						else if(DILIAOWEI_SET == uart_rx_buf[1] && DILIAOWEI_SET == uart_rx_buf[2])
    1d40:	28 33       	cpi	r18, 0x38	; 56
    1d42:	e1 f6       	brne	.-72     	; 0x1cfc <__vector_11+0x114>
						{

							uart_tx_buf[2] = SHUAXIANSHUJU;
    1d44:	96 e3       	ldi	r25, 0x36	; 54
    1d46:	90 93 de 00 	sts	0x00DE, r25
							m_ml_set = uart_rx_buf[3]*256 +uart_rx_buf[4];
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	88 27       	eor	r24, r24
    1d50:	86 0f       	add	r24, r22
    1d52:	91 1d       	adc	r25, r1
    1d54:	90 93 8f 01 	sts	0x018F, r25
    1d58:	80 93 8e 01 	sts	0x018E, r24
							eeprom_write_word_user((uint16_t *)&m_para[0].e_ml, m_ml_set);
    1d5c:	60 91 8e 01 	lds	r22, 0x018E
    1d60:	70 91 8f 01 	lds	r23, 0x018F
    1d64:	82 ec       	ldi	r24, 0xC2	; 194
    1d66:	90 e0       	ldi	r25, 0x00	; 0
							uart_tx_buf[2] = SMOOTHING_SET;
							temp = uart_rx_buf[3]*256 +uart_rx_buf[4];
							if(temp < 10)
							{
							    smoothingDate = temp;
								eeprom_write_word_user((uint16_t *)&m_para[0].smoothingDate, smoothingDate);
    1d68:	ff d7       	rcall	.+4094   	; 0x2d68 <_etext+0xec8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d6a:	8f e3       	ldi	r24, 0x3F	; 63
    1d6c:	9f e1       	ldi	r25, 0x1F	; 31
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <__vector_11+0x186>
    1d72:	00 c0       	rjmp	.+0      	; 0x1d74 <__vector_11+0x18c>
    1d74:	00 00       	nop
								_delay_ms(2);
							}
							send_time_count = 0;
    1d76:	10 92 69 00 	sts	0x0069, r1
    1d7a:	10 92 68 00 	sts	0x0068, r1
    1d7e:	be cf       	rjmp	.-132    	; 0x1cfc <__vector_11+0x114>
						}else if(SHUAXIANSHUJU == uart_rx_buf[1] || SHUAXIANSHUJU == uart_rx_buf[2])
						{
							uart_tx_buf[2] = SHUAXIANSHUJU;
							send_time_count = 0;
						}
						else if(GAOLIAOWEI_SET == uart_rx_buf[1] && GAOLIAOWEI_SET == uart_rx_buf[2])
    1d80:	29 33       	cpi	r18, 0x39	; 57
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <__vector_11+0x19e>
    1d84:	bb cf       	rjmp	.-138    	; 0x1cfc <__vector_11+0x114>
						{

							uart_tx_buf[2] = SHUAXIANSHUJU;
    1d86:	96 e3       	ldi	r25, 0x36	; 54
    1d88:	90 93 de 00 	sts	0x00DE, r25

							m_mh_set = uart_rx_buf[3]* 256 +uart_rx_buf[4];
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	98 2f       	mov	r25, r24
    1d90:	88 27       	eor	r24, r24
    1d92:	86 0f       	add	r24, r22
    1d94:	91 1d       	adc	r25, r1
    1d96:	90 93 85 01 	sts	0x0185, r25
    1d9a:	80 93 84 01 	sts	0x0184, r24
							eeprom_write_word_user((uint16_t *)&m_para[0].e_mh, m_mh_set);
    1d9e:	60 91 84 01 	lds	r22, 0x0184
    1da2:	70 91 85 01 	lds	r23, 0x0185
    1da6:	80 ec       	ldi	r24, 0xC0	; 192
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	de cf       	rjmp	.-68     	; 0x1d68 <__vector_11+0x180>
							send_time_count = 0;
						}
						else if(SMOOTHING_SET == uart_rx_buf[1] && SMOOTHING_SET == uart_rx_buf[2])
						{

							uart_tx_buf[2] = SMOOTHING_SET;
    1dac:	20 93 de 00 	sts	0x00DE, r18
							temp = uart_rx_buf[3]*256 +uart_rx_buf[4];
							if(temp < 10)
    1db0:	6a 30       	cpi	r22, 0x0A	; 10
    1db2:	08 f7       	brcc	.-62     	; 0x1d76 <__vector_11+0x18e>
							{
							    smoothingDate = temp;
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	70 93 67 00 	sts	0x0067, r23
    1dba:	60 93 66 00 	sts	0x0066, r22
								eeprom_write_word_user((uint16_t *)&m_para[0].smoothingDate, smoothingDate);
    1dbe:	86 ec       	ldi	r24, 0xC6	; 198
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	d2 cf       	rjmp	.-92     	; 0x1d68 <__vector_11+0x180>

00001dc4 <__udivmodsi4>:
    1dc4:	a1 e2       	ldi	r26, 0x21	; 33
    1dc6:	1a 2e       	mov	r1, r26
    1dc8:	aa 1b       	sub	r26, r26
    1dca:	bb 1b       	sub	r27, r27
    1dcc:	fd 01       	movw	r30, r26
    1dce:	0d c0       	rjmp	.+26     	; 0x1dea <__udivmodsi4_ep>

00001dd0 <__udivmodsi4_loop>:
    1dd0:	aa 1f       	adc	r26, r26
    1dd2:	bb 1f       	adc	r27, r27
    1dd4:	ee 1f       	adc	r30, r30
    1dd6:	ff 1f       	adc	r31, r31
    1dd8:	a2 17       	cp	r26, r18
    1dda:	b3 07       	cpc	r27, r19
    1ddc:	e4 07       	cpc	r30, r20
    1dde:	f5 07       	cpc	r31, r21
    1de0:	20 f0       	brcs	.+8      	; 0x1dea <__udivmodsi4_ep>
    1de2:	a2 1b       	sub	r26, r18
    1de4:	b3 0b       	sbc	r27, r19
    1de6:	e4 0b       	sbc	r30, r20
    1de8:	f5 0b       	sbc	r31, r21

00001dea <__udivmodsi4_ep>:
    1dea:	66 1f       	adc	r22, r22
    1dec:	77 1f       	adc	r23, r23
    1dee:	88 1f       	adc	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	1a 94       	dec	r1
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <__udivmodsi4_loop>
    1df6:	60 95       	com	r22
    1df8:	70 95       	com	r23
    1dfa:	80 95       	com	r24
    1dfc:	90 95       	com	r25
    1dfe:	9b 01       	movw	r18, r22
    1e00:	ac 01       	movw	r20, r24
    1e02:	bd 01       	movw	r22, r26
    1e04:	cf 01       	movw	r24, r30
    1e06:	08 95       	ret

00001e08 <__umulhisi3>:
    1e08:	a2 9f       	mul	r26, r18
    1e0a:	b0 01       	movw	r22, r0
    1e0c:	b3 9f       	mul	r27, r19
    1e0e:	c0 01       	movw	r24, r0
    1e10:	a3 9f       	mul	r26, r19
    1e12:	01 d0       	rcall	.+2      	; 0x1e16 <__umulhisi3+0xe>
    1e14:	b2 9f       	mul	r27, r18
    1e16:	70 0d       	add	r23, r0
    1e18:	81 1d       	adc	r24, r1
    1e1a:	11 24       	eor	r1, r1
    1e1c:	91 1d       	adc	r25, r1
    1e1e:	08 95       	ret

00001e20 <__ashldi3>:
    1e20:	0f 93       	push	r16
    1e22:	08 30       	cpi	r16, 0x08	; 8
    1e24:	90 f0       	brcs	.+36     	; 0x1e4a <__ashldi3+0x2a>
    1e26:	98 2f       	mov	r25, r24
    1e28:	87 2f       	mov	r24, r23
    1e2a:	76 2f       	mov	r23, r22
    1e2c:	65 2f       	mov	r22, r21
    1e2e:	54 2f       	mov	r21, r20
    1e30:	43 2f       	mov	r20, r19
    1e32:	32 2f       	mov	r19, r18
    1e34:	22 27       	eor	r18, r18
    1e36:	08 50       	subi	r16, 0x08	; 8
    1e38:	f4 cf       	rjmp	.-24     	; 0x1e22 <__ashldi3+0x2>
    1e3a:	22 0f       	add	r18, r18
    1e3c:	33 1f       	adc	r19, r19
    1e3e:	44 1f       	adc	r20, r20
    1e40:	55 1f       	adc	r21, r21
    1e42:	66 1f       	adc	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 95       	dec	r16
    1e4c:	b2 f7       	brpl	.-20     	; 0x1e3a <__ashldi3+0x1a>
    1e4e:	0f 91       	pop	r16
    1e50:	08 95       	ret

00001e52 <__eerd_word_m8a>:
    1e52:	a8 e1       	ldi	r26, 0x18	; 24
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	42 e0       	ldi	r20, 0x02	; 2
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	05 c0       	rjmp	.+10     	; 0x1e66 <__eerd_blraw_m8a>

00001e5c <__eewr_word_m8a>:
    1e5c:	12 d0       	rcall	.+36     	; 0x1e82 <__eewr_byte_m8a>
    1e5e:	27 2f       	mov	r18, r23
    1e60:	11 c0       	rjmp	.+34     	; 0x1e84 <__eewr_r18_m8a>

00001e62 <__eerd_block_m8a>:
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22

00001e66 <__eerd_blraw_m8a>:
    1e66:	fc 01       	movw	r30, r24
    1e68:	e1 99       	sbic	0x1c, 1	; 28
    1e6a:	fe cf       	rjmp	.-4      	; 0x1e68 <__eerd_blraw_m8a+0x2>
    1e6c:	06 c0       	rjmp	.+12     	; 0x1e7a <__eerd_blraw_m8a+0x14>
    1e6e:	ff bb       	out	0x1f, r31	; 31
    1e70:	ee bb       	out	0x1e, r30	; 30
    1e72:	e0 9a       	sbi	0x1c, 0	; 28
    1e74:	31 96       	adiw	r30, 0x01	; 1
    1e76:	0d b2       	in	r0, 0x1d	; 29
    1e78:	0d 92       	st	X+, r0
    1e7a:	41 50       	subi	r20, 0x01	; 1
    1e7c:	50 40       	sbci	r21, 0x00	; 0
    1e7e:	b8 f7       	brcc	.-18     	; 0x1e6e <__eerd_blraw_m8a+0x8>
    1e80:	08 95       	ret

00001e82 <__eewr_byte_m8a>:
    1e82:	26 2f       	mov	r18, r22

00001e84 <__eewr_r18_m8a>:
    1e84:	e1 99       	sbic	0x1c, 1	; 28
    1e86:	fe cf       	rjmp	.-4      	; 0x1e84 <__eewr_r18_m8a>
    1e88:	9f bb       	out	0x1f, r25	; 31
    1e8a:	8e bb       	out	0x1e, r24	; 30
    1e8c:	2d bb       	out	0x1d, r18	; 29
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	e2 9a       	sbi	0x1c, 2	; 28
    1e94:	e1 9a       	sbi	0x1c, 1	; 28
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	08 95       	ret

00001e9c <_exit>:
    1e9c:	f8 94       	cli

00001e9e <__stop_program>:
    1e9e:	ff cf       	rjmp	.-2      	; 0x1e9e <__stop_program>
